/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package co.tagtalk.winemate.thriftfiles;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-24")
public class OpenedBottlesResponse implements org.apache.thrift.TBase<OpenedBottlesResponse, OpenedBottlesResponse._Fields>, java.io.Serializable, Cloneable, Comparable<OpenedBottlesResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OpenedBottlesResponse");

  private static final org.apache.thrift.protocol.TField OPENED_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("openedNumber", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField RATED_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("ratedNumber", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SCANNED_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("scannedNumber", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField WISH_LIST_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("wishListSize", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField TOTAL_WINES_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("totalWinesNumber", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField CURRENT_OPENED_BOTTLE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("currentOpenedBottleInfo", org.apache.thrift.protocol.TType.STRUCT, (short)7);
  private static final org.apache.thrift.protocol.TField OPENED_BOTTLE_HISTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("openedBottleHistory", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField PHOTO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("photoUrl", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OpenedBottlesResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OpenedBottlesResponseTupleSchemeFactory());
  }

  public int openedNumber; // required
  public int ratedNumber; // required
  public int scannedNumber; // required
  public int wishListSize; // required
  public int totalWinesNumber; // required
  /**
   * 
   * @see ReviewerSex
   */
  public ReviewerSex sex; // required
  public BottleInfo currentOpenedBottleInfo; // required
  public List<BottleInfo> openedBottleHistory; // required
  public String photoUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPENED_NUMBER((short)1, "openedNumber"),
    RATED_NUMBER((short)2, "ratedNumber"),
    SCANNED_NUMBER((short)3, "scannedNumber"),
    WISH_LIST_SIZE((short)4, "wishListSize"),
    TOTAL_WINES_NUMBER((short)5, "totalWinesNumber"),
    /**
     * 
     * @see ReviewerSex
     */
    SEX((short)6, "sex"),
    CURRENT_OPENED_BOTTLE_INFO((short)7, "currentOpenedBottleInfo"),
    OPENED_BOTTLE_HISTORY((short)8, "openedBottleHistory"),
    PHOTO_URL((short)9, "photoUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPENED_NUMBER
          return OPENED_NUMBER;
        case 2: // RATED_NUMBER
          return RATED_NUMBER;
        case 3: // SCANNED_NUMBER
          return SCANNED_NUMBER;
        case 4: // WISH_LIST_SIZE
          return WISH_LIST_SIZE;
        case 5: // TOTAL_WINES_NUMBER
          return TOTAL_WINES_NUMBER;
        case 6: // SEX
          return SEX;
        case 7: // CURRENT_OPENED_BOTTLE_INFO
          return CURRENT_OPENED_BOTTLE_INFO;
        case 8: // OPENED_BOTTLE_HISTORY
          return OPENED_BOTTLE_HISTORY;
        case 9: // PHOTO_URL
          return PHOTO_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPENEDNUMBER_ISSET_ID = 0;
  private static final int __RATEDNUMBER_ISSET_ID = 1;
  private static final int __SCANNEDNUMBER_ISSET_ID = 2;
  private static final int __WISHLISTSIZE_ISSET_ID = 3;
  private static final int __TOTALWINESNUMBER_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPENED_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("openedNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.RATED_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("ratedNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SCANNED_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("scannedNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WISH_LIST_SIZE, new org.apache.thrift.meta_data.FieldMetaData("wishListSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.TOTAL_WINES_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("totalWinesNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ReviewerSex.class)));
    tmpMap.put(_Fields.CURRENT_OPENED_BOTTLE_INFO, new org.apache.thrift.meta_data.FieldMetaData("currentOpenedBottleInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BottleInfo.class)));
    tmpMap.put(_Fields.OPENED_BOTTLE_HISTORY, new org.apache.thrift.meta_data.FieldMetaData("openedBottleHistory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BottleInfo.class))));
    tmpMap.put(_Fields.PHOTO_URL, new org.apache.thrift.meta_data.FieldMetaData("photoUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OpenedBottlesResponse.class, metaDataMap);
  }

  public OpenedBottlesResponse() {
  }

  public OpenedBottlesResponse(
    int openedNumber,
    int ratedNumber,
    int scannedNumber,
    int wishListSize,
    int totalWinesNumber,
    ReviewerSex sex,
    BottleInfo currentOpenedBottleInfo,
    List<BottleInfo> openedBottleHistory,
    String photoUrl)
  {
    this();
    this.openedNumber = openedNumber;
    setOpenedNumberIsSet(true);
    this.ratedNumber = ratedNumber;
    setRatedNumberIsSet(true);
    this.scannedNumber = scannedNumber;
    setScannedNumberIsSet(true);
    this.wishListSize = wishListSize;
    setWishListSizeIsSet(true);
    this.totalWinesNumber = totalWinesNumber;
    setTotalWinesNumberIsSet(true);
    this.sex = sex;
    this.currentOpenedBottleInfo = currentOpenedBottleInfo;
    this.openedBottleHistory = openedBottleHistory;
    this.photoUrl = photoUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OpenedBottlesResponse(OpenedBottlesResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.openedNumber = other.openedNumber;
    this.ratedNumber = other.ratedNumber;
    this.scannedNumber = other.scannedNumber;
    this.wishListSize = other.wishListSize;
    this.totalWinesNumber = other.totalWinesNumber;
    if (other.isSetSex()) {
      this.sex = other.sex;
    }
    if (other.isSetCurrentOpenedBottleInfo()) {
      this.currentOpenedBottleInfo = new BottleInfo(other.currentOpenedBottleInfo);
    }
    if (other.isSetOpenedBottleHistory()) {
      List<BottleInfo> __this__openedBottleHistory = new ArrayList<BottleInfo>(other.openedBottleHistory.size());
      for (BottleInfo other_element : other.openedBottleHistory) {
        __this__openedBottleHistory.add(new BottleInfo(other_element));
      }
      this.openedBottleHistory = __this__openedBottleHistory;
    }
    if (other.isSetPhotoUrl()) {
      this.photoUrl = other.photoUrl;
    }
  }

  public OpenedBottlesResponse deepCopy() {
    return new OpenedBottlesResponse(this);
  }

  @Override
  public void clear() {
    setOpenedNumberIsSet(false);
    this.openedNumber = 0;
    setRatedNumberIsSet(false);
    this.ratedNumber = 0;
    setScannedNumberIsSet(false);
    this.scannedNumber = 0;
    setWishListSizeIsSet(false);
    this.wishListSize = 0;
    setTotalWinesNumberIsSet(false);
    this.totalWinesNumber = 0;
    this.sex = null;
    this.currentOpenedBottleInfo = null;
    this.openedBottleHistory = null;
    this.photoUrl = null;
  }

  public int getOpenedNumber() {
    return this.openedNumber;
  }

  public OpenedBottlesResponse setOpenedNumber(int openedNumber) {
    this.openedNumber = openedNumber;
    setOpenedNumberIsSet(true);
    return this;
  }

  public void unsetOpenedNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OPENEDNUMBER_ISSET_ID);
  }

  /** Returns true if field openedNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenedNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __OPENEDNUMBER_ISSET_ID);
  }

  public void setOpenedNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OPENEDNUMBER_ISSET_ID, value);
  }

  public int getRatedNumber() {
    return this.ratedNumber;
  }

  public OpenedBottlesResponse setRatedNumber(int ratedNumber) {
    this.ratedNumber = ratedNumber;
    setRatedNumberIsSet(true);
    return this;
  }

  public void unsetRatedNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RATEDNUMBER_ISSET_ID);
  }

  /** Returns true if field ratedNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetRatedNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __RATEDNUMBER_ISSET_ID);
  }

  public void setRatedNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RATEDNUMBER_ISSET_ID, value);
  }

  public int getScannedNumber() {
    return this.scannedNumber;
  }

  public OpenedBottlesResponse setScannedNumber(int scannedNumber) {
    this.scannedNumber = scannedNumber;
    setScannedNumberIsSet(true);
    return this;
  }

  public void unsetScannedNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SCANNEDNUMBER_ISSET_ID);
  }

  /** Returns true if field scannedNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetScannedNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __SCANNEDNUMBER_ISSET_ID);
  }

  public void setScannedNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SCANNEDNUMBER_ISSET_ID, value);
  }

  public int getWishListSize() {
    return this.wishListSize;
  }

  public OpenedBottlesResponse setWishListSize(int wishListSize) {
    this.wishListSize = wishListSize;
    setWishListSizeIsSet(true);
    return this;
  }

  public void unsetWishListSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WISHLISTSIZE_ISSET_ID);
  }

  /** Returns true if field wishListSize is set (has been assigned a value) and false otherwise */
  public boolean isSetWishListSize() {
    return EncodingUtils.testBit(__isset_bitfield, __WISHLISTSIZE_ISSET_ID);
  }

  public void setWishListSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WISHLISTSIZE_ISSET_ID, value);
  }

  public int getTotalWinesNumber() {
    return this.totalWinesNumber;
  }

  public OpenedBottlesResponse setTotalWinesNumber(int totalWinesNumber) {
    this.totalWinesNumber = totalWinesNumber;
    setTotalWinesNumberIsSet(true);
    return this;
  }

  public void unsetTotalWinesNumber() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TOTALWINESNUMBER_ISSET_ID);
  }

  /** Returns true if field totalWinesNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetTotalWinesNumber() {
    return EncodingUtils.testBit(__isset_bitfield, __TOTALWINESNUMBER_ISSET_ID);
  }

  public void setTotalWinesNumberIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TOTALWINESNUMBER_ISSET_ID, value);
  }

  /**
   * 
   * @see ReviewerSex
   */
  public ReviewerSex getSex() {
    return this.sex;
  }

  /**
   * 
   * @see ReviewerSex
   */
  public OpenedBottlesResponse setSex(ReviewerSex sex) {
    this.sex = sex;
    return this;
  }

  public void unsetSex() {
    this.sex = null;
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return this.sex != null;
  }

  public void setSexIsSet(boolean value) {
    if (!value) {
      this.sex = null;
    }
  }

  public BottleInfo getCurrentOpenedBottleInfo() {
    return this.currentOpenedBottleInfo;
  }

  public OpenedBottlesResponse setCurrentOpenedBottleInfo(BottleInfo currentOpenedBottleInfo) {
    this.currentOpenedBottleInfo = currentOpenedBottleInfo;
    return this;
  }

  public void unsetCurrentOpenedBottleInfo() {
    this.currentOpenedBottleInfo = null;
  }

  /** Returns true if field currentOpenedBottleInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetCurrentOpenedBottleInfo() {
    return this.currentOpenedBottleInfo != null;
  }

  public void setCurrentOpenedBottleInfoIsSet(boolean value) {
    if (!value) {
      this.currentOpenedBottleInfo = null;
    }
  }

  public int getOpenedBottleHistorySize() {
    return (this.openedBottleHistory == null) ? 0 : this.openedBottleHistory.size();
  }

  public java.util.Iterator<BottleInfo> getOpenedBottleHistoryIterator() {
    return (this.openedBottleHistory == null) ? null : this.openedBottleHistory.iterator();
  }

  public void addToOpenedBottleHistory(BottleInfo elem) {
    if (this.openedBottleHistory == null) {
      this.openedBottleHistory = new ArrayList<BottleInfo>();
    }
    this.openedBottleHistory.add(elem);
  }

  public List<BottleInfo> getOpenedBottleHistory() {
    return this.openedBottleHistory;
  }

  public OpenedBottlesResponse setOpenedBottleHistory(List<BottleInfo> openedBottleHistory) {
    this.openedBottleHistory = openedBottleHistory;
    return this;
  }

  public void unsetOpenedBottleHistory() {
    this.openedBottleHistory = null;
  }

  /** Returns true if field openedBottleHistory is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenedBottleHistory() {
    return this.openedBottleHistory != null;
  }

  public void setOpenedBottleHistoryIsSet(boolean value) {
    if (!value) {
      this.openedBottleHistory = null;
    }
  }

  public String getPhotoUrl() {
    return this.photoUrl;
  }

  public OpenedBottlesResponse setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  public void unsetPhotoUrl() {
    this.photoUrl = null;
  }

  /** Returns true if field photoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPhotoUrl() {
    return this.photoUrl != null;
  }

  public void setPhotoUrlIsSet(boolean value) {
    if (!value) {
      this.photoUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPENED_NUMBER:
      if (value == null) {
        unsetOpenedNumber();
      } else {
        setOpenedNumber((Integer)value);
      }
      break;

    case RATED_NUMBER:
      if (value == null) {
        unsetRatedNumber();
      } else {
        setRatedNumber((Integer)value);
      }
      break;

    case SCANNED_NUMBER:
      if (value == null) {
        unsetScannedNumber();
      } else {
        setScannedNumber((Integer)value);
      }
      break;

    case WISH_LIST_SIZE:
      if (value == null) {
        unsetWishListSize();
      } else {
        setWishListSize((Integer)value);
      }
      break;

    case TOTAL_WINES_NUMBER:
      if (value == null) {
        unsetTotalWinesNumber();
      } else {
        setTotalWinesNumber((Integer)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((ReviewerSex)value);
      }
      break;

    case CURRENT_OPENED_BOTTLE_INFO:
      if (value == null) {
        unsetCurrentOpenedBottleInfo();
      } else {
        setCurrentOpenedBottleInfo((BottleInfo)value);
      }
      break;

    case OPENED_BOTTLE_HISTORY:
      if (value == null) {
        unsetOpenedBottleHistory();
      } else {
        setOpenedBottleHistory((List<BottleInfo>)value);
      }
      break;

    case PHOTO_URL:
      if (value == null) {
        unsetPhotoUrl();
      } else {
        setPhotoUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPENED_NUMBER:
      return getOpenedNumber();

    case RATED_NUMBER:
      return getRatedNumber();

    case SCANNED_NUMBER:
      return getScannedNumber();

    case WISH_LIST_SIZE:
      return getWishListSize();

    case TOTAL_WINES_NUMBER:
      return getTotalWinesNumber();

    case SEX:
      return getSex();

    case CURRENT_OPENED_BOTTLE_INFO:
      return getCurrentOpenedBottleInfo();

    case OPENED_BOTTLE_HISTORY:
      return getOpenedBottleHistory();

    case PHOTO_URL:
      return getPhotoUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPENED_NUMBER:
      return isSetOpenedNumber();
    case RATED_NUMBER:
      return isSetRatedNumber();
    case SCANNED_NUMBER:
      return isSetScannedNumber();
    case WISH_LIST_SIZE:
      return isSetWishListSize();
    case TOTAL_WINES_NUMBER:
      return isSetTotalWinesNumber();
    case SEX:
      return isSetSex();
    case CURRENT_OPENED_BOTTLE_INFO:
      return isSetCurrentOpenedBottleInfo();
    case OPENED_BOTTLE_HISTORY:
      return isSetOpenedBottleHistory();
    case PHOTO_URL:
      return isSetPhotoUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OpenedBottlesResponse)
      return this.equals((OpenedBottlesResponse)that);
    return false;
  }

  public boolean equals(OpenedBottlesResponse that) {
    if (that == null)
      return false;

    boolean this_present_openedNumber = true;
    boolean that_present_openedNumber = true;
    if (this_present_openedNumber || that_present_openedNumber) {
      if (!(this_present_openedNumber && that_present_openedNumber))
        return false;
      if (this.openedNumber != that.openedNumber)
        return false;
    }

    boolean this_present_ratedNumber = true;
    boolean that_present_ratedNumber = true;
    if (this_present_ratedNumber || that_present_ratedNumber) {
      if (!(this_present_ratedNumber && that_present_ratedNumber))
        return false;
      if (this.ratedNumber != that.ratedNumber)
        return false;
    }

    boolean this_present_scannedNumber = true;
    boolean that_present_scannedNumber = true;
    if (this_present_scannedNumber || that_present_scannedNumber) {
      if (!(this_present_scannedNumber && that_present_scannedNumber))
        return false;
      if (this.scannedNumber != that.scannedNumber)
        return false;
    }

    boolean this_present_wishListSize = true;
    boolean that_present_wishListSize = true;
    if (this_present_wishListSize || that_present_wishListSize) {
      if (!(this_present_wishListSize && that_present_wishListSize))
        return false;
      if (this.wishListSize != that.wishListSize)
        return false;
    }

    boolean this_present_totalWinesNumber = true;
    boolean that_present_totalWinesNumber = true;
    if (this_present_totalWinesNumber || that_present_totalWinesNumber) {
      if (!(this_present_totalWinesNumber && that_present_totalWinesNumber))
        return false;
      if (this.totalWinesNumber != that.totalWinesNumber)
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (!this.sex.equals(that.sex))
        return false;
    }

    boolean this_present_currentOpenedBottleInfo = true && this.isSetCurrentOpenedBottleInfo();
    boolean that_present_currentOpenedBottleInfo = true && that.isSetCurrentOpenedBottleInfo();
    if (this_present_currentOpenedBottleInfo || that_present_currentOpenedBottleInfo) {
      if (!(this_present_currentOpenedBottleInfo && that_present_currentOpenedBottleInfo))
        return false;
      if (!this.currentOpenedBottleInfo.equals(that.currentOpenedBottleInfo))
        return false;
    }

    boolean this_present_openedBottleHistory = true && this.isSetOpenedBottleHistory();
    boolean that_present_openedBottleHistory = true && that.isSetOpenedBottleHistory();
    if (this_present_openedBottleHistory || that_present_openedBottleHistory) {
      if (!(this_present_openedBottleHistory && that_present_openedBottleHistory))
        return false;
      if (!this.openedBottleHistory.equals(that.openedBottleHistory))
        return false;
    }

    boolean this_present_photoUrl = true && this.isSetPhotoUrl();
    boolean that_present_photoUrl = true && that.isSetPhotoUrl();
    if (this_present_photoUrl || that_present_photoUrl) {
      if (!(this_present_photoUrl && that_present_photoUrl))
        return false;
      if (!this.photoUrl.equals(that.photoUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_openedNumber = true;
    list.add(present_openedNumber);
    if (present_openedNumber)
      list.add(openedNumber);

    boolean present_ratedNumber = true;
    list.add(present_ratedNumber);
    if (present_ratedNumber)
      list.add(ratedNumber);

    boolean present_scannedNumber = true;
    list.add(present_scannedNumber);
    if (present_scannedNumber)
      list.add(scannedNumber);

    boolean present_wishListSize = true;
    list.add(present_wishListSize);
    if (present_wishListSize)
      list.add(wishListSize);

    boolean present_totalWinesNumber = true;
    list.add(present_totalWinesNumber);
    if (present_totalWinesNumber)
      list.add(totalWinesNumber);

    boolean present_sex = true && (isSetSex());
    list.add(present_sex);
    if (present_sex)
      list.add(sex.getValue());

    boolean present_currentOpenedBottleInfo = true && (isSetCurrentOpenedBottleInfo());
    list.add(present_currentOpenedBottleInfo);
    if (present_currentOpenedBottleInfo)
      list.add(currentOpenedBottleInfo);

    boolean present_openedBottleHistory = true && (isSetOpenedBottleHistory());
    list.add(present_openedBottleHistory);
    if (present_openedBottleHistory)
      list.add(openedBottleHistory);

    boolean present_photoUrl = true && (isSetPhotoUrl());
    list.add(present_photoUrl);
    if (present_photoUrl)
      list.add(photoUrl);

    return list.hashCode();
  }

  @Override
  public int compareTo(OpenedBottlesResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOpenedNumber()).compareTo(other.isSetOpenedNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenedNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openedNumber, other.openedNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRatedNumber()).compareTo(other.isSetRatedNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRatedNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ratedNumber, other.ratedNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScannedNumber()).compareTo(other.isSetScannedNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScannedNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scannedNumber, other.scannedNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWishListSize()).compareTo(other.isSetWishListSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWishListSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wishListSize, other.wishListSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTotalWinesNumber()).compareTo(other.isSetTotalWinesNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTotalWinesNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.totalWinesNumber, other.totalWinesNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCurrentOpenedBottleInfo()).compareTo(other.isSetCurrentOpenedBottleInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCurrentOpenedBottleInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.currentOpenedBottleInfo, other.currentOpenedBottleInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenedBottleHistory()).compareTo(other.isSetOpenedBottleHistory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenedBottleHistory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openedBottleHistory, other.openedBottleHistory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhotoUrl()).compareTo(other.isSetPhotoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhotoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.photoUrl, other.photoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OpenedBottlesResponse(");
    boolean first = true;

    sb.append("openedNumber:");
    sb.append(this.openedNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ratedNumber:");
    sb.append(this.ratedNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("scannedNumber:");
    sb.append(this.scannedNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wishListSize:");
    sb.append(this.wishListSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("totalWinesNumber:");
    sb.append(this.totalWinesNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    if (this.sex == null) {
      sb.append("null");
    } else {
      sb.append(this.sex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("currentOpenedBottleInfo:");
    if (this.currentOpenedBottleInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.currentOpenedBottleInfo);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openedBottleHistory:");
    if (this.openedBottleHistory == null) {
      sb.append("null");
    } else {
      sb.append(this.openedBottleHistory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("photoUrl:");
    if (this.photoUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.photoUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (currentOpenedBottleInfo != null) {
      currentOpenedBottleInfo.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OpenedBottlesResponseStandardSchemeFactory implements SchemeFactory {
    public OpenedBottlesResponseStandardScheme getScheme() {
      return new OpenedBottlesResponseStandardScheme();
    }
  }

  private static class OpenedBottlesResponseStandardScheme extends StandardScheme<OpenedBottlesResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OpenedBottlesResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPENED_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.openedNumber = iprot.readI32();
              struct.setOpenedNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RATED_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ratedNumber = iprot.readI32();
              struct.setRatedNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCANNED_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scannedNumber = iprot.readI32();
              struct.setScannedNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WISH_LIST_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wishListSize = iprot.readI32();
              struct.setWishListSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TOTAL_WINES_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.totalWinesNumber = iprot.readI32();
              struct.setTotalWinesNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = co.tagtalk.winemate.thriftfiles.ReviewerSex.findByValue(iprot.readI32());
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CURRENT_OPENED_BOTTLE_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.currentOpenedBottleInfo = new BottleInfo();
              struct.currentOpenedBottleInfo.read(iprot);
              struct.setCurrentOpenedBottleInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPENED_BOTTLE_HISTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.openedBottleHistory = new ArrayList<BottleInfo>(_list16.size);
                BottleInfo _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new BottleInfo();
                  _elem17.read(iprot);
                  struct.openedBottleHistory.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setOpenedBottleHistoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PHOTO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.photoUrl = iprot.readString();
              struct.setPhotoUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OpenedBottlesResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OPENED_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.openedNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(RATED_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.ratedNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SCANNED_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.scannedNumber);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(WISH_LIST_SIZE_FIELD_DESC);
      oprot.writeI32(struct.wishListSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(TOTAL_WINES_NUMBER_FIELD_DESC);
      oprot.writeI32(struct.totalWinesNumber);
      oprot.writeFieldEnd();
      if (struct.sex != null) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeI32(struct.sex.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.currentOpenedBottleInfo != null) {
        oprot.writeFieldBegin(CURRENT_OPENED_BOTTLE_INFO_FIELD_DESC);
        struct.currentOpenedBottleInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.openedBottleHistory != null) {
        oprot.writeFieldBegin(OPENED_BOTTLE_HISTORY_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.openedBottleHistory.size()));
          for (BottleInfo _iter19 : struct.openedBottleHistory)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.photoUrl != null) {
        oprot.writeFieldBegin(PHOTO_URL_FIELD_DESC);
        oprot.writeString(struct.photoUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OpenedBottlesResponseTupleSchemeFactory implements SchemeFactory {
    public OpenedBottlesResponseTupleScheme getScheme() {
      return new OpenedBottlesResponseTupleScheme();
    }
  }

  private static class OpenedBottlesResponseTupleScheme extends TupleScheme<OpenedBottlesResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OpenedBottlesResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOpenedNumber()) {
        optionals.set(0);
      }
      if (struct.isSetRatedNumber()) {
        optionals.set(1);
      }
      if (struct.isSetScannedNumber()) {
        optionals.set(2);
      }
      if (struct.isSetWishListSize()) {
        optionals.set(3);
      }
      if (struct.isSetTotalWinesNumber()) {
        optionals.set(4);
      }
      if (struct.isSetSex()) {
        optionals.set(5);
      }
      if (struct.isSetCurrentOpenedBottleInfo()) {
        optionals.set(6);
      }
      if (struct.isSetOpenedBottleHistory()) {
        optionals.set(7);
      }
      if (struct.isSetPhotoUrl()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetOpenedNumber()) {
        oprot.writeI32(struct.openedNumber);
      }
      if (struct.isSetRatedNumber()) {
        oprot.writeI32(struct.ratedNumber);
      }
      if (struct.isSetScannedNumber()) {
        oprot.writeI32(struct.scannedNumber);
      }
      if (struct.isSetWishListSize()) {
        oprot.writeI32(struct.wishListSize);
      }
      if (struct.isSetTotalWinesNumber()) {
        oprot.writeI32(struct.totalWinesNumber);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex.getValue());
      }
      if (struct.isSetCurrentOpenedBottleInfo()) {
        struct.currentOpenedBottleInfo.write(oprot);
      }
      if (struct.isSetOpenedBottleHistory()) {
        {
          oprot.writeI32(struct.openedBottleHistory.size());
          for (BottleInfo _iter20 : struct.openedBottleHistory)
          {
            _iter20.write(oprot);
          }
        }
      }
      if (struct.isSetPhotoUrl()) {
        oprot.writeString(struct.photoUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OpenedBottlesResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.openedNumber = iprot.readI32();
        struct.setOpenedNumberIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ratedNumber = iprot.readI32();
        struct.setRatedNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.scannedNumber = iprot.readI32();
        struct.setScannedNumberIsSet(true);
      }
      if (incoming.get(3)) {
        struct.wishListSize = iprot.readI32();
        struct.setWishListSizeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.totalWinesNumber = iprot.readI32();
        struct.setTotalWinesNumberIsSet(true);
      }
      if (incoming.get(5)) {
        struct.sex = co.tagtalk.winemate.thriftfiles.ReviewerSex.findByValue(iprot.readI32());
        struct.setSexIsSet(true);
      }
      if (incoming.get(6)) {
        struct.currentOpenedBottleInfo = new BottleInfo();
        struct.currentOpenedBottleInfo.read(iprot);
        struct.setCurrentOpenedBottleInfoIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.openedBottleHistory = new ArrayList<BottleInfo>(_list21.size);
          BottleInfo _elem22;
          for (int _i23 = 0; _i23 < _list21.size; ++_i23)
          {
            _elem22 = new BottleInfo();
            _elem22.read(iprot);
            struct.openedBottleHistory.add(_elem22);
          }
        }
        struct.setOpenedBottleHistoryIsSet(true);
      }
      if (incoming.get(8)) {
        struct.photoUrl = iprot.readString();
        struct.setPhotoUrlIsSet(true);
      }
    }
  }

}

