/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package co.tagtalk.winemate.thriftfiles;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-24")
public class WineInfo implements org.apache.thrift.TBase<WineInfo, WineInfo._Fields>, java.io.Serializable, Cloneable, Comparable<WineInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WineInfo");

  private static final org.apache.thrift.protocol.TField IS_GENUINE_FIELD_DESC = new org.apache.thrift.protocol.TField("isGenuine", org.apache.thrift.protocol.TType.BOOL, (short)1);
  private static final org.apache.thrift.protocol.TField IS_SEALED_FIELD_DESC = new org.apache.thrift.protocol.TField("isSealed", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField WINE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("wineName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField WINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wineId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField WINE_PIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("winePicURL", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField WINE_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("wineRate", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField OPENED_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("openedTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField WINERY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("wineryName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REGION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("regionName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField OPENED_CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("openedCity", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField OPENED_COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField("openedCountry", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField WECHAT_SHARE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatShareUrl", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField REWARD_POINT_FIELD_DESC = new org.apache.thrift.protocol.TField("rewardPoint", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField WINERY_LOGO_PIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("wineryLogoPicUrl", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField WINERY_NATIONAL_FLAG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("wineryNationalFlagUrl", org.apache.thrift.protocol.TType.STRING, (short)16);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WineInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WineInfoTupleSchemeFactory());
  }

  public boolean isGenuine; // required
  public boolean isSealed; // required
  public String wineName; // required
  public int wineId; // required
  public String winePicURL; // required
  public double wineRate; // required
  public String openedTime; // required
  public String wineryName; // required
  public String regionName; // required
  public String year; // required
  public String openedCity; // required
  public String openedCountry; // required
  public String wechatShareUrl; // required
  public int rewardPoint; // required
  public String wineryLogoPicUrl; // required
  public String wineryNationalFlagUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IS_GENUINE((short)1, "isGenuine"),
    IS_SEALED((short)2, "isSealed"),
    WINE_NAME((short)3, "wineName"),
    WINE_ID((short)4, "wineId"),
    WINE_PIC_URL((short)5, "winePicURL"),
    WINE_RATE((short)6, "wineRate"),
    OPENED_TIME((short)7, "openedTime"),
    WINERY_NAME((short)8, "wineryName"),
    REGION_NAME((short)9, "regionName"),
    YEAR((short)10, "year"),
    OPENED_CITY((short)11, "openedCity"),
    OPENED_COUNTRY((short)12, "openedCountry"),
    WECHAT_SHARE_URL((short)13, "wechatShareUrl"),
    REWARD_POINT((short)14, "rewardPoint"),
    WINERY_LOGO_PIC_URL((short)15, "wineryLogoPicUrl"),
    WINERY_NATIONAL_FLAG_URL((short)16, "wineryNationalFlagUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IS_GENUINE
          return IS_GENUINE;
        case 2: // IS_SEALED
          return IS_SEALED;
        case 3: // WINE_NAME
          return WINE_NAME;
        case 4: // WINE_ID
          return WINE_ID;
        case 5: // WINE_PIC_URL
          return WINE_PIC_URL;
        case 6: // WINE_RATE
          return WINE_RATE;
        case 7: // OPENED_TIME
          return OPENED_TIME;
        case 8: // WINERY_NAME
          return WINERY_NAME;
        case 9: // REGION_NAME
          return REGION_NAME;
        case 10: // YEAR
          return YEAR;
        case 11: // OPENED_CITY
          return OPENED_CITY;
        case 12: // OPENED_COUNTRY
          return OPENED_COUNTRY;
        case 13: // WECHAT_SHARE_URL
          return WECHAT_SHARE_URL;
        case 14: // REWARD_POINT
          return REWARD_POINT;
        case 15: // WINERY_LOGO_PIC_URL
          return WINERY_LOGO_PIC_URL;
        case 16: // WINERY_NATIONAL_FLAG_URL
          return WINERY_NATIONAL_FLAG_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISGENUINE_ISSET_ID = 0;
  private static final int __ISSEALED_ISSET_ID = 1;
  private static final int __WINEID_ISSET_ID = 2;
  private static final int __WINERATE_ISSET_ID = 3;
  private static final int __REWARDPOINT_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IS_GENUINE, new org.apache.thrift.meta_data.FieldMetaData("isGenuine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_SEALED, new org.apache.thrift.meta_data.FieldMetaData("isSealed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.WINE_NAME, new org.apache.thrift.meta_data.FieldMetaData("wineName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WINE_ID, new org.apache.thrift.meta_data.FieldMetaData("wineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WINE_PIC_URL, new org.apache.thrift.meta_data.FieldMetaData("winePicURL", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WINE_RATE, new org.apache.thrift.meta_data.FieldMetaData("wineRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.OPENED_TIME, new org.apache.thrift.meta_data.FieldMetaData("openedTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WINERY_NAME, new org.apache.thrift.meta_data.FieldMetaData("wineryName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION_NAME, new org.apache.thrift.meta_data.FieldMetaData("regionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPENED_CITY, new org.apache.thrift.meta_data.FieldMetaData("openedCity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPENED_COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("openedCountry", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WECHAT_SHARE_URL, new org.apache.thrift.meta_data.FieldMetaData("wechatShareUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REWARD_POINT, new org.apache.thrift.meta_data.FieldMetaData("rewardPoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WINERY_LOGO_PIC_URL, new org.apache.thrift.meta_data.FieldMetaData("wineryLogoPicUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WINERY_NATIONAL_FLAG_URL, new org.apache.thrift.meta_data.FieldMetaData("wineryNationalFlagUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WineInfo.class, metaDataMap);
  }

  public WineInfo() {
  }

  public WineInfo(
    boolean isGenuine,
    boolean isSealed,
    String wineName,
    int wineId,
    String winePicURL,
    double wineRate,
    String openedTime,
    String wineryName,
    String regionName,
    String year,
    String openedCity,
    String openedCountry,
    String wechatShareUrl,
    int rewardPoint,
    String wineryLogoPicUrl,
    String wineryNationalFlagUrl)
  {
    this();
    this.isGenuine = isGenuine;
    setIsGenuineIsSet(true);
    this.isSealed = isSealed;
    setIsSealedIsSet(true);
    this.wineName = wineName;
    this.wineId = wineId;
    setWineIdIsSet(true);
    this.winePicURL = winePicURL;
    this.wineRate = wineRate;
    setWineRateIsSet(true);
    this.openedTime = openedTime;
    this.wineryName = wineryName;
    this.regionName = regionName;
    this.year = year;
    this.openedCity = openedCity;
    this.openedCountry = openedCountry;
    this.wechatShareUrl = wechatShareUrl;
    this.rewardPoint = rewardPoint;
    setRewardPointIsSet(true);
    this.wineryLogoPicUrl = wineryLogoPicUrl;
    this.wineryNationalFlagUrl = wineryNationalFlagUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WineInfo(WineInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.isGenuine = other.isGenuine;
    this.isSealed = other.isSealed;
    if (other.isSetWineName()) {
      this.wineName = other.wineName;
    }
    this.wineId = other.wineId;
    if (other.isSetWinePicURL()) {
      this.winePicURL = other.winePicURL;
    }
    this.wineRate = other.wineRate;
    if (other.isSetOpenedTime()) {
      this.openedTime = other.openedTime;
    }
    if (other.isSetWineryName()) {
      this.wineryName = other.wineryName;
    }
    if (other.isSetRegionName()) {
      this.regionName = other.regionName;
    }
    if (other.isSetYear()) {
      this.year = other.year;
    }
    if (other.isSetOpenedCity()) {
      this.openedCity = other.openedCity;
    }
    if (other.isSetOpenedCountry()) {
      this.openedCountry = other.openedCountry;
    }
    if (other.isSetWechatShareUrl()) {
      this.wechatShareUrl = other.wechatShareUrl;
    }
    this.rewardPoint = other.rewardPoint;
    if (other.isSetWineryLogoPicUrl()) {
      this.wineryLogoPicUrl = other.wineryLogoPicUrl;
    }
    if (other.isSetWineryNationalFlagUrl()) {
      this.wineryNationalFlagUrl = other.wineryNationalFlagUrl;
    }
  }

  public WineInfo deepCopy() {
    return new WineInfo(this);
  }

  @Override
  public void clear() {
    setIsGenuineIsSet(false);
    this.isGenuine = false;
    setIsSealedIsSet(false);
    this.isSealed = false;
    this.wineName = null;
    setWineIdIsSet(false);
    this.wineId = 0;
    this.winePicURL = null;
    setWineRateIsSet(false);
    this.wineRate = 0.0;
    this.openedTime = null;
    this.wineryName = null;
    this.regionName = null;
    this.year = null;
    this.openedCity = null;
    this.openedCountry = null;
    this.wechatShareUrl = null;
    setRewardPointIsSet(false);
    this.rewardPoint = 0;
    this.wineryLogoPicUrl = null;
    this.wineryNationalFlagUrl = null;
  }

  public boolean isIsGenuine() {
    return this.isGenuine;
  }

  public WineInfo setIsGenuine(boolean isGenuine) {
    this.isGenuine = isGenuine;
    setIsGenuineIsSet(true);
    return this;
  }

  public void unsetIsGenuine() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISGENUINE_ISSET_ID);
  }

  /** Returns true if field isGenuine is set (has been assigned a value) and false otherwise */
  public boolean isSetIsGenuine() {
    return EncodingUtils.testBit(__isset_bitfield, __ISGENUINE_ISSET_ID);
  }

  public void setIsGenuineIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISGENUINE_ISSET_ID, value);
  }

  public boolean isIsSealed() {
    return this.isSealed;
  }

  public WineInfo setIsSealed(boolean isSealed) {
    this.isSealed = isSealed;
    setIsSealedIsSet(true);
    return this;
  }

  public void unsetIsSealed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISSEALED_ISSET_ID);
  }

  /** Returns true if field isSealed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsSealed() {
    return EncodingUtils.testBit(__isset_bitfield, __ISSEALED_ISSET_ID);
  }

  public void setIsSealedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISSEALED_ISSET_ID, value);
  }

  public String getWineName() {
    return this.wineName;
  }

  public WineInfo setWineName(String wineName) {
    this.wineName = wineName;
    return this;
  }

  public void unsetWineName() {
    this.wineName = null;
  }

  /** Returns true if field wineName is set (has been assigned a value) and false otherwise */
  public boolean isSetWineName() {
    return this.wineName != null;
  }

  public void setWineNameIsSet(boolean value) {
    if (!value) {
      this.wineName = null;
    }
  }

  public int getWineId() {
    return this.wineId;
  }

  public WineInfo setWineId(int wineId) {
    this.wineId = wineId;
    setWineIdIsSet(true);
    return this;
  }

  public void unsetWineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINEID_ISSET_ID);
  }

  /** Returns true if field wineId is set (has been assigned a value) and false otherwise */
  public boolean isSetWineId() {
    return EncodingUtils.testBit(__isset_bitfield, __WINEID_ISSET_ID);
  }

  public void setWineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINEID_ISSET_ID, value);
  }

  public String getWinePicURL() {
    return this.winePicURL;
  }

  public WineInfo setWinePicURL(String winePicURL) {
    this.winePicURL = winePicURL;
    return this;
  }

  public void unsetWinePicURL() {
    this.winePicURL = null;
  }

  /** Returns true if field winePicURL is set (has been assigned a value) and false otherwise */
  public boolean isSetWinePicURL() {
    return this.winePicURL != null;
  }

  public void setWinePicURLIsSet(boolean value) {
    if (!value) {
      this.winePicURL = null;
    }
  }

  public double getWineRate() {
    return this.wineRate;
  }

  public WineInfo setWineRate(double wineRate) {
    this.wineRate = wineRate;
    setWineRateIsSet(true);
    return this;
  }

  public void unsetWineRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINERATE_ISSET_ID);
  }

  /** Returns true if field wineRate is set (has been assigned a value) and false otherwise */
  public boolean isSetWineRate() {
    return EncodingUtils.testBit(__isset_bitfield, __WINERATE_ISSET_ID);
  }

  public void setWineRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINERATE_ISSET_ID, value);
  }

  public String getOpenedTime() {
    return this.openedTime;
  }

  public WineInfo setOpenedTime(String openedTime) {
    this.openedTime = openedTime;
    return this;
  }

  public void unsetOpenedTime() {
    this.openedTime = null;
  }

  /** Returns true if field openedTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenedTime() {
    return this.openedTime != null;
  }

  public void setOpenedTimeIsSet(boolean value) {
    if (!value) {
      this.openedTime = null;
    }
  }

  public String getWineryName() {
    return this.wineryName;
  }

  public WineInfo setWineryName(String wineryName) {
    this.wineryName = wineryName;
    return this;
  }

  public void unsetWineryName() {
    this.wineryName = null;
  }

  /** Returns true if field wineryName is set (has been assigned a value) and false otherwise */
  public boolean isSetWineryName() {
    return this.wineryName != null;
  }

  public void setWineryNameIsSet(boolean value) {
    if (!value) {
      this.wineryName = null;
    }
  }

  public String getRegionName() {
    return this.regionName;
  }

  public WineInfo setRegionName(String regionName) {
    this.regionName = regionName;
    return this;
  }

  public void unsetRegionName() {
    this.regionName = null;
  }

  /** Returns true if field regionName is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionName() {
    return this.regionName != null;
  }

  public void setRegionNameIsSet(boolean value) {
    if (!value) {
      this.regionName = null;
    }
  }

  public String getYear() {
    return this.year;
  }

  public WineInfo setYear(String year) {
    this.year = year;
    return this;
  }

  public void unsetYear() {
    this.year = null;
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean isSetYear() {
    return this.year != null;
  }

  public void setYearIsSet(boolean value) {
    if (!value) {
      this.year = null;
    }
  }

  public String getOpenedCity() {
    return this.openedCity;
  }

  public WineInfo setOpenedCity(String openedCity) {
    this.openedCity = openedCity;
    return this;
  }

  public void unsetOpenedCity() {
    this.openedCity = null;
  }

  /** Returns true if field openedCity is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenedCity() {
    return this.openedCity != null;
  }

  public void setOpenedCityIsSet(boolean value) {
    if (!value) {
      this.openedCity = null;
    }
  }

  public String getOpenedCountry() {
    return this.openedCountry;
  }

  public WineInfo setOpenedCountry(String openedCountry) {
    this.openedCountry = openedCountry;
    return this;
  }

  public void unsetOpenedCountry() {
    this.openedCountry = null;
  }

  /** Returns true if field openedCountry is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenedCountry() {
    return this.openedCountry != null;
  }

  public void setOpenedCountryIsSet(boolean value) {
    if (!value) {
      this.openedCountry = null;
    }
  }

  public String getWechatShareUrl() {
    return this.wechatShareUrl;
  }

  public WineInfo setWechatShareUrl(String wechatShareUrl) {
    this.wechatShareUrl = wechatShareUrl;
    return this;
  }

  public void unsetWechatShareUrl() {
    this.wechatShareUrl = null;
  }

  /** Returns true if field wechatShareUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetWechatShareUrl() {
    return this.wechatShareUrl != null;
  }

  public void setWechatShareUrlIsSet(boolean value) {
    if (!value) {
      this.wechatShareUrl = null;
    }
  }

  public int getRewardPoint() {
    return this.rewardPoint;
  }

  public WineInfo setRewardPoint(int rewardPoint) {
    this.rewardPoint = rewardPoint;
    setRewardPointIsSet(true);
    return this;
  }

  public void unsetRewardPoint() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REWARDPOINT_ISSET_ID);
  }

  /** Returns true if field rewardPoint is set (has been assigned a value) and false otherwise */
  public boolean isSetRewardPoint() {
    return EncodingUtils.testBit(__isset_bitfield, __REWARDPOINT_ISSET_ID);
  }

  public void setRewardPointIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REWARDPOINT_ISSET_ID, value);
  }

  public String getWineryLogoPicUrl() {
    return this.wineryLogoPicUrl;
  }

  public WineInfo setWineryLogoPicUrl(String wineryLogoPicUrl) {
    this.wineryLogoPicUrl = wineryLogoPicUrl;
    return this;
  }

  public void unsetWineryLogoPicUrl() {
    this.wineryLogoPicUrl = null;
  }

  /** Returns true if field wineryLogoPicUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetWineryLogoPicUrl() {
    return this.wineryLogoPicUrl != null;
  }

  public void setWineryLogoPicUrlIsSet(boolean value) {
    if (!value) {
      this.wineryLogoPicUrl = null;
    }
  }

  public String getWineryNationalFlagUrl() {
    return this.wineryNationalFlagUrl;
  }

  public WineInfo setWineryNationalFlagUrl(String wineryNationalFlagUrl) {
    this.wineryNationalFlagUrl = wineryNationalFlagUrl;
    return this;
  }

  public void unsetWineryNationalFlagUrl() {
    this.wineryNationalFlagUrl = null;
  }

  /** Returns true if field wineryNationalFlagUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetWineryNationalFlagUrl() {
    return this.wineryNationalFlagUrl != null;
  }

  public void setWineryNationalFlagUrlIsSet(boolean value) {
    if (!value) {
      this.wineryNationalFlagUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IS_GENUINE:
      if (value == null) {
        unsetIsGenuine();
      } else {
        setIsGenuine((Boolean)value);
      }
      break;

    case IS_SEALED:
      if (value == null) {
        unsetIsSealed();
      } else {
        setIsSealed((Boolean)value);
      }
      break;

    case WINE_NAME:
      if (value == null) {
        unsetWineName();
      } else {
        setWineName((String)value);
      }
      break;

    case WINE_ID:
      if (value == null) {
        unsetWineId();
      } else {
        setWineId((Integer)value);
      }
      break;

    case WINE_PIC_URL:
      if (value == null) {
        unsetWinePicURL();
      } else {
        setWinePicURL((String)value);
      }
      break;

    case WINE_RATE:
      if (value == null) {
        unsetWineRate();
      } else {
        setWineRate((Double)value);
      }
      break;

    case OPENED_TIME:
      if (value == null) {
        unsetOpenedTime();
      } else {
        setOpenedTime((String)value);
      }
      break;

    case WINERY_NAME:
      if (value == null) {
        unsetWineryName();
      } else {
        setWineryName((String)value);
      }
      break;

    case REGION_NAME:
      if (value == null) {
        unsetRegionName();
      } else {
        setRegionName((String)value);
      }
      break;

    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((String)value);
      }
      break;

    case OPENED_CITY:
      if (value == null) {
        unsetOpenedCity();
      } else {
        setOpenedCity((String)value);
      }
      break;

    case OPENED_COUNTRY:
      if (value == null) {
        unsetOpenedCountry();
      } else {
        setOpenedCountry((String)value);
      }
      break;

    case WECHAT_SHARE_URL:
      if (value == null) {
        unsetWechatShareUrl();
      } else {
        setWechatShareUrl((String)value);
      }
      break;

    case REWARD_POINT:
      if (value == null) {
        unsetRewardPoint();
      } else {
        setRewardPoint((Integer)value);
      }
      break;

    case WINERY_LOGO_PIC_URL:
      if (value == null) {
        unsetWineryLogoPicUrl();
      } else {
        setWineryLogoPicUrl((String)value);
      }
      break;

    case WINERY_NATIONAL_FLAG_URL:
      if (value == null) {
        unsetWineryNationalFlagUrl();
      } else {
        setWineryNationalFlagUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IS_GENUINE:
      return isIsGenuine();

    case IS_SEALED:
      return isIsSealed();

    case WINE_NAME:
      return getWineName();

    case WINE_ID:
      return getWineId();

    case WINE_PIC_URL:
      return getWinePicURL();

    case WINE_RATE:
      return getWineRate();

    case OPENED_TIME:
      return getOpenedTime();

    case WINERY_NAME:
      return getWineryName();

    case REGION_NAME:
      return getRegionName();

    case YEAR:
      return getYear();

    case OPENED_CITY:
      return getOpenedCity();

    case OPENED_COUNTRY:
      return getOpenedCountry();

    case WECHAT_SHARE_URL:
      return getWechatShareUrl();

    case REWARD_POINT:
      return getRewardPoint();

    case WINERY_LOGO_PIC_URL:
      return getWineryLogoPicUrl();

    case WINERY_NATIONAL_FLAG_URL:
      return getWineryNationalFlagUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IS_GENUINE:
      return isSetIsGenuine();
    case IS_SEALED:
      return isSetIsSealed();
    case WINE_NAME:
      return isSetWineName();
    case WINE_ID:
      return isSetWineId();
    case WINE_PIC_URL:
      return isSetWinePicURL();
    case WINE_RATE:
      return isSetWineRate();
    case OPENED_TIME:
      return isSetOpenedTime();
    case WINERY_NAME:
      return isSetWineryName();
    case REGION_NAME:
      return isSetRegionName();
    case YEAR:
      return isSetYear();
    case OPENED_CITY:
      return isSetOpenedCity();
    case OPENED_COUNTRY:
      return isSetOpenedCountry();
    case WECHAT_SHARE_URL:
      return isSetWechatShareUrl();
    case REWARD_POINT:
      return isSetRewardPoint();
    case WINERY_LOGO_PIC_URL:
      return isSetWineryLogoPicUrl();
    case WINERY_NATIONAL_FLAG_URL:
      return isSetWineryNationalFlagUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WineInfo)
      return this.equals((WineInfo)that);
    return false;
  }

  public boolean equals(WineInfo that) {
    if (that == null)
      return false;

    boolean this_present_isGenuine = true;
    boolean that_present_isGenuine = true;
    if (this_present_isGenuine || that_present_isGenuine) {
      if (!(this_present_isGenuine && that_present_isGenuine))
        return false;
      if (this.isGenuine != that.isGenuine)
        return false;
    }

    boolean this_present_isSealed = true;
    boolean that_present_isSealed = true;
    if (this_present_isSealed || that_present_isSealed) {
      if (!(this_present_isSealed && that_present_isSealed))
        return false;
      if (this.isSealed != that.isSealed)
        return false;
    }

    boolean this_present_wineName = true && this.isSetWineName();
    boolean that_present_wineName = true && that.isSetWineName();
    if (this_present_wineName || that_present_wineName) {
      if (!(this_present_wineName && that_present_wineName))
        return false;
      if (!this.wineName.equals(that.wineName))
        return false;
    }

    boolean this_present_wineId = true;
    boolean that_present_wineId = true;
    if (this_present_wineId || that_present_wineId) {
      if (!(this_present_wineId && that_present_wineId))
        return false;
      if (this.wineId != that.wineId)
        return false;
    }

    boolean this_present_winePicURL = true && this.isSetWinePicURL();
    boolean that_present_winePicURL = true && that.isSetWinePicURL();
    if (this_present_winePicURL || that_present_winePicURL) {
      if (!(this_present_winePicURL && that_present_winePicURL))
        return false;
      if (!this.winePicURL.equals(that.winePicURL))
        return false;
    }

    boolean this_present_wineRate = true;
    boolean that_present_wineRate = true;
    if (this_present_wineRate || that_present_wineRate) {
      if (!(this_present_wineRate && that_present_wineRate))
        return false;
      if (this.wineRate != that.wineRate)
        return false;
    }

    boolean this_present_openedTime = true && this.isSetOpenedTime();
    boolean that_present_openedTime = true && that.isSetOpenedTime();
    if (this_present_openedTime || that_present_openedTime) {
      if (!(this_present_openedTime && that_present_openedTime))
        return false;
      if (!this.openedTime.equals(that.openedTime))
        return false;
    }

    boolean this_present_wineryName = true && this.isSetWineryName();
    boolean that_present_wineryName = true && that.isSetWineryName();
    if (this_present_wineryName || that_present_wineryName) {
      if (!(this_present_wineryName && that_present_wineryName))
        return false;
      if (!this.wineryName.equals(that.wineryName))
        return false;
    }

    boolean this_present_regionName = true && this.isSetRegionName();
    boolean that_present_regionName = true && that.isSetRegionName();
    if (this_present_regionName || that_present_regionName) {
      if (!(this_present_regionName && that_present_regionName))
        return false;
      if (!this.regionName.equals(that.regionName))
        return false;
    }

    boolean this_present_year = true && this.isSetYear();
    boolean that_present_year = true && that.isSetYear();
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (!this.year.equals(that.year))
        return false;
    }

    boolean this_present_openedCity = true && this.isSetOpenedCity();
    boolean that_present_openedCity = true && that.isSetOpenedCity();
    if (this_present_openedCity || that_present_openedCity) {
      if (!(this_present_openedCity && that_present_openedCity))
        return false;
      if (!this.openedCity.equals(that.openedCity))
        return false;
    }

    boolean this_present_openedCountry = true && this.isSetOpenedCountry();
    boolean that_present_openedCountry = true && that.isSetOpenedCountry();
    if (this_present_openedCountry || that_present_openedCountry) {
      if (!(this_present_openedCountry && that_present_openedCountry))
        return false;
      if (!this.openedCountry.equals(that.openedCountry))
        return false;
    }

    boolean this_present_wechatShareUrl = true && this.isSetWechatShareUrl();
    boolean that_present_wechatShareUrl = true && that.isSetWechatShareUrl();
    if (this_present_wechatShareUrl || that_present_wechatShareUrl) {
      if (!(this_present_wechatShareUrl && that_present_wechatShareUrl))
        return false;
      if (!this.wechatShareUrl.equals(that.wechatShareUrl))
        return false;
    }

    boolean this_present_rewardPoint = true;
    boolean that_present_rewardPoint = true;
    if (this_present_rewardPoint || that_present_rewardPoint) {
      if (!(this_present_rewardPoint && that_present_rewardPoint))
        return false;
      if (this.rewardPoint != that.rewardPoint)
        return false;
    }

    boolean this_present_wineryLogoPicUrl = true && this.isSetWineryLogoPicUrl();
    boolean that_present_wineryLogoPicUrl = true && that.isSetWineryLogoPicUrl();
    if (this_present_wineryLogoPicUrl || that_present_wineryLogoPicUrl) {
      if (!(this_present_wineryLogoPicUrl && that_present_wineryLogoPicUrl))
        return false;
      if (!this.wineryLogoPicUrl.equals(that.wineryLogoPicUrl))
        return false;
    }

    boolean this_present_wineryNationalFlagUrl = true && this.isSetWineryNationalFlagUrl();
    boolean that_present_wineryNationalFlagUrl = true && that.isSetWineryNationalFlagUrl();
    if (this_present_wineryNationalFlagUrl || that_present_wineryNationalFlagUrl) {
      if (!(this_present_wineryNationalFlagUrl && that_present_wineryNationalFlagUrl))
        return false;
      if (!this.wineryNationalFlagUrl.equals(that.wineryNationalFlagUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_isGenuine = true;
    list.add(present_isGenuine);
    if (present_isGenuine)
      list.add(isGenuine);

    boolean present_isSealed = true;
    list.add(present_isSealed);
    if (present_isSealed)
      list.add(isSealed);

    boolean present_wineName = true && (isSetWineName());
    list.add(present_wineName);
    if (present_wineName)
      list.add(wineName);

    boolean present_wineId = true;
    list.add(present_wineId);
    if (present_wineId)
      list.add(wineId);

    boolean present_winePicURL = true && (isSetWinePicURL());
    list.add(present_winePicURL);
    if (present_winePicURL)
      list.add(winePicURL);

    boolean present_wineRate = true;
    list.add(present_wineRate);
    if (present_wineRate)
      list.add(wineRate);

    boolean present_openedTime = true && (isSetOpenedTime());
    list.add(present_openedTime);
    if (present_openedTime)
      list.add(openedTime);

    boolean present_wineryName = true && (isSetWineryName());
    list.add(present_wineryName);
    if (present_wineryName)
      list.add(wineryName);

    boolean present_regionName = true && (isSetRegionName());
    list.add(present_regionName);
    if (present_regionName)
      list.add(regionName);

    boolean present_year = true && (isSetYear());
    list.add(present_year);
    if (present_year)
      list.add(year);

    boolean present_openedCity = true && (isSetOpenedCity());
    list.add(present_openedCity);
    if (present_openedCity)
      list.add(openedCity);

    boolean present_openedCountry = true && (isSetOpenedCountry());
    list.add(present_openedCountry);
    if (present_openedCountry)
      list.add(openedCountry);

    boolean present_wechatShareUrl = true && (isSetWechatShareUrl());
    list.add(present_wechatShareUrl);
    if (present_wechatShareUrl)
      list.add(wechatShareUrl);

    boolean present_rewardPoint = true;
    list.add(present_rewardPoint);
    if (present_rewardPoint)
      list.add(rewardPoint);

    boolean present_wineryLogoPicUrl = true && (isSetWineryLogoPicUrl());
    list.add(present_wineryLogoPicUrl);
    if (present_wineryLogoPicUrl)
      list.add(wineryLogoPicUrl);

    boolean present_wineryNationalFlagUrl = true && (isSetWineryNationalFlagUrl());
    list.add(present_wineryNationalFlagUrl);
    if (present_wineryNationalFlagUrl)
      list.add(wineryNationalFlagUrl);

    return list.hashCode();
  }

  @Override
  public int compareTo(WineInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIsGenuine()).compareTo(other.isSetIsGenuine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsGenuine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isGenuine, other.isGenuine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsSealed()).compareTo(other.isSetIsSealed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsSealed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isSealed, other.isSealed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWineName()).compareTo(other.isSetWineName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineName, other.wineName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWineId()).compareTo(other.isSetWineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineId, other.wineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWinePicURL()).compareTo(other.isSetWinePicURL());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWinePicURL()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winePicURL, other.winePicURL);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWineRate()).compareTo(other.isSetWineRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineRate, other.wineRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenedTime()).compareTo(other.isSetOpenedTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenedTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openedTime, other.openedTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWineryName()).compareTo(other.isSetWineryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineryName, other.wineryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionName()).compareTo(other.isSetRegionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionName, other.regionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenedCity()).compareTo(other.isSetOpenedCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenedCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openedCity, other.openedCity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenedCountry()).compareTo(other.isSetOpenedCountry());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenedCountry()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openedCountry, other.openedCountry);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWechatShareUrl()).compareTo(other.isSetWechatShareUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWechatShareUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatShareUrl, other.wechatShareUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRewardPoint()).compareTo(other.isSetRewardPoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRewardPoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rewardPoint, other.rewardPoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWineryLogoPicUrl()).compareTo(other.isSetWineryLogoPicUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineryLogoPicUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineryLogoPicUrl, other.wineryLogoPicUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWineryNationalFlagUrl()).compareTo(other.isSetWineryNationalFlagUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineryNationalFlagUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineryNationalFlagUrl, other.wineryNationalFlagUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WineInfo(");
    boolean first = true;

    sb.append("isGenuine:");
    sb.append(this.isGenuine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isSealed:");
    sb.append(this.isSealed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wineName:");
    if (this.wineName == null) {
      sb.append("null");
    } else {
      sb.append(this.wineName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wineId:");
    sb.append(this.wineId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("winePicURL:");
    if (this.winePicURL == null) {
      sb.append("null");
    } else {
      sb.append(this.winePicURL);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wineRate:");
    sb.append(this.wineRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("openedTime:");
    if (this.openedTime == null) {
      sb.append("null");
    } else {
      sb.append(this.openedTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wineryName:");
    if (this.wineryName == null) {
      sb.append("null");
    } else {
      sb.append(this.wineryName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionName:");
    if (this.regionName == null) {
      sb.append("null");
    } else {
      sb.append(this.regionName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("year:");
    if (this.year == null) {
      sb.append("null");
    } else {
      sb.append(this.year);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openedCity:");
    if (this.openedCity == null) {
      sb.append("null");
    } else {
      sb.append(this.openedCity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openedCountry:");
    if (this.openedCountry == null) {
      sb.append("null");
    } else {
      sb.append(this.openedCountry);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wechatShareUrl:");
    if (this.wechatShareUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.wechatShareUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rewardPoint:");
    sb.append(this.rewardPoint);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wineryLogoPicUrl:");
    if (this.wineryLogoPicUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.wineryLogoPicUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("wineryNationalFlagUrl:");
    if (this.wineryNationalFlagUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.wineryNationalFlagUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WineInfoStandardSchemeFactory implements SchemeFactory {
    public WineInfoStandardScheme getScheme() {
      return new WineInfoStandardScheme();
    }
  }

  private static class WineInfoStandardScheme extends StandardScheme<WineInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WineInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IS_GENUINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isGenuine = iprot.readBool();
              struct.setIsGenuineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IS_SEALED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isSealed = iprot.readBool();
              struct.setIsSealedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // WINE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wineName = iprot.readString();
              struct.setWineNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // WINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wineId = iprot.readI32();
              struct.setWineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // WINE_PIC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.winePicURL = iprot.readString();
              struct.setWinePicURLIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // WINE_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.wineRate = iprot.readDouble();
              struct.setWineRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPENED_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openedTime = iprot.readString();
              struct.setOpenedTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // WINERY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wineryName = iprot.readString();
              struct.setWineryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REGION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regionName = iprot.readString();
              struct.setRegionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.year = iprot.readString();
              struct.setYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OPENED_CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openedCity = iprot.readString();
              struct.setOpenedCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OPENED_COUNTRY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openedCountry = iprot.readString();
              struct.setOpenedCountryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // WECHAT_SHARE_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wechatShareUrl = iprot.readString();
              struct.setWechatShareUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REWARD_POINT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.rewardPoint = iprot.readI32();
              struct.setRewardPointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // WINERY_LOGO_PIC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wineryLogoPicUrl = iprot.readString();
              struct.setWineryLogoPicUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // WINERY_NATIONAL_FLAG_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wineryNationalFlagUrl = iprot.readString();
              struct.setWineryNationalFlagUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WineInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(IS_GENUINE_FIELD_DESC);
      oprot.writeBool(struct.isGenuine);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_SEALED_FIELD_DESC);
      oprot.writeBool(struct.isSealed);
      oprot.writeFieldEnd();
      if (struct.wineName != null) {
        oprot.writeFieldBegin(WINE_NAME_FIELD_DESC);
        oprot.writeString(struct.wineName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WINE_ID_FIELD_DESC);
      oprot.writeI32(struct.wineId);
      oprot.writeFieldEnd();
      if (struct.winePicURL != null) {
        oprot.writeFieldBegin(WINE_PIC_URL_FIELD_DESC);
        oprot.writeString(struct.winePicURL);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(WINE_RATE_FIELD_DESC);
      oprot.writeDouble(struct.wineRate);
      oprot.writeFieldEnd();
      if (struct.openedTime != null) {
        oprot.writeFieldBegin(OPENED_TIME_FIELD_DESC);
        oprot.writeString(struct.openedTime);
        oprot.writeFieldEnd();
      }
      if (struct.wineryName != null) {
        oprot.writeFieldBegin(WINERY_NAME_FIELD_DESC);
        oprot.writeString(struct.wineryName);
        oprot.writeFieldEnd();
      }
      if (struct.regionName != null) {
        oprot.writeFieldBegin(REGION_NAME_FIELD_DESC);
        oprot.writeString(struct.regionName);
        oprot.writeFieldEnd();
      }
      if (struct.year != null) {
        oprot.writeFieldBegin(YEAR_FIELD_DESC);
        oprot.writeString(struct.year);
        oprot.writeFieldEnd();
      }
      if (struct.openedCity != null) {
        oprot.writeFieldBegin(OPENED_CITY_FIELD_DESC);
        oprot.writeString(struct.openedCity);
        oprot.writeFieldEnd();
      }
      if (struct.openedCountry != null) {
        oprot.writeFieldBegin(OPENED_COUNTRY_FIELD_DESC);
        oprot.writeString(struct.openedCountry);
        oprot.writeFieldEnd();
      }
      if (struct.wechatShareUrl != null) {
        oprot.writeFieldBegin(WECHAT_SHARE_URL_FIELD_DESC);
        oprot.writeString(struct.wechatShareUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REWARD_POINT_FIELD_DESC);
      oprot.writeI32(struct.rewardPoint);
      oprot.writeFieldEnd();
      if (struct.wineryLogoPicUrl != null) {
        oprot.writeFieldBegin(WINERY_LOGO_PIC_URL_FIELD_DESC);
        oprot.writeString(struct.wineryLogoPicUrl);
        oprot.writeFieldEnd();
      }
      if (struct.wineryNationalFlagUrl != null) {
        oprot.writeFieldBegin(WINERY_NATIONAL_FLAG_URL_FIELD_DESC);
        oprot.writeString(struct.wineryNationalFlagUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WineInfoTupleSchemeFactory implements SchemeFactory {
    public WineInfoTupleScheme getScheme() {
      return new WineInfoTupleScheme();
    }
  }

  private static class WineInfoTupleScheme extends TupleScheme<WineInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WineInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIsGenuine()) {
        optionals.set(0);
      }
      if (struct.isSetIsSealed()) {
        optionals.set(1);
      }
      if (struct.isSetWineName()) {
        optionals.set(2);
      }
      if (struct.isSetWineId()) {
        optionals.set(3);
      }
      if (struct.isSetWinePicURL()) {
        optionals.set(4);
      }
      if (struct.isSetWineRate()) {
        optionals.set(5);
      }
      if (struct.isSetOpenedTime()) {
        optionals.set(6);
      }
      if (struct.isSetWineryName()) {
        optionals.set(7);
      }
      if (struct.isSetRegionName()) {
        optionals.set(8);
      }
      if (struct.isSetYear()) {
        optionals.set(9);
      }
      if (struct.isSetOpenedCity()) {
        optionals.set(10);
      }
      if (struct.isSetOpenedCountry()) {
        optionals.set(11);
      }
      if (struct.isSetWechatShareUrl()) {
        optionals.set(12);
      }
      if (struct.isSetRewardPoint()) {
        optionals.set(13);
      }
      if (struct.isSetWineryLogoPicUrl()) {
        optionals.set(14);
      }
      if (struct.isSetWineryNationalFlagUrl()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetIsGenuine()) {
        oprot.writeBool(struct.isGenuine);
      }
      if (struct.isSetIsSealed()) {
        oprot.writeBool(struct.isSealed);
      }
      if (struct.isSetWineName()) {
        oprot.writeString(struct.wineName);
      }
      if (struct.isSetWineId()) {
        oprot.writeI32(struct.wineId);
      }
      if (struct.isSetWinePicURL()) {
        oprot.writeString(struct.winePicURL);
      }
      if (struct.isSetWineRate()) {
        oprot.writeDouble(struct.wineRate);
      }
      if (struct.isSetOpenedTime()) {
        oprot.writeString(struct.openedTime);
      }
      if (struct.isSetWineryName()) {
        oprot.writeString(struct.wineryName);
      }
      if (struct.isSetRegionName()) {
        oprot.writeString(struct.regionName);
      }
      if (struct.isSetYear()) {
        oprot.writeString(struct.year);
      }
      if (struct.isSetOpenedCity()) {
        oprot.writeString(struct.openedCity);
      }
      if (struct.isSetOpenedCountry()) {
        oprot.writeString(struct.openedCountry);
      }
      if (struct.isSetWechatShareUrl()) {
        oprot.writeString(struct.wechatShareUrl);
      }
      if (struct.isSetRewardPoint()) {
        oprot.writeI32(struct.rewardPoint);
      }
      if (struct.isSetWineryLogoPicUrl()) {
        oprot.writeString(struct.wineryLogoPicUrl);
      }
      if (struct.isSetWineryNationalFlagUrl()) {
        oprot.writeString(struct.wineryNationalFlagUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WineInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.isGenuine = iprot.readBool();
        struct.setIsGenuineIsSet(true);
      }
      if (incoming.get(1)) {
        struct.isSealed = iprot.readBool();
        struct.setIsSealedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.wineName = iprot.readString();
        struct.setWineNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.wineId = iprot.readI32();
        struct.setWineIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.winePicURL = iprot.readString();
        struct.setWinePicURLIsSet(true);
      }
      if (incoming.get(5)) {
        struct.wineRate = iprot.readDouble();
        struct.setWineRateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.openedTime = iprot.readString();
        struct.setOpenedTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.wineryName = iprot.readString();
        struct.setWineryNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.regionName = iprot.readString();
        struct.setRegionNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.year = iprot.readString();
        struct.setYearIsSet(true);
      }
      if (incoming.get(10)) {
        struct.openedCity = iprot.readString();
        struct.setOpenedCityIsSet(true);
      }
      if (incoming.get(11)) {
        struct.openedCountry = iprot.readString();
        struct.setOpenedCountryIsSet(true);
      }
      if (incoming.get(12)) {
        struct.wechatShareUrl = iprot.readString();
        struct.setWechatShareUrlIsSet(true);
      }
      if (incoming.get(13)) {
        struct.rewardPoint = iprot.readI32();
        struct.setRewardPointIsSet(true);
      }
      if (incoming.get(14)) {
        struct.wineryLogoPicUrl = iprot.readString();
        struct.setWineryLogoPicUrlIsSet(true);
      }
      if (incoming.get(15)) {
        struct.wineryNationalFlagUrl = iprot.readString();
        struct.setWineryNationalFlagUrlIsSet(true);
      }
    }
  }

}

