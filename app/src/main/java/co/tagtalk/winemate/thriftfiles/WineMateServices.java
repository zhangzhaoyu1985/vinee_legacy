/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package co.tagtalk.winemate.thriftfiles;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-24")
public class WineMateServices {

  public interface Iface {

    public LoginResult login(User user) throws org.apache.thrift.TException;

    public LoginResult loginWechat(WechatLoginInfo wechatLoginInfo) throws org.apache.thrift.TException;

    public RegistrationStatus registration(User user) throws org.apache.thrift.TException;

    public boolean sendActivateEmail(int userId) throws org.apache.thrift.TException;

    public boolean activateAccount(int userId, boolean activate) throws org.apache.thrift.TException;

    public FindPasswordStatus findPassword(User user) throws org.apache.thrift.TException;

    public WineInfo authentication(TagInfo tagInfo, int userId) throws org.apache.thrift.TException;

    public boolean openBottle(BottleOpenInfo bottleOpenInfo) throws org.apache.thrift.TException;

    public WineBasicInfoResponse getBasicInfo(WineBasicInfoRequest wineBasicInfoRequest) throws org.apache.thrift.TException;

    public WineReviewAndRatingReadResponse getWineReviewAndRating(WineReviewAndRatingReadRequest wineReviewAndRatingReadRequest) throws org.apache.thrift.TException;

    public WineReviewAndRatingWriteResponse writeWineReviewAndRating(WineReviewAndRatingWriteRequest wineReviewAndRatingWriteRequest) throws org.apache.thrift.TException;

    public MyRateRecordResponse getMyRateRecord(MyRateRecordRequest myRateRecordRequest) throws org.apache.thrift.TException;

    public OpenedBottlesResponse getMyOpenedBottles(MyBottlesRequest myBottlesRequest) throws org.apache.thrift.TException;

    public ScannedBottlesResponse getMyScannedBottles(MyBottlesRequest myBottlesRequest) throws org.apache.thrift.TException;

    public RatedBottlesResponse getMyRatedBottles(MyBottlesRequest myBottlesRequest) throws org.apache.thrift.TException;

    public NewsFeedResponse getMyNewsFeed(NewsFeedRequest newsFeedRequest) throws org.apache.thrift.TException;

    public WineryInfoResponse getWineryInfo(WineryInfoRequest wineryInfoRequest) throws org.apache.thrift.TException;

    public void followUser(int user, int userToFollow) throws org.apache.thrift.TException;

    public void unfollowUser(int user, int userToUnfollow) throws org.apache.thrift.TException;

    public void addFriend(int user1, int user2) throws org.apache.thrift.TException;

    public FriendListResponse getFriendList(FriendListRequest friendListRequest) throws org.apache.thrift.TException;

    public FriendListResponse searchFriend(String friendPrefix) throws org.apache.thrift.TException;

    public String getTagPassword(String tagId) throws org.apache.thrift.TException;

    public MyProfile getMyProfile(int requesterId, int requestedId) throws org.apache.thrift.TException;

    public boolean updateMyProfile(User user) throws org.apache.thrift.TException;

    public MyFollowingListResponse getMyFollowingList(FriendListRequest followingListRequest) throws org.apache.thrift.TException;

    public MyFollowersListResponse getMyFollowersList(FriendListRequest followersListRequest) throws org.apache.thrift.TException;

    public boolean setPrivacy(int userId, boolean hideProfileToStranger) throws org.apache.thrift.TException;

    public AddRewardPointsResponse addRewardPoints(AddRewardPointsRequest addRewardPointsRequest) throws org.apache.thrift.TException;

    public int getMyRewardPoints(int userId) throws org.apache.thrift.TException;

    public RewardItemResponse getRewardItemList(RewardItemRequest rewardItemRequest) throws org.apache.thrift.TException;

    public RewardRedeemResponse rewardRedeem(RewardRedeemRequest rewardRedeemRequest) throws org.apache.thrift.TException;

    public UserPhotoResponse getUserPhoto(int userId) throws org.apache.thrift.TException;

    public MyWishListResponse getMyWishlist(MyBottlesRequest myBottlesRequest) throws org.apache.thrift.TException;

    public boolean addToWishlist(AddToWishlistRequest addToWishlistRequest) throws org.apache.thrift.TException;

    public IsInWishlistResponse isInWishlist(int userId, int wineId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void login(User user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void loginWechat(WechatLoginInfo wechatLoginInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registration(User user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendActivateEmail(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void activateAccount(int userId, boolean activate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findPassword(User user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void authentication(TagInfo tagInfo, int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void openBottle(BottleOpenInfo bottleOpenInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getBasicInfo(WineBasicInfoRequest wineBasicInfoRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWineReviewAndRating(WineReviewAndRatingReadRequest wineReviewAndRatingReadRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void writeWineReviewAndRating(WineReviewAndRatingWriteRequest wineReviewAndRatingWriteRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMyRateRecord(MyRateRecordRequest myRateRecordRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMyOpenedBottles(MyBottlesRequest myBottlesRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMyScannedBottles(MyBottlesRequest myBottlesRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMyRatedBottles(MyBottlesRequest myBottlesRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMyNewsFeed(NewsFeedRequest newsFeedRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getWineryInfo(WineryInfoRequest wineryInfoRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void followUser(int user, int userToFollow, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void unfollowUser(int user, int userToUnfollow, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addFriend(int user1, int user2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getFriendList(FriendListRequest friendListRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void searchFriend(String friendPrefix, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getTagPassword(String tagId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMyProfile(int requesterId, int requestedId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateMyProfile(User user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMyFollowingList(FriendListRequest followingListRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMyFollowersList(FriendListRequest followersListRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setPrivacy(int userId, boolean hideProfileToStranger, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addRewardPoints(AddRewardPointsRequest addRewardPointsRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMyRewardPoints(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRewardItemList(RewardItemRequest rewardItemRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void rewardRedeem(RewardRedeemRequest rewardRedeemRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getUserPhoto(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getMyWishlist(MyBottlesRequest myBottlesRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void addToWishlist(AddToWishlistRequest addToWishlistRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void isInWishlist(int userId, int wineId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public LoginResult login(User user) throws org.apache.thrift.TException
    {
      send_login(user);
      return recv_login();
    }

    public void send_login(User user) throws org.apache.thrift.TException
    {
      login_args args = new login_args();
      args.setUser(user);
      sendBase("login", args);
    }

    public LoginResult recv_login() throws org.apache.thrift.TException
    {
      login_result result = new login_result();
      receiveBase(result, "login");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "login failed: unknown result");
    }

    public LoginResult loginWechat(WechatLoginInfo wechatLoginInfo) throws org.apache.thrift.TException
    {
      send_loginWechat(wechatLoginInfo);
      return recv_loginWechat();
    }

    public void send_loginWechat(WechatLoginInfo wechatLoginInfo) throws org.apache.thrift.TException
    {
      loginWechat_args args = new loginWechat_args();
      args.setWechatLoginInfo(wechatLoginInfo);
      sendBase("loginWechat", args);
    }

    public LoginResult recv_loginWechat() throws org.apache.thrift.TException
    {
      loginWechat_result result = new loginWechat_result();
      receiveBase(result, "loginWechat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "loginWechat failed: unknown result");
    }

    public RegistrationStatus registration(User user) throws org.apache.thrift.TException
    {
      send_registration(user);
      return recv_registration();
    }

    public void send_registration(User user) throws org.apache.thrift.TException
    {
      registration_args args = new registration_args();
      args.setUser(user);
      sendBase("registration", args);
    }

    public RegistrationStatus recv_registration() throws org.apache.thrift.TException
    {
      registration_result result = new registration_result();
      receiveBase(result, "registration");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registration failed: unknown result");
    }

    public boolean sendActivateEmail(int userId) throws org.apache.thrift.TException
    {
      send_sendActivateEmail(userId);
      return recv_sendActivateEmail();
    }

    public void send_sendActivateEmail(int userId) throws org.apache.thrift.TException
    {
      sendActivateEmail_args args = new sendActivateEmail_args();
      args.setUserId(userId);
      sendBase("sendActivateEmail", args);
    }

    public boolean recv_sendActivateEmail() throws org.apache.thrift.TException
    {
      sendActivateEmail_result result = new sendActivateEmail_result();
      receiveBase(result, "sendActivateEmail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendActivateEmail failed: unknown result");
    }

    public boolean activateAccount(int userId, boolean activate) throws org.apache.thrift.TException
    {
      send_activateAccount(userId, activate);
      return recv_activateAccount();
    }

    public void send_activateAccount(int userId, boolean activate) throws org.apache.thrift.TException
    {
      activateAccount_args args = new activateAccount_args();
      args.setUserId(userId);
      args.setActivate(activate);
      sendBase("activateAccount", args);
    }

    public boolean recv_activateAccount() throws org.apache.thrift.TException
    {
      activateAccount_result result = new activateAccount_result();
      receiveBase(result, "activateAccount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "activateAccount failed: unknown result");
    }

    public FindPasswordStatus findPassword(User user) throws org.apache.thrift.TException
    {
      send_findPassword(user);
      return recv_findPassword();
    }

    public void send_findPassword(User user) throws org.apache.thrift.TException
    {
      findPassword_args args = new findPassword_args();
      args.setUser(user);
      sendBase("findPassword", args);
    }

    public FindPasswordStatus recv_findPassword() throws org.apache.thrift.TException
    {
      findPassword_result result = new findPassword_result();
      receiveBase(result, "findPassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findPassword failed: unknown result");
    }

    public WineInfo authentication(TagInfo tagInfo, int userId) throws org.apache.thrift.TException
    {
      send_authentication(tagInfo, userId);
      return recv_authentication();
    }

    public void send_authentication(TagInfo tagInfo, int userId) throws org.apache.thrift.TException
    {
      authentication_args args = new authentication_args();
      args.setTagInfo(tagInfo);
      args.setUserId(userId);
      sendBase("authentication", args);
    }

    public WineInfo recv_authentication() throws org.apache.thrift.TException
    {
      authentication_result result = new authentication_result();
      receiveBase(result, "authentication");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "authentication failed: unknown result");
    }

    public boolean openBottle(BottleOpenInfo bottleOpenInfo) throws org.apache.thrift.TException
    {
      send_openBottle(bottleOpenInfo);
      return recv_openBottle();
    }

    public void send_openBottle(BottleOpenInfo bottleOpenInfo) throws org.apache.thrift.TException
    {
      openBottle_args args = new openBottle_args();
      args.setBottleOpenInfo(bottleOpenInfo);
      sendBase("openBottle", args);
    }

    public boolean recv_openBottle() throws org.apache.thrift.TException
    {
      openBottle_result result = new openBottle_result();
      receiveBase(result, "openBottle");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "openBottle failed: unknown result");
    }

    public WineBasicInfoResponse getBasicInfo(WineBasicInfoRequest wineBasicInfoRequest) throws org.apache.thrift.TException
    {
      send_getBasicInfo(wineBasicInfoRequest);
      return recv_getBasicInfo();
    }

    public void send_getBasicInfo(WineBasicInfoRequest wineBasicInfoRequest) throws org.apache.thrift.TException
    {
      getBasicInfo_args args = new getBasicInfo_args();
      args.setWineBasicInfoRequest(wineBasicInfoRequest);
      sendBase("getBasicInfo", args);
    }

    public WineBasicInfoResponse recv_getBasicInfo() throws org.apache.thrift.TException
    {
      getBasicInfo_result result = new getBasicInfo_result();
      receiveBase(result, "getBasicInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getBasicInfo failed: unknown result");
    }

    public WineReviewAndRatingReadResponse getWineReviewAndRating(WineReviewAndRatingReadRequest wineReviewAndRatingReadRequest) throws org.apache.thrift.TException
    {
      send_getWineReviewAndRating(wineReviewAndRatingReadRequest);
      return recv_getWineReviewAndRating();
    }

    public void send_getWineReviewAndRating(WineReviewAndRatingReadRequest wineReviewAndRatingReadRequest) throws org.apache.thrift.TException
    {
      getWineReviewAndRating_args args = new getWineReviewAndRating_args();
      args.setWineReviewAndRatingReadRequest(wineReviewAndRatingReadRequest);
      sendBase("getWineReviewAndRating", args);
    }

    public WineReviewAndRatingReadResponse recv_getWineReviewAndRating() throws org.apache.thrift.TException
    {
      getWineReviewAndRating_result result = new getWineReviewAndRating_result();
      receiveBase(result, "getWineReviewAndRating");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWineReviewAndRating failed: unknown result");
    }

    public WineReviewAndRatingWriteResponse writeWineReviewAndRating(WineReviewAndRatingWriteRequest wineReviewAndRatingWriteRequest) throws org.apache.thrift.TException
    {
      send_writeWineReviewAndRating(wineReviewAndRatingWriteRequest);
      return recv_writeWineReviewAndRating();
    }

    public void send_writeWineReviewAndRating(WineReviewAndRatingWriteRequest wineReviewAndRatingWriteRequest) throws org.apache.thrift.TException
    {
      writeWineReviewAndRating_args args = new writeWineReviewAndRating_args();
      args.setWineReviewAndRatingWriteRequest(wineReviewAndRatingWriteRequest);
      sendBase("writeWineReviewAndRating", args);
    }

    public WineReviewAndRatingWriteResponse recv_writeWineReviewAndRating() throws org.apache.thrift.TException
    {
      writeWineReviewAndRating_result result = new writeWineReviewAndRating_result();
      receiveBase(result, "writeWineReviewAndRating");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeWineReviewAndRating failed: unknown result");
    }

    public MyRateRecordResponse getMyRateRecord(MyRateRecordRequest myRateRecordRequest) throws org.apache.thrift.TException
    {
      send_getMyRateRecord(myRateRecordRequest);
      return recv_getMyRateRecord();
    }

    public void send_getMyRateRecord(MyRateRecordRequest myRateRecordRequest) throws org.apache.thrift.TException
    {
      getMyRateRecord_args args = new getMyRateRecord_args();
      args.setMyRateRecordRequest(myRateRecordRequest);
      sendBase("getMyRateRecord", args);
    }

    public MyRateRecordResponse recv_getMyRateRecord() throws org.apache.thrift.TException
    {
      getMyRateRecord_result result = new getMyRateRecord_result();
      receiveBase(result, "getMyRateRecord");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMyRateRecord failed: unknown result");
    }

    public OpenedBottlesResponse getMyOpenedBottles(MyBottlesRequest myBottlesRequest) throws org.apache.thrift.TException
    {
      send_getMyOpenedBottles(myBottlesRequest);
      return recv_getMyOpenedBottles();
    }

    public void send_getMyOpenedBottles(MyBottlesRequest myBottlesRequest) throws org.apache.thrift.TException
    {
      getMyOpenedBottles_args args = new getMyOpenedBottles_args();
      args.setMyBottlesRequest(myBottlesRequest);
      sendBase("getMyOpenedBottles", args);
    }

    public OpenedBottlesResponse recv_getMyOpenedBottles() throws org.apache.thrift.TException
    {
      getMyOpenedBottles_result result = new getMyOpenedBottles_result();
      receiveBase(result, "getMyOpenedBottles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMyOpenedBottles failed: unknown result");
    }

    public ScannedBottlesResponse getMyScannedBottles(MyBottlesRequest myBottlesRequest) throws org.apache.thrift.TException
    {
      send_getMyScannedBottles(myBottlesRequest);
      return recv_getMyScannedBottles();
    }

    public void send_getMyScannedBottles(MyBottlesRequest myBottlesRequest) throws org.apache.thrift.TException
    {
      getMyScannedBottles_args args = new getMyScannedBottles_args();
      args.setMyBottlesRequest(myBottlesRequest);
      sendBase("getMyScannedBottles", args);
    }

    public ScannedBottlesResponse recv_getMyScannedBottles() throws org.apache.thrift.TException
    {
      getMyScannedBottles_result result = new getMyScannedBottles_result();
      receiveBase(result, "getMyScannedBottles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMyScannedBottles failed: unknown result");
    }

    public RatedBottlesResponse getMyRatedBottles(MyBottlesRequest myBottlesRequest) throws org.apache.thrift.TException
    {
      send_getMyRatedBottles(myBottlesRequest);
      return recv_getMyRatedBottles();
    }

    public void send_getMyRatedBottles(MyBottlesRequest myBottlesRequest) throws org.apache.thrift.TException
    {
      getMyRatedBottles_args args = new getMyRatedBottles_args();
      args.setMyBottlesRequest(myBottlesRequest);
      sendBase("getMyRatedBottles", args);
    }

    public RatedBottlesResponse recv_getMyRatedBottles() throws org.apache.thrift.TException
    {
      getMyRatedBottles_result result = new getMyRatedBottles_result();
      receiveBase(result, "getMyRatedBottles");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMyRatedBottles failed: unknown result");
    }

    public NewsFeedResponse getMyNewsFeed(NewsFeedRequest newsFeedRequest) throws org.apache.thrift.TException
    {
      send_getMyNewsFeed(newsFeedRequest);
      return recv_getMyNewsFeed();
    }

    public void send_getMyNewsFeed(NewsFeedRequest newsFeedRequest) throws org.apache.thrift.TException
    {
      getMyNewsFeed_args args = new getMyNewsFeed_args();
      args.setNewsFeedRequest(newsFeedRequest);
      sendBase("getMyNewsFeed", args);
    }

    public NewsFeedResponse recv_getMyNewsFeed() throws org.apache.thrift.TException
    {
      getMyNewsFeed_result result = new getMyNewsFeed_result();
      receiveBase(result, "getMyNewsFeed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMyNewsFeed failed: unknown result");
    }

    public WineryInfoResponse getWineryInfo(WineryInfoRequest wineryInfoRequest) throws org.apache.thrift.TException
    {
      send_getWineryInfo(wineryInfoRequest);
      return recv_getWineryInfo();
    }

    public void send_getWineryInfo(WineryInfoRequest wineryInfoRequest) throws org.apache.thrift.TException
    {
      getWineryInfo_args args = new getWineryInfo_args();
      args.setWineryInfoRequest(wineryInfoRequest);
      sendBase("getWineryInfo", args);
    }

    public WineryInfoResponse recv_getWineryInfo() throws org.apache.thrift.TException
    {
      getWineryInfo_result result = new getWineryInfo_result();
      receiveBase(result, "getWineryInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getWineryInfo failed: unknown result");
    }

    public void followUser(int user, int userToFollow) throws org.apache.thrift.TException
    {
      send_followUser(user, userToFollow);
      recv_followUser();
    }

    public void send_followUser(int user, int userToFollow) throws org.apache.thrift.TException
    {
      followUser_args args = new followUser_args();
      args.setUser(user);
      args.setUserToFollow(userToFollow);
      sendBase("followUser", args);
    }

    public void recv_followUser() throws org.apache.thrift.TException
    {
      followUser_result result = new followUser_result();
      receiveBase(result, "followUser");
      return;
    }

    public void unfollowUser(int user, int userToUnfollow) throws org.apache.thrift.TException
    {
      send_unfollowUser(user, userToUnfollow);
      recv_unfollowUser();
    }

    public void send_unfollowUser(int user, int userToUnfollow) throws org.apache.thrift.TException
    {
      unfollowUser_args args = new unfollowUser_args();
      args.setUser(user);
      args.setUserToUnfollow(userToUnfollow);
      sendBase("unfollowUser", args);
    }

    public void recv_unfollowUser() throws org.apache.thrift.TException
    {
      unfollowUser_result result = new unfollowUser_result();
      receiveBase(result, "unfollowUser");
      return;
    }

    public void addFriend(int user1, int user2) throws org.apache.thrift.TException
    {
      send_addFriend(user1, user2);
      recv_addFriend();
    }

    public void send_addFriend(int user1, int user2) throws org.apache.thrift.TException
    {
      addFriend_args args = new addFriend_args();
      args.setUser1(user1);
      args.setUser2(user2);
      sendBase("addFriend", args);
    }

    public void recv_addFriend() throws org.apache.thrift.TException
    {
      addFriend_result result = new addFriend_result();
      receiveBase(result, "addFriend");
      return;
    }

    public FriendListResponse getFriendList(FriendListRequest friendListRequest) throws org.apache.thrift.TException
    {
      send_getFriendList(friendListRequest);
      return recv_getFriendList();
    }

    public void send_getFriendList(FriendListRequest friendListRequest) throws org.apache.thrift.TException
    {
      getFriendList_args args = new getFriendList_args();
      args.setFriendListRequest(friendListRequest);
      sendBase("getFriendList", args);
    }

    public FriendListResponse recv_getFriendList() throws org.apache.thrift.TException
    {
      getFriendList_result result = new getFriendList_result();
      receiveBase(result, "getFriendList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFriendList failed: unknown result");
    }

    public FriendListResponse searchFriend(String friendPrefix) throws org.apache.thrift.TException
    {
      send_searchFriend(friendPrefix);
      return recv_searchFriend();
    }

    public void send_searchFriend(String friendPrefix) throws org.apache.thrift.TException
    {
      searchFriend_args args = new searchFriend_args();
      args.setFriendPrefix(friendPrefix);
      sendBase("searchFriend", args);
    }

    public FriendListResponse recv_searchFriend() throws org.apache.thrift.TException
    {
      searchFriend_result result = new searchFriend_result();
      receiveBase(result, "searchFriend");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "searchFriend failed: unknown result");
    }

    public String getTagPassword(String tagId) throws org.apache.thrift.TException
    {
      send_getTagPassword(tagId);
      return recv_getTagPassword();
    }

    public void send_getTagPassword(String tagId) throws org.apache.thrift.TException
    {
      getTagPassword_args args = new getTagPassword_args();
      args.setTagId(tagId);
      sendBase("getTagPassword", args);
    }

    public String recv_getTagPassword() throws org.apache.thrift.TException
    {
      getTagPassword_result result = new getTagPassword_result();
      receiveBase(result, "getTagPassword");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTagPassword failed: unknown result");
    }

    public MyProfile getMyProfile(int requesterId, int requestedId) throws org.apache.thrift.TException
    {
      send_getMyProfile(requesterId, requestedId);
      return recv_getMyProfile();
    }

    public void send_getMyProfile(int requesterId, int requestedId) throws org.apache.thrift.TException
    {
      getMyProfile_args args = new getMyProfile_args();
      args.setRequesterId(requesterId);
      args.setRequestedId(requestedId);
      sendBase("getMyProfile", args);
    }

    public MyProfile recv_getMyProfile() throws org.apache.thrift.TException
    {
      getMyProfile_result result = new getMyProfile_result();
      receiveBase(result, "getMyProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMyProfile failed: unknown result");
    }

    public boolean updateMyProfile(User user) throws org.apache.thrift.TException
    {
      send_updateMyProfile(user);
      return recv_updateMyProfile();
    }

    public void send_updateMyProfile(User user) throws org.apache.thrift.TException
    {
      updateMyProfile_args args = new updateMyProfile_args();
      args.setUser(user);
      sendBase("updateMyProfile", args);
    }

    public boolean recv_updateMyProfile() throws org.apache.thrift.TException
    {
      updateMyProfile_result result = new updateMyProfile_result();
      receiveBase(result, "updateMyProfile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateMyProfile failed: unknown result");
    }

    public MyFollowingListResponse getMyFollowingList(FriendListRequest followingListRequest) throws org.apache.thrift.TException
    {
      send_getMyFollowingList(followingListRequest);
      return recv_getMyFollowingList();
    }

    public void send_getMyFollowingList(FriendListRequest followingListRequest) throws org.apache.thrift.TException
    {
      getMyFollowingList_args args = new getMyFollowingList_args();
      args.setFollowingListRequest(followingListRequest);
      sendBase("getMyFollowingList", args);
    }

    public MyFollowingListResponse recv_getMyFollowingList() throws org.apache.thrift.TException
    {
      getMyFollowingList_result result = new getMyFollowingList_result();
      receiveBase(result, "getMyFollowingList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMyFollowingList failed: unknown result");
    }

    public MyFollowersListResponse getMyFollowersList(FriendListRequest followersListRequest) throws org.apache.thrift.TException
    {
      send_getMyFollowersList(followersListRequest);
      return recv_getMyFollowersList();
    }

    public void send_getMyFollowersList(FriendListRequest followersListRequest) throws org.apache.thrift.TException
    {
      getMyFollowersList_args args = new getMyFollowersList_args();
      args.setFollowersListRequest(followersListRequest);
      sendBase("getMyFollowersList", args);
    }

    public MyFollowersListResponse recv_getMyFollowersList() throws org.apache.thrift.TException
    {
      getMyFollowersList_result result = new getMyFollowersList_result();
      receiveBase(result, "getMyFollowersList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMyFollowersList failed: unknown result");
    }

    public boolean setPrivacy(int userId, boolean hideProfileToStranger) throws org.apache.thrift.TException
    {
      send_setPrivacy(userId, hideProfileToStranger);
      return recv_setPrivacy();
    }

    public void send_setPrivacy(int userId, boolean hideProfileToStranger) throws org.apache.thrift.TException
    {
      setPrivacy_args args = new setPrivacy_args();
      args.setUserId(userId);
      args.setHideProfileToStranger(hideProfileToStranger);
      sendBase("setPrivacy", args);
    }

    public boolean recv_setPrivacy() throws org.apache.thrift.TException
    {
      setPrivacy_result result = new setPrivacy_result();
      receiveBase(result, "setPrivacy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setPrivacy failed: unknown result");
    }

    public AddRewardPointsResponse addRewardPoints(AddRewardPointsRequest addRewardPointsRequest) throws org.apache.thrift.TException
    {
      send_addRewardPoints(addRewardPointsRequest);
      return recv_addRewardPoints();
    }

    public void send_addRewardPoints(AddRewardPointsRequest addRewardPointsRequest) throws org.apache.thrift.TException
    {
      addRewardPoints_args args = new addRewardPoints_args();
      args.setAddRewardPointsRequest(addRewardPointsRequest);
      sendBase("addRewardPoints", args);
    }

    public AddRewardPointsResponse recv_addRewardPoints() throws org.apache.thrift.TException
    {
      addRewardPoints_result result = new addRewardPoints_result();
      receiveBase(result, "addRewardPoints");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addRewardPoints failed: unknown result");
    }

    public int getMyRewardPoints(int userId) throws org.apache.thrift.TException
    {
      send_getMyRewardPoints(userId);
      return recv_getMyRewardPoints();
    }

    public void send_getMyRewardPoints(int userId) throws org.apache.thrift.TException
    {
      getMyRewardPoints_args args = new getMyRewardPoints_args();
      args.setUserId(userId);
      sendBase("getMyRewardPoints", args);
    }

    public int recv_getMyRewardPoints() throws org.apache.thrift.TException
    {
      getMyRewardPoints_result result = new getMyRewardPoints_result();
      receiveBase(result, "getMyRewardPoints");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMyRewardPoints failed: unknown result");
    }

    public RewardItemResponse getRewardItemList(RewardItemRequest rewardItemRequest) throws org.apache.thrift.TException
    {
      send_getRewardItemList(rewardItemRequest);
      return recv_getRewardItemList();
    }

    public void send_getRewardItemList(RewardItemRequest rewardItemRequest) throws org.apache.thrift.TException
    {
      getRewardItemList_args args = new getRewardItemList_args();
      args.setRewardItemRequest(rewardItemRequest);
      sendBase("getRewardItemList", args);
    }

    public RewardItemResponse recv_getRewardItemList() throws org.apache.thrift.TException
    {
      getRewardItemList_result result = new getRewardItemList_result();
      receiveBase(result, "getRewardItemList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRewardItemList failed: unknown result");
    }

    public RewardRedeemResponse rewardRedeem(RewardRedeemRequest rewardRedeemRequest) throws org.apache.thrift.TException
    {
      send_rewardRedeem(rewardRedeemRequest);
      return recv_rewardRedeem();
    }

    public void send_rewardRedeem(RewardRedeemRequest rewardRedeemRequest) throws org.apache.thrift.TException
    {
      rewardRedeem_args args = new rewardRedeem_args();
      args.setRewardRedeemRequest(rewardRedeemRequest);
      sendBase("rewardRedeem", args);
    }

    public RewardRedeemResponse recv_rewardRedeem() throws org.apache.thrift.TException
    {
      rewardRedeem_result result = new rewardRedeem_result();
      receiveBase(result, "rewardRedeem");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rewardRedeem failed: unknown result");
    }

    public UserPhotoResponse getUserPhoto(int userId) throws org.apache.thrift.TException
    {
      send_getUserPhoto(userId);
      return recv_getUserPhoto();
    }

    public void send_getUserPhoto(int userId) throws org.apache.thrift.TException
    {
      getUserPhoto_args args = new getUserPhoto_args();
      args.setUserId(userId);
      sendBase("getUserPhoto", args);
    }

    public UserPhotoResponse recv_getUserPhoto() throws org.apache.thrift.TException
    {
      getUserPhoto_result result = new getUserPhoto_result();
      receiveBase(result, "getUserPhoto");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUserPhoto failed: unknown result");
    }

    public MyWishListResponse getMyWishlist(MyBottlesRequest myBottlesRequest) throws org.apache.thrift.TException
    {
      send_getMyWishlist(myBottlesRequest);
      return recv_getMyWishlist();
    }

    public void send_getMyWishlist(MyBottlesRequest myBottlesRequest) throws org.apache.thrift.TException
    {
      getMyWishlist_args args = new getMyWishlist_args();
      args.setMyBottlesRequest(myBottlesRequest);
      sendBase("getMyWishlist", args);
    }

    public MyWishListResponse recv_getMyWishlist() throws org.apache.thrift.TException
    {
      getMyWishlist_result result = new getMyWishlist_result();
      receiveBase(result, "getMyWishlist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMyWishlist failed: unknown result");
    }

    public boolean addToWishlist(AddToWishlistRequest addToWishlistRequest) throws org.apache.thrift.TException
    {
      send_addToWishlist(addToWishlistRequest);
      return recv_addToWishlist();
    }

    public void send_addToWishlist(AddToWishlistRequest addToWishlistRequest) throws org.apache.thrift.TException
    {
      addToWishlist_args args = new addToWishlist_args();
      args.setAddToWishlistRequest(addToWishlistRequest);
      sendBase("addToWishlist", args);
    }

    public boolean recv_addToWishlist() throws org.apache.thrift.TException
    {
      addToWishlist_result result = new addToWishlist_result();
      receiveBase(result, "addToWishlist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addToWishlist failed: unknown result");
    }

    public IsInWishlistResponse isInWishlist(int userId, int wineId) throws org.apache.thrift.TException
    {
      send_isInWishlist(userId, wineId);
      return recv_isInWishlist();
    }

    public void send_isInWishlist(int userId, int wineId) throws org.apache.thrift.TException
    {
      isInWishlist_args args = new isInWishlist_args();
      args.setUserId(userId);
      args.setWineId(wineId);
      sendBase("isInWishlist", args);
    }

    public IsInWishlistResponse recv_isInWishlist() throws org.apache.thrift.TException
    {
      isInWishlist_result result = new isInWishlist_result();
      receiveBase(result, "isInWishlist");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isInWishlist failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void login(User user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      login_call method_call = new login_call(user, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class login_call extends org.apache.thrift.async.TAsyncMethodCall {
      private User user;
      public login_call(User user, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("login", org.apache.thrift.protocol.TMessageType.CALL, 0));
        login_args args = new login_args();
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LoginResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_login();
      }
    }

    public void loginWechat(WechatLoginInfo wechatLoginInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loginWechat_call method_call = new loginWechat_call(wechatLoginInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loginWechat_call extends org.apache.thrift.async.TAsyncMethodCall {
      private WechatLoginInfo wechatLoginInfo;
      public loginWechat_call(WechatLoginInfo wechatLoginInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.wechatLoginInfo = wechatLoginInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loginWechat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loginWechat_args args = new loginWechat_args();
        args.setWechatLoginInfo(wechatLoginInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LoginResult getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_loginWechat();
      }
    }

    public void registration(User user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registration_call method_call = new registration_call(user, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registration_call extends org.apache.thrift.async.TAsyncMethodCall {
      private User user;
      public registration_call(User user, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registration", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registration_args args = new registration_args();
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RegistrationStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registration();
      }
    }

    public void sendActivateEmail(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendActivateEmail_call method_call = new sendActivateEmail_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendActivateEmail_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public sendActivateEmail_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendActivateEmail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendActivateEmail_args args = new sendActivateEmail_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendActivateEmail();
      }
    }

    public void activateAccount(int userId, boolean activate, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      activateAccount_call method_call = new activateAccount_call(userId, activate, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class activateAccount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private boolean activate;
      public activateAccount_call(int userId, boolean activate, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.activate = activate;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("activateAccount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        activateAccount_args args = new activateAccount_args();
        args.setUserId(userId);
        args.setActivate(activate);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_activateAccount();
      }
    }

    public void findPassword(User user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findPassword_call method_call = new findPassword_call(user, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findPassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private User user;
      public findPassword_call(User user, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findPassword_args args = new findPassword_args();
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FindPasswordStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findPassword();
      }
    }

    public void authentication(TagInfo tagInfo, int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      authentication_call method_call = new authentication_call(tagInfo, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class authentication_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TagInfo tagInfo;
      private int userId;
      public authentication_call(TagInfo tagInfo, int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagInfo = tagInfo;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("authentication", org.apache.thrift.protocol.TMessageType.CALL, 0));
        authentication_args args = new authentication_args();
        args.setTagInfo(tagInfo);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WineInfo getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_authentication();
      }
    }

    public void openBottle(BottleOpenInfo bottleOpenInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      openBottle_call method_call = new openBottle_call(bottleOpenInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class openBottle_call extends org.apache.thrift.async.TAsyncMethodCall {
      private BottleOpenInfo bottleOpenInfo;
      public openBottle_call(BottleOpenInfo bottleOpenInfo, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.bottleOpenInfo = bottleOpenInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("openBottle", org.apache.thrift.protocol.TMessageType.CALL, 0));
        openBottle_args args = new openBottle_args();
        args.setBottleOpenInfo(bottleOpenInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_openBottle();
      }
    }

    public void getBasicInfo(WineBasicInfoRequest wineBasicInfoRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getBasicInfo_call method_call = new getBasicInfo_call(wineBasicInfoRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getBasicInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private WineBasicInfoRequest wineBasicInfoRequest;
      public getBasicInfo_call(WineBasicInfoRequest wineBasicInfoRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.wineBasicInfoRequest = wineBasicInfoRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getBasicInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getBasicInfo_args args = new getBasicInfo_args();
        args.setWineBasicInfoRequest(wineBasicInfoRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WineBasicInfoResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getBasicInfo();
      }
    }

    public void getWineReviewAndRating(WineReviewAndRatingReadRequest wineReviewAndRatingReadRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWineReviewAndRating_call method_call = new getWineReviewAndRating_call(wineReviewAndRatingReadRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWineReviewAndRating_call extends org.apache.thrift.async.TAsyncMethodCall {
      private WineReviewAndRatingReadRequest wineReviewAndRatingReadRequest;
      public getWineReviewAndRating_call(WineReviewAndRatingReadRequest wineReviewAndRatingReadRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.wineReviewAndRatingReadRequest = wineReviewAndRatingReadRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWineReviewAndRating", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWineReviewAndRating_args args = new getWineReviewAndRating_args();
        args.setWineReviewAndRatingReadRequest(wineReviewAndRatingReadRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WineReviewAndRatingReadResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWineReviewAndRating();
      }
    }

    public void writeWineReviewAndRating(WineReviewAndRatingWriteRequest wineReviewAndRatingWriteRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeWineReviewAndRating_call method_call = new writeWineReviewAndRating_call(wineReviewAndRatingWriteRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeWineReviewAndRating_call extends org.apache.thrift.async.TAsyncMethodCall {
      private WineReviewAndRatingWriteRequest wineReviewAndRatingWriteRequest;
      public writeWineReviewAndRating_call(WineReviewAndRatingWriteRequest wineReviewAndRatingWriteRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.wineReviewAndRatingWriteRequest = wineReviewAndRatingWriteRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeWineReviewAndRating", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeWineReviewAndRating_args args = new writeWineReviewAndRating_args();
        args.setWineReviewAndRatingWriteRequest(wineReviewAndRatingWriteRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WineReviewAndRatingWriteResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeWineReviewAndRating();
      }
    }

    public void getMyRateRecord(MyRateRecordRequest myRateRecordRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMyRateRecord_call method_call = new getMyRateRecord_call(myRateRecordRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMyRateRecord_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MyRateRecordRequest myRateRecordRequest;
      public getMyRateRecord_call(MyRateRecordRequest myRateRecordRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.myRateRecordRequest = myRateRecordRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMyRateRecord", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMyRateRecord_args args = new getMyRateRecord_args();
        args.setMyRateRecordRequest(myRateRecordRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MyRateRecordResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMyRateRecord();
      }
    }

    public void getMyOpenedBottles(MyBottlesRequest myBottlesRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMyOpenedBottles_call method_call = new getMyOpenedBottles_call(myBottlesRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMyOpenedBottles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MyBottlesRequest myBottlesRequest;
      public getMyOpenedBottles_call(MyBottlesRequest myBottlesRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.myBottlesRequest = myBottlesRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMyOpenedBottles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMyOpenedBottles_args args = new getMyOpenedBottles_args();
        args.setMyBottlesRequest(myBottlesRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public OpenedBottlesResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMyOpenedBottles();
      }
    }

    public void getMyScannedBottles(MyBottlesRequest myBottlesRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMyScannedBottles_call method_call = new getMyScannedBottles_call(myBottlesRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMyScannedBottles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MyBottlesRequest myBottlesRequest;
      public getMyScannedBottles_call(MyBottlesRequest myBottlesRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.myBottlesRequest = myBottlesRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMyScannedBottles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMyScannedBottles_args args = new getMyScannedBottles_args();
        args.setMyBottlesRequest(myBottlesRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ScannedBottlesResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMyScannedBottles();
      }
    }

    public void getMyRatedBottles(MyBottlesRequest myBottlesRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMyRatedBottles_call method_call = new getMyRatedBottles_call(myBottlesRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMyRatedBottles_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MyBottlesRequest myBottlesRequest;
      public getMyRatedBottles_call(MyBottlesRequest myBottlesRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.myBottlesRequest = myBottlesRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMyRatedBottles", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMyRatedBottles_args args = new getMyRatedBottles_args();
        args.setMyBottlesRequest(myBottlesRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RatedBottlesResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMyRatedBottles();
      }
    }

    public void getMyNewsFeed(NewsFeedRequest newsFeedRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMyNewsFeed_call method_call = new getMyNewsFeed_call(newsFeedRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMyNewsFeed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private NewsFeedRequest newsFeedRequest;
      public getMyNewsFeed_call(NewsFeedRequest newsFeedRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.newsFeedRequest = newsFeedRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMyNewsFeed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMyNewsFeed_args args = new getMyNewsFeed_args();
        args.setNewsFeedRequest(newsFeedRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public NewsFeedResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMyNewsFeed();
      }
    }

    public void getWineryInfo(WineryInfoRequest wineryInfoRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getWineryInfo_call method_call = new getWineryInfo_call(wineryInfoRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getWineryInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private WineryInfoRequest wineryInfoRequest;
      public getWineryInfo_call(WineryInfoRequest wineryInfoRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.wineryInfoRequest = wineryInfoRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getWineryInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getWineryInfo_args args = new getWineryInfo_args();
        args.setWineryInfoRequest(wineryInfoRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public WineryInfoResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getWineryInfo();
      }
    }

    public void followUser(int user, int userToFollow, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      followUser_call method_call = new followUser_call(user, userToFollow, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class followUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int user;
      private int userToFollow;
      public followUser_call(int user, int userToFollow, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.userToFollow = userToFollow;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("followUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        followUser_args args = new followUser_args();
        args.setUser(user);
        args.setUserToFollow(userToFollow);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_followUser();
      }
    }

    public void unfollowUser(int user, int userToUnfollow, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unfollowUser_call method_call = new unfollowUser_call(user, userToUnfollow, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class unfollowUser_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int user;
      private int userToUnfollow;
      public unfollowUser_call(int user, int userToUnfollow, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
        this.userToUnfollow = userToUnfollow;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unfollowUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unfollowUser_args args = new unfollowUser_args();
        args.setUser(user);
        args.setUserToUnfollow(userToUnfollow);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_unfollowUser();
      }
    }

    public void addFriend(int user1, int user2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addFriend_call method_call = new addFriend_call(user1, user2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addFriend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int user1;
      private int user2;
      public addFriend_call(int user1, int user2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user1 = user1;
        this.user2 = user2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addFriend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addFriend_args args = new addFriend_args();
        args.setUser1(user1);
        args.setUser2(user2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_addFriend();
      }
    }

    public void getFriendList(FriendListRequest friendListRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFriendList_call method_call = new getFriendList_call(friendListRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFriendList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FriendListRequest friendListRequest;
      public getFriendList_call(FriendListRequest friendListRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.friendListRequest = friendListRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFriendList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFriendList_args args = new getFriendList_args();
        args.setFriendListRequest(friendListRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FriendListResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFriendList();
      }
    }

    public void searchFriend(String friendPrefix, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      searchFriend_call method_call = new searchFriend_call(friendPrefix, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class searchFriend_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String friendPrefix;
      public searchFriend_call(String friendPrefix, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.friendPrefix = friendPrefix;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("searchFriend", org.apache.thrift.protocol.TMessageType.CALL, 0));
        searchFriend_args args = new searchFriend_args();
        args.setFriendPrefix(friendPrefix);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public FriendListResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_searchFriend();
      }
    }

    public void getTagPassword(String tagId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTagPassword_call method_call = new getTagPassword_call(tagId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTagPassword_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String tagId;
      public getTagPassword_call(String tagId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.tagId = tagId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTagPassword", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTagPassword_args args = new getTagPassword_args();
        args.setTagId(tagId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTagPassword();
      }
    }

    public void getMyProfile(int requesterId, int requestedId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMyProfile_call method_call = new getMyProfile_call(requesterId, requestedId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMyProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int requesterId;
      private int requestedId;
      public getMyProfile_call(int requesterId, int requestedId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.requesterId = requesterId;
        this.requestedId = requestedId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMyProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMyProfile_args args = new getMyProfile_args();
        args.setRequesterId(requesterId);
        args.setRequestedId(requestedId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MyProfile getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMyProfile();
      }
    }

    public void updateMyProfile(User user, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateMyProfile_call method_call = new updateMyProfile_call(user, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateMyProfile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private User user;
      public updateMyProfile_call(User user, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.user = user;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateMyProfile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateMyProfile_args args = new updateMyProfile_args();
        args.setUser(user);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateMyProfile();
      }
    }

    public void getMyFollowingList(FriendListRequest followingListRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMyFollowingList_call method_call = new getMyFollowingList_call(followingListRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMyFollowingList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FriendListRequest followingListRequest;
      public getMyFollowingList_call(FriendListRequest followingListRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.followingListRequest = followingListRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMyFollowingList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMyFollowingList_args args = new getMyFollowingList_args();
        args.setFollowingListRequest(followingListRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MyFollowingListResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMyFollowingList();
      }
    }

    public void getMyFollowersList(FriendListRequest followersListRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMyFollowersList_call method_call = new getMyFollowersList_call(followersListRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMyFollowersList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private FriendListRequest followersListRequest;
      public getMyFollowersList_call(FriendListRequest followersListRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.followersListRequest = followersListRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMyFollowersList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMyFollowersList_args args = new getMyFollowersList_args();
        args.setFollowersListRequest(followersListRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MyFollowersListResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMyFollowersList();
      }
    }

    public void setPrivacy(int userId, boolean hideProfileToStranger, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPrivacy_call method_call = new setPrivacy_call(userId, hideProfileToStranger, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPrivacy_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private boolean hideProfileToStranger;
      public setPrivacy_call(int userId, boolean hideProfileToStranger, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.hideProfileToStranger = hideProfileToStranger;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPrivacy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPrivacy_args args = new setPrivacy_args();
        args.setUserId(userId);
        args.setHideProfileToStranger(hideProfileToStranger);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setPrivacy();
      }
    }

    public void addRewardPoints(AddRewardPointsRequest addRewardPointsRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addRewardPoints_call method_call = new addRewardPoints_call(addRewardPointsRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addRewardPoints_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AddRewardPointsRequest addRewardPointsRequest;
      public addRewardPoints_call(AddRewardPointsRequest addRewardPointsRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.addRewardPointsRequest = addRewardPointsRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addRewardPoints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addRewardPoints_args args = new addRewardPoints_args();
        args.setAddRewardPointsRequest(addRewardPointsRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public AddRewardPointsResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addRewardPoints();
      }
    }

    public void getMyRewardPoints(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMyRewardPoints_call method_call = new getMyRewardPoints_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMyRewardPoints_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public getMyRewardPoints_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMyRewardPoints", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMyRewardPoints_args args = new getMyRewardPoints_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMyRewardPoints();
      }
    }

    public void getRewardItemList(RewardItemRequest rewardItemRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRewardItemList_call method_call = new getRewardItemList_call(rewardItemRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRewardItemList_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RewardItemRequest rewardItemRequest;
      public getRewardItemList_call(RewardItemRequest rewardItemRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rewardItemRequest = rewardItemRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRewardItemList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRewardItemList_args args = new getRewardItemList_args();
        args.setRewardItemRequest(rewardItemRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RewardItemResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRewardItemList();
      }
    }

    public void rewardRedeem(RewardRedeemRequest rewardRedeemRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rewardRedeem_call method_call = new rewardRedeem_call(rewardRedeemRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rewardRedeem_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RewardRedeemRequest rewardRedeemRequest;
      public rewardRedeem_call(RewardRedeemRequest rewardRedeemRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rewardRedeemRequest = rewardRedeemRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rewardRedeem", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rewardRedeem_args args = new rewardRedeem_args();
        args.setRewardRedeemRequest(rewardRedeemRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RewardRedeemResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rewardRedeem();
      }
    }

    public void getUserPhoto(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUserPhoto_call method_call = new getUserPhoto_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUserPhoto_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      public getUserPhoto_call(int userId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUserPhoto", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUserPhoto_args args = new getUserPhoto_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public UserPhotoResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUserPhoto();
      }
    }

    public void getMyWishlist(MyBottlesRequest myBottlesRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMyWishlist_call method_call = new getMyWishlist_call(myBottlesRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMyWishlist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private MyBottlesRequest myBottlesRequest;
      public getMyWishlist_call(MyBottlesRequest myBottlesRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.myBottlesRequest = myBottlesRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMyWishlist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMyWishlist_args args = new getMyWishlist_args();
        args.setMyBottlesRequest(myBottlesRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public MyWishListResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMyWishlist();
      }
    }

    public void addToWishlist(AddToWishlistRequest addToWishlistRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addToWishlist_call method_call = new addToWishlist_call(addToWishlistRequest, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addToWishlist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private AddToWishlistRequest addToWishlistRequest;
      public addToWishlist_call(AddToWishlistRequest addToWishlistRequest, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.addToWishlistRequest = addToWishlistRequest;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addToWishlist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addToWishlist_args args = new addToWishlist_args();
        args.setAddToWishlistRequest(addToWishlistRequest);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addToWishlist();
      }
    }

    public void isInWishlist(int userId, int wineId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isInWishlist_call method_call = new isInWishlist_call(userId, wineId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isInWishlist_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int userId;
      private int wineId;
      public isInWishlist_call(int userId, int wineId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
        this.wineId = wineId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isInWishlist", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isInWishlist_args args = new isInWishlist_args();
        args.setUserId(userId);
        args.setWineId(wineId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public IsInWishlistResponse getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isInWishlist();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("login", new login());
      processMap.put("loginWechat", new loginWechat());
      processMap.put("registration", new registration());
      processMap.put("sendActivateEmail", new sendActivateEmail());
      processMap.put("activateAccount", new activateAccount());
      processMap.put("findPassword", new findPassword());
      processMap.put("authentication", new authentication());
      processMap.put("openBottle", new openBottle());
      processMap.put("getBasicInfo", new getBasicInfo());
      processMap.put("getWineReviewAndRating", new getWineReviewAndRating());
      processMap.put("writeWineReviewAndRating", new writeWineReviewAndRating());
      processMap.put("getMyRateRecord", new getMyRateRecord());
      processMap.put("getMyOpenedBottles", new getMyOpenedBottles());
      processMap.put("getMyScannedBottles", new getMyScannedBottles());
      processMap.put("getMyRatedBottles", new getMyRatedBottles());
      processMap.put("getMyNewsFeed", new getMyNewsFeed());
      processMap.put("getWineryInfo", new getWineryInfo());
      processMap.put("followUser", new followUser());
      processMap.put("unfollowUser", new unfollowUser());
      processMap.put("addFriend", new addFriend());
      processMap.put("getFriendList", new getFriendList());
      processMap.put("searchFriend", new searchFriend());
      processMap.put("getTagPassword", new getTagPassword());
      processMap.put("getMyProfile", new getMyProfile());
      processMap.put("updateMyProfile", new updateMyProfile());
      processMap.put("getMyFollowingList", new getMyFollowingList());
      processMap.put("getMyFollowersList", new getMyFollowersList());
      processMap.put("setPrivacy", new setPrivacy());
      processMap.put("addRewardPoints", new addRewardPoints());
      processMap.put("getMyRewardPoints", new getMyRewardPoints());
      processMap.put("getRewardItemList", new getRewardItemList());
      processMap.put("rewardRedeem", new rewardRedeem());
      processMap.put("getUserPhoto", new getUserPhoto());
      processMap.put("getMyWishlist", new getMyWishlist());
      processMap.put("addToWishlist", new addToWishlist());
      processMap.put("isInWishlist", new isInWishlist());
      return processMap;
    }

    public static class login<I extends Iface> extends org.apache.thrift.ProcessFunction<I, login_args> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public login_result getResult(I iface, login_args args) throws org.apache.thrift.TException {
        login_result result = new login_result();
        result.success = iface.login(args.user);
        return result;
      }
    }

    public static class loginWechat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loginWechat_args> {
      public loginWechat() {
        super("loginWechat");
      }

      public loginWechat_args getEmptyArgsInstance() {
        return new loginWechat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public loginWechat_result getResult(I iface, loginWechat_args args) throws org.apache.thrift.TException {
        loginWechat_result result = new loginWechat_result();
        result.success = iface.loginWechat(args.wechatLoginInfo);
        return result;
      }
    }

    public static class registration<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registration_args> {
      public registration() {
        super("registration");
      }

      public registration_args getEmptyArgsInstance() {
        return new registration_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registration_result getResult(I iface, registration_args args) throws org.apache.thrift.TException {
        registration_result result = new registration_result();
        result.success = iface.registration(args.user);
        return result;
      }
    }

    public static class sendActivateEmail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendActivateEmail_args> {
      public sendActivateEmail() {
        super("sendActivateEmail");
      }

      public sendActivateEmail_args getEmptyArgsInstance() {
        return new sendActivateEmail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendActivateEmail_result getResult(I iface, sendActivateEmail_args args) throws org.apache.thrift.TException {
        sendActivateEmail_result result = new sendActivateEmail_result();
        result.success = iface.sendActivateEmail(args.userId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class activateAccount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, activateAccount_args> {
      public activateAccount() {
        super("activateAccount");
      }

      public activateAccount_args getEmptyArgsInstance() {
        return new activateAccount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public activateAccount_result getResult(I iface, activateAccount_args args) throws org.apache.thrift.TException {
        activateAccount_result result = new activateAccount_result();
        result.success = iface.activateAccount(args.userId, args.activate);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class findPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findPassword_args> {
      public findPassword() {
        super("findPassword");
      }

      public findPassword_args getEmptyArgsInstance() {
        return new findPassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findPassword_result getResult(I iface, findPassword_args args) throws org.apache.thrift.TException {
        findPassword_result result = new findPassword_result();
        result.success = iface.findPassword(args.user);
        return result;
      }
    }

    public static class authentication<I extends Iface> extends org.apache.thrift.ProcessFunction<I, authentication_args> {
      public authentication() {
        super("authentication");
      }

      public authentication_args getEmptyArgsInstance() {
        return new authentication_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public authentication_result getResult(I iface, authentication_args args) throws org.apache.thrift.TException {
        authentication_result result = new authentication_result();
        result.success = iface.authentication(args.tagInfo, args.userId);
        return result;
      }
    }

    public static class openBottle<I extends Iface> extends org.apache.thrift.ProcessFunction<I, openBottle_args> {
      public openBottle() {
        super("openBottle");
      }

      public openBottle_args getEmptyArgsInstance() {
        return new openBottle_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public openBottle_result getResult(I iface, openBottle_args args) throws org.apache.thrift.TException {
        openBottle_result result = new openBottle_result();
        result.success = iface.openBottle(args.bottleOpenInfo);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getBasicInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getBasicInfo_args> {
      public getBasicInfo() {
        super("getBasicInfo");
      }

      public getBasicInfo_args getEmptyArgsInstance() {
        return new getBasicInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getBasicInfo_result getResult(I iface, getBasicInfo_args args) throws org.apache.thrift.TException {
        getBasicInfo_result result = new getBasicInfo_result();
        result.success = iface.getBasicInfo(args.wineBasicInfoRequest);
        return result;
      }
    }

    public static class getWineReviewAndRating<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWineReviewAndRating_args> {
      public getWineReviewAndRating() {
        super("getWineReviewAndRating");
      }

      public getWineReviewAndRating_args getEmptyArgsInstance() {
        return new getWineReviewAndRating_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWineReviewAndRating_result getResult(I iface, getWineReviewAndRating_args args) throws org.apache.thrift.TException {
        getWineReviewAndRating_result result = new getWineReviewAndRating_result();
        result.success = iface.getWineReviewAndRating(args.wineReviewAndRatingReadRequest);
        return result;
      }
    }

    public static class writeWineReviewAndRating<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeWineReviewAndRating_args> {
      public writeWineReviewAndRating() {
        super("writeWineReviewAndRating");
      }

      public writeWineReviewAndRating_args getEmptyArgsInstance() {
        return new writeWineReviewAndRating_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public writeWineReviewAndRating_result getResult(I iface, writeWineReviewAndRating_args args) throws org.apache.thrift.TException {
        writeWineReviewAndRating_result result = new writeWineReviewAndRating_result();
        result.success = iface.writeWineReviewAndRating(args.wineReviewAndRatingWriteRequest);
        return result;
      }
    }

    public static class getMyRateRecord<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMyRateRecord_args> {
      public getMyRateRecord() {
        super("getMyRateRecord");
      }

      public getMyRateRecord_args getEmptyArgsInstance() {
        return new getMyRateRecord_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMyRateRecord_result getResult(I iface, getMyRateRecord_args args) throws org.apache.thrift.TException {
        getMyRateRecord_result result = new getMyRateRecord_result();
        result.success = iface.getMyRateRecord(args.myRateRecordRequest);
        return result;
      }
    }

    public static class getMyOpenedBottles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMyOpenedBottles_args> {
      public getMyOpenedBottles() {
        super("getMyOpenedBottles");
      }

      public getMyOpenedBottles_args getEmptyArgsInstance() {
        return new getMyOpenedBottles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMyOpenedBottles_result getResult(I iface, getMyOpenedBottles_args args) throws org.apache.thrift.TException {
        getMyOpenedBottles_result result = new getMyOpenedBottles_result();
        result.success = iface.getMyOpenedBottles(args.myBottlesRequest);
        return result;
      }
    }

    public static class getMyScannedBottles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMyScannedBottles_args> {
      public getMyScannedBottles() {
        super("getMyScannedBottles");
      }

      public getMyScannedBottles_args getEmptyArgsInstance() {
        return new getMyScannedBottles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMyScannedBottles_result getResult(I iface, getMyScannedBottles_args args) throws org.apache.thrift.TException {
        getMyScannedBottles_result result = new getMyScannedBottles_result();
        result.success = iface.getMyScannedBottles(args.myBottlesRequest);
        return result;
      }
    }

    public static class getMyRatedBottles<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMyRatedBottles_args> {
      public getMyRatedBottles() {
        super("getMyRatedBottles");
      }

      public getMyRatedBottles_args getEmptyArgsInstance() {
        return new getMyRatedBottles_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMyRatedBottles_result getResult(I iface, getMyRatedBottles_args args) throws org.apache.thrift.TException {
        getMyRatedBottles_result result = new getMyRatedBottles_result();
        result.success = iface.getMyRatedBottles(args.myBottlesRequest);
        return result;
      }
    }

    public static class getMyNewsFeed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMyNewsFeed_args> {
      public getMyNewsFeed() {
        super("getMyNewsFeed");
      }

      public getMyNewsFeed_args getEmptyArgsInstance() {
        return new getMyNewsFeed_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMyNewsFeed_result getResult(I iface, getMyNewsFeed_args args) throws org.apache.thrift.TException {
        getMyNewsFeed_result result = new getMyNewsFeed_result();
        result.success = iface.getMyNewsFeed(args.newsFeedRequest);
        return result;
      }
    }

    public static class getWineryInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getWineryInfo_args> {
      public getWineryInfo() {
        super("getWineryInfo");
      }

      public getWineryInfo_args getEmptyArgsInstance() {
        return new getWineryInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getWineryInfo_result getResult(I iface, getWineryInfo_args args) throws org.apache.thrift.TException {
        getWineryInfo_result result = new getWineryInfo_result();
        result.success = iface.getWineryInfo(args.wineryInfoRequest);
        return result;
      }
    }

    public static class followUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, followUser_args> {
      public followUser() {
        super("followUser");
      }

      public followUser_args getEmptyArgsInstance() {
        return new followUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public followUser_result getResult(I iface, followUser_args args) throws org.apache.thrift.TException {
        followUser_result result = new followUser_result();
        iface.followUser(args.user, args.userToFollow);
        return result;
      }
    }

    public static class unfollowUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unfollowUser_args> {
      public unfollowUser() {
        super("unfollowUser");
      }

      public unfollowUser_args getEmptyArgsInstance() {
        return new unfollowUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public unfollowUser_result getResult(I iface, unfollowUser_args args) throws org.apache.thrift.TException {
        unfollowUser_result result = new unfollowUser_result();
        iface.unfollowUser(args.user, args.userToUnfollow);
        return result;
      }
    }

    public static class addFriend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addFriend_args> {
      public addFriend() {
        super("addFriend");
      }

      public addFriend_args getEmptyArgsInstance() {
        return new addFriend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addFriend_result getResult(I iface, addFriend_args args) throws org.apache.thrift.TException {
        addFriend_result result = new addFriend_result();
        iface.addFriend(args.user1, args.user2);
        return result;
      }
    }

    public static class getFriendList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFriendList_args> {
      public getFriendList() {
        super("getFriendList");
      }

      public getFriendList_args getEmptyArgsInstance() {
        return new getFriendList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getFriendList_result getResult(I iface, getFriendList_args args) throws org.apache.thrift.TException {
        getFriendList_result result = new getFriendList_result();
        result.success = iface.getFriendList(args.friendListRequest);
        return result;
      }
    }

    public static class searchFriend<I extends Iface> extends org.apache.thrift.ProcessFunction<I, searchFriend_args> {
      public searchFriend() {
        super("searchFriend");
      }

      public searchFriend_args getEmptyArgsInstance() {
        return new searchFriend_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public searchFriend_result getResult(I iface, searchFriend_args args) throws org.apache.thrift.TException {
        searchFriend_result result = new searchFriend_result();
        result.success = iface.searchFriend(args.friendPrefix);
        return result;
      }
    }

    public static class getTagPassword<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTagPassword_args> {
      public getTagPassword() {
        super("getTagPassword");
      }

      public getTagPassword_args getEmptyArgsInstance() {
        return new getTagPassword_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getTagPassword_result getResult(I iface, getTagPassword_args args) throws org.apache.thrift.TException {
        getTagPassword_result result = new getTagPassword_result();
        result.success = iface.getTagPassword(args.tagId);
        return result;
      }
    }

    public static class getMyProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMyProfile_args> {
      public getMyProfile() {
        super("getMyProfile");
      }

      public getMyProfile_args getEmptyArgsInstance() {
        return new getMyProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMyProfile_result getResult(I iface, getMyProfile_args args) throws org.apache.thrift.TException {
        getMyProfile_result result = new getMyProfile_result();
        result.success = iface.getMyProfile(args.requesterId, args.requestedId);
        return result;
      }
    }

    public static class updateMyProfile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateMyProfile_args> {
      public updateMyProfile() {
        super("updateMyProfile");
      }

      public updateMyProfile_args getEmptyArgsInstance() {
        return new updateMyProfile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateMyProfile_result getResult(I iface, updateMyProfile_args args) throws org.apache.thrift.TException {
        updateMyProfile_result result = new updateMyProfile_result();
        result.success = iface.updateMyProfile(args.user);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getMyFollowingList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMyFollowingList_args> {
      public getMyFollowingList() {
        super("getMyFollowingList");
      }

      public getMyFollowingList_args getEmptyArgsInstance() {
        return new getMyFollowingList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMyFollowingList_result getResult(I iface, getMyFollowingList_args args) throws org.apache.thrift.TException {
        getMyFollowingList_result result = new getMyFollowingList_result();
        result.success = iface.getMyFollowingList(args.followingListRequest);
        return result;
      }
    }

    public static class getMyFollowersList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMyFollowersList_args> {
      public getMyFollowersList() {
        super("getMyFollowersList");
      }

      public getMyFollowersList_args getEmptyArgsInstance() {
        return new getMyFollowersList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMyFollowersList_result getResult(I iface, getMyFollowersList_args args) throws org.apache.thrift.TException {
        getMyFollowersList_result result = new getMyFollowersList_result();
        result.success = iface.getMyFollowersList(args.followersListRequest);
        return result;
      }
    }

    public static class setPrivacy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPrivacy_args> {
      public setPrivacy() {
        super("setPrivacy");
      }

      public setPrivacy_args getEmptyArgsInstance() {
        return new setPrivacy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setPrivacy_result getResult(I iface, setPrivacy_args args) throws org.apache.thrift.TException {
        setPrivacy_result result = new setPrivacy_result();
        result.success = iface.setPrivacy(args.userId, args.hideProfileToStranger);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class addRewardPoints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addRewardPoints_args> {
      public addRewardPoints() {
        super("addRewardPoints");
      }

      public addRewardPoints_args getEmptyArgsInstance() {
        return new addRewardPoints_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addRewardPoints_result getResult(I iface, addRewardPoints_args args) throws org.apache.thrift.TException {
        addRewardPoints_result result = new addRewardPoints_result();
        result.success = iface.addRewardPoints(args.addRewardPointsRequest);
        return result;
      }
    }

    public static class getMyRewardPoints<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMyRewardPoints_args> {
      public getMyRewardPoints() {
        super("getMyRewardPoints");
      }

      public getMyRewardPoints_args getEmptyArgsInstance() {
        return new getMyRewardPoints_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMyRewardPoints_result getResult(I iface, getMyRewardPoints_args args) throws org.apache.thrift.TException {
        getMyRewardPoints_result result = new getMyRewardPoints_result();
        result.success = iface.getMyRewardPoints(args.userId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getRewardItemList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRewardItemList_args> {
      public getRewardItemList() {
        super("getRewardItemList");
      }

      public getRewardItemList_args getEmptyArgsInstance() {
        return new getRewardItemList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRewardItemList_result getResult(I iface, getRewardItemList_args args) throws org.apache.thrift.TException {
        getRewardItemList_result result = new getRewardItemList_result();
        result.success = iface.getRewardItemList(args.rewardItemRequest);
        return result;
      }
    }

    public static class rewardRedeem<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rewardRedeem_args> {
      public rewardRedeem() {
        super("rewardRedeem");
      }

      public rewardRedeem_args getEmptyArgsInstance() {
        return new rewardRedeem_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rewardRedeem_result getResult(I iface, rewardRedeem_args args) throws org.apache.thrift.TException {
        rewardRedeem_result result = new rewardRedeem_result();
        result.success = iface.rewardRedeem(args.rewardRedeemRequest);
        return result;
      }
    }

    public static class getUserPhoto<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUserPhoto_args> {
      public getUserPhoto() {
        super("getUserPhoto");
      }

      public getUserPhoto_args getEmptyArgsInstance() {
        return new getUserPhoto_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUserPhoto_result getResult(I iface, getUserPhoto_args args) throws org.apache.thrift.TException {
        getUserPhoto_result result = new getUserPhoto_result();
        result.success = iface.getUserPhoto(args.userId);
        return result;
      }
    }

    public static class getMyWishlist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMyWishlist_args> {
      public getMyWishlist() {
        super("getMyWishlist");
      }

      public getMyWishlist_args getEmptyArgsInstance() {
        return new getMyWishlist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMyWishlist_result getResult(I iface, getMyWishlist_args args) throws org.apache.thrift.TException {
        getMyWishlist_result result = new getMyWishlist_result();
        result.success = iface.getMyWishlist(args.myBottlesRequest);
        return result;
      }
    }

    public static class addToWishlist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addToWishlist_args> {
      public addToWishlist() {
        super("addToWishlist");
      }

      public addToWishlist_args getEmptyArgsInstance() {
        return new addToWishlist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addToWishlist_result getResult(I iface, addToWishlist_args args) throws org.apache.thrift.TException {
        addToWishlist_result result = new addToWishlist_result();
        result.success = iface.addToWishlist(args.addToWishlistRequest);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class isInWishlist<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isInWishlist_args> {
      public isInWishlist() {
        super("isInWishlist");
      }

      public isInWishlist_args getEmptyArgsInstance() {
        return new isInWishlist_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isInWishlist_result getResult(I iface, isInWishlist_args args) throws org.apache.thrift.TException {
        isInWishlist_result result = new isInWishlist_result();
        result.success = iface.isInWishlist(args.userId, args.wineId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("login", new login());
      processMap.put("loginWechat", new loginWechat());
      processMap.put("registration", new registration());
      processMap.put("sendActivateEmail", new sendActivateEmail());
      processMap.put("activateAccount", new activateAccount());
      processMap.put("findPassword", new findPassword());
      processMap.put("authentication", new authentication());
      processMap.put("openBottle", new openBottle());
      processMap.put("getBasicInfo", new getBasicInfo());
      processMap.put("getWineReviewAndRating", new getWineReviewAndRating());
      processMap.put("writeWineReviewAndRating", new writeWineReviewAndRating());
      processMap.put("getMyRateRecord", new getMyRateRecord());
      processMap.put("getMyOpenedBottles", new getMyOpenedBottles());
      processMap.put("getMyScannedBottles", new getMyScannedBottles());
      processMap.put("getMyRatedBottles", new getMyRatedBottles());
      processMap.put("getMyNewsFeed", new getMyNewsFeed());
      processMap.put("getWineryInfo", new getWineryInfo());
      processMap.put("followUser", new followUser());
      processMap.put("unfollowUser", new unfollowUser());
      processMap.put("addFriend", new addFriend());
      processMap.put("getFriendList", new getFriendList());
      processMap.put("searchFriend", new searchFriend());
      processMap.put("getTagPassword", new getTagPassword());
      processMap.put("getMyProfile", new getMyProfile());
      processMap.put("updateMyProfile", new updateMyProfile());
      processMap.put("getMyFollowingList", new getMyFollowingList());
      processMap.put("getMyFollowersList", new getMyFollowersList());
      processMap.put("setPrivacy", new setPrivacy());
      processMap.put("addRewardPoints", new addRewardPoints());
      processMap.put("getMyRewardPoints", new getMyRewardPoints());
      processMap.put("getRewardItemList", new getRewardItemList());
      processMap.put("rewardRedeem", new rewardRedeem());
      processMap.put("getUserPhoto", new getUserPhoto());
      processMap.put("getMyWishlist", new getMyWishlist());
      processMap.put("addToWishlist", new addToWishlist());
      processMap.put("isInWishlist", new isInWishlist());
      return processMap;
    }

    public static class login<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, login_args, LoginResult> {
      public login() {
        super("login");
      }

      public login_args getEmptyArgsInstance() {
        return new login_args();
      }

      public AsyncMethodCallback<LoginResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LoginResult>() { 
          public void onComplete(LoginResult o) {
            login_result result = new login_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            login_result result = new login_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, login_args args, org.apache.thrift.async.AsyncMethodCallback<LoginResult> resultHandler) throws TException {
        iface.login(args.user,resultHandler);
      }
    }

    public static class loginWechat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loginWechat_args, LoginResult> {
      public loginWechat() {
        super("loginWechat");
      }

      public loginWechat_args getEmptyArgsInstance() {
        return new loginWechat_args();
      }

      public AsyncMethodCallback<LoginResult> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LoginResult>() { 
          public void onComplete(LoginResult o) {
            loginWechat_result result = new loginWechat_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            loginWechat_result result = new loginWechat_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loginWechat_args args, org.apache.thrift.async.AsyncMethodCallback<LoginResult> resultHandler) throws TException {
        iface.loginWechat(args.wechatLoginInfo,resultHandler);
      }
    }

    public static class registration<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registration_args, RegistrationStatus> {
      public registration() {
        super("registration");
      }

      public registration_args getEmptyArgsInstance() {
        return new registration_args();
      }

      public AsyncMethodCallback<RegistrationStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RegistrationStatus>() { 
          public void onComplete(RegistrationStatus o) {
            registration_result result = new registration_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registration_result result = new registration_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registration_args args, org.apache.thrift.async.AsyncMethodCallback<RegistrationStatus> resultHandler) throws TException {
        iface.registration(args.user,resultHandler);
      }
    }

    public static class sendActivateEmail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendActivateEmail_args, Boolean> {
      public sendActivateEmail() {
        super("sendActivateEmail");
      }

      public sendActivateEmail_args getEmptyArgsInstance() {
        return new sendActivateEmail_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            sendActivateEmail_result result = new sendActivateEmail_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendActivateEmail_result result = new sendActivateEmail_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendActivateEmail_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.sendActivateEmail(args.userId,resultHandler);
      }
    }

    public static class activateAccount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, activateAccount_args, Boolean> {
      public activateAccount() {
        super("activateAccount");
      }

      public activateAccount_args getEmptyArgsInstance() {
        return new activateAccount_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            activateAccount_result result = new activateAccount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            activateAccount_result result = new activateAccount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, activateAccount_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.activateAccount(args.userId, args.activate,resultHandler);
      }
    }

    public static class findPassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findPassword_args, FindPasswordStatus> {
      public findPassword() {
        super("findPassword");
      }

      public findPassword_args getEmptyArgsInstance() {
        return new findPassword_args();
      }

      public AsyncMethodCallback<FindPasswordStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FindPasswordStatus>() { 
          public void onComplete(FindPasswordStatus o) {
            findPassword_result result = new findPassword_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findPassword_result result = new findPassword_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findPassword_args args, org.apache.thrift.async.AsyncMethodCallback<FindPasswordStatus> resultHandler) throws TException {
        iface.findPassword(args.user,resultHandler);
      }
    }

    public static class authentication<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, authentication_args, WineInfo> {
      public authentication() {
        super("authentication");
      }

      public authentication_args getEmptyArgsInstance() {
        return new authentication_args();
      }

      public AsyncMethodCallback<WineInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<WineInfo>() { 
          public void onComplete(WineInfo o) {
            authentication_result result = new authentication_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            authentication_result result = new authentication_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, authentication_args args, org.apache.thrift.async.AsyncMethodCallback<WineInfo> resultHandler) throws TException {
        iface.authentication(args.tagInfo, args.userId,resultHandler);
      }
    }

    public static class openBottle<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, openBottle_args, Boolean> {
      public openBottle() {
        super("openBottle");
      }

      public openBottle_args getEmptyArgsInstance() {
        return new openBottle_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            openBottle_result result = new openBottle_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            openBottle_result result = new openBottle_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, openBottle_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.openBottle(args.bottleOpenInfo,resultHandler);
      }
    }

    public static class getBasicInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getBasicInfo_args, WineBasicInfoResponse> {
      public getBasicInfo() {
        super("getBasicInfo");
      }

      public getBasicInfo_args getEmptyArgsInstance() {
        return new getBasicInfo_args();
      }

      public AsyncMethodCallback<WineBasicInfoResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<WineBasicInfoResponse>() { 
          public void onComplete(WineBasicInfoResponse o) {
            getBasicInfo_result result = new getBasicInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getBasicInfo_result result = new getBasicInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getBasicInfo_args args, org.apache.thrift.async.AsyncMethodCallback<WineBasicInfoResponse> resultHandler) throws TException {
        iface.getBasicInfo(args.wineBasicInfoRequest,resultHandler);
      }
    }

    public static class getWineReviewAndRating<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWineReviewAndRating_args, WineReviewAndRatingReadResponse> {
      public getWineReviewAndRating() {
        super("getWineReviewAndRating");
      }

      public getWineReviewAndRating_args getEmptyArgsInstance() {
        return new getWineReviewAndRating_args();
      }

      public AsyncMethodCallback<WineReviewAndRatingReadResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<WineReviewAndRatingReadResponse>() { 
          public void onComplete(WineReviewAndRatingReadResponse o) {
            getWineReviewAndRating_result result = new getWineReviewAndRating_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWineReviewAndRating_result result = new getWineReviewAndRating_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWineReviewAndRating_args args, org.apache.thrift.async.AsyncMethodCallback<WineReviewAndRatingReadResponse> resultHandler) throws TException {
        iface.getWineReviewAndRating(args.wineReviewAndRatingReadRequest,resultHandler);
      }
    }

    public static class writeWineReviewAndRating<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeWineReviewAndRating_args, WineReviewAndRatingWriteResponse> {
      public writeWineReviewAndRating() {
        super("writeWineReviewAndRating");
      }

      public writeWineReviewAndRating_args getEmptyArgsInstance() {
        return new writeWineReviewAndRating_args();
      }

      public AsyncMethodCallback<WineReviewAndRatingWriteResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<WineReviewAndRatingWriteResponse>() { 
          public void onComplete(WineReviewAndRatingWriteResponse o) {
            writeWineReviewAndRating_result result = new writeWineReviewAndRating_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            writeWineReviewAndRating_result result = new writeWineReviewAndRating_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeWineReviewAndRating_args args, org.apache.thrift.async.AsyncMethodCallback<WineReviewAndRatingWriteResponse> resultHandler) throws TException {
        iface.writeWineReviewAndRating(args.wineReviewAndRatingWriteRequest,resultHandler);
      }
    }

    public static class getMyRateRecord<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMyRateRecord_args, MyRateRecordResponse> {
      public getMyRateRecord() {
        super("getMyRateRecord");
      }

      public getMyRateRecord_args getEmptyArgsInstance() {
        return new getMyRateRecord_args();
      }

      public AsyncMethodCallback<MyRateRecordResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MyRateRecordResponse>() { 
          public void onComplete(MyRateRecordResponse o) {
            getMyRateRecord_result result = new getMyRateRecord_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMyRateRecord_result result = new getMyRateRecord_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMyRateRecord_args args, org.apache.thrift.async.AsyncMethodCallback<MyRateRecordResponse> resultHandler) throws TException {
        iface.getMyRateRecord(args.myRateRecordRequest,resultHandler);
      }
    }

    public static class getMyOpenedBottles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMyOpenedBottles_args, OpenedBottlesResponse> {
      public getMyOpenedBottles() {
        super("getMyOpenedBottles");
      }

      public getMyOpenedBottles_args getEmptyArgsInstance() {
        return new getMyOpenedBottles_args();
      }

      public AsyncMethodCallback<OpenedBottlesResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<OpenedBottlesResponse>() { 
          public void onComplete(OpenedBottlesResponse o) {
            getMyOpenedBottles_result result = new getMyOpenedBottles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMyOpenedBottles_result result = new getMyOpenedBottles_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMyOpenedBottles_args args, org.apache.thrift.async.AsyncMethodCallback<OpenedBottlesResponse> resultHandler) throws TException {
        iface.getMyOpenedBottles(args.myBottlesRequest,resultHandler);
      }
    }

    public static class getMyScannedBottles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMyScannedBottles_args, ScannedBottlesResponse> {
      public getMyScannedBottles() {
        super("getMyScannedBottles");
      }

      public getMyScannedBottles_args getEmptyArgsInstance() {
        return new getMyScannedBottles_args();
      }

      public AsyncMethodCallback<ScannedBottlesResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ScannedBottlesResponse>() { 
          public void onComplete(ScannedBottlesResponse o) {
            getMyScannedBottles_result result = new getMyScannedBottles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMyScannedBottles_result result = new getMyScannedBottles_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMyScannedBottles_args args, org.apache.thrift.async.AsyncMethodCallback<ScannedBottlesResponse> resultHandler) throws TException {
        iface.getMyScannedBottles(args.myBottlesRequest,resultHandler);
      }
    }

    public static class getMyRatedBottles<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMyRatedBottles_args, RatedBottlesResponse> {
      public getMyRatedBottles() {
        super("getMyRatedBottles");
      }

      public getMyRatedBottles_args getEmptyArgsInstance() {
        return new getMyRatedBottles_args();
      }

      public AsyncMethodCallback<RatedBottlesResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RatedBottlesResponse>() { 
          public void onComplete(RatedBottlesResponse o) {
            getMyRatedBottles_result result = new getMyRatedBottles_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMyRatedBottles_result result = new getMyRatedBottles_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMyRatedBottles_args args, org.apache.thrift.async.AsyncMethodCallback<RatedBottlesResponse> resultHandler) throws TException {
        iface.getMyRatedBottles(args.myBottlesRequest,resultHandler);
      }
    }

    public static class getMyNewsFeed<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMyNewsFeed_args, NewsFeedResponse> {
      public getMyNewsFeed() {
        super("getMyNewsFeed");
      }

      public getMyNewsFeed_args getEmptyArgsInstance() {
        return new getMyNewsFeed_args();
      }

      public AsyncMethodCallback<NewsFeedResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<NewsFeedResponse>() { 
          public void onComplete(NewsFeedResponse o) {
            getMyNewsFeed_result result = new getMyNewsFeed_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMyNewsFeed_result result = new getMyNewsFeed_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMyNewsFeed_args args, org.apache.thrift.async.AsyncMethodCallback<NewsFeedResponse> resultHandler) throws TException {
        iface.getMyNewsFeed(args.newsFeedRequest,resultHandler);
      }
    }

    public static class getWineryInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getWineryInfo_args, WineryInfoResponse> {
      public getWineryInfo() {
        super("getWineryInfo");
      }

      public getWineryInfo_args getEmptyArgsInstance() {
        return new getWineryInfo_args();
      }

      public AsyncMethodCallback<WineryInfoResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<WineryInfoResponse>() { 
          public void onComplete(WineryInfoResponse o) {
            getWineryInfo_result result = new getWineryInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getWineryInfo_result result = new getWineryInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getWineryInfo_args args, org.apache.thrift.async.AsyncMethodCallback<WineryInfoResponse> resultHandler) throws TException {
        iface.getWineryInfo(args.wineryInfoRequest,resultHandler);
      }
    }

    public static class followUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, followUser_args, Void> {
      public followUser() {
        super("followUser");
      }

      public followUser_args getEmptyArgsInstance() {
        return new followUser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            followUser_result result = new followUser_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            followUser_result result = new followUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, followUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.followUser(args.user, args.userToFollow,resultHandler);
      }
    }

    public static class unfollowUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unfollowUser_args, Void> {
      public unfollowUser() {
        super("unfollowUser");
      }

      public unfollowUser_args getEmptyArgsInstance() {
        return new unfollowUser_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            unfollowUser_result result = new unfollowUser_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unfollowUser_result result = new unfollowUser_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, unfollowUser_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.unfollowUser(args.user, args.userToUnfollow,resultHandler);
      }
    }

    public static class addFriend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addFriend_args, Void> {
      public addFriend() {
        super("addFriend");
      }

      public addFriend_args getEmptyArgsInstance() {
        return new addFriend_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            addFriend_result result = new addFriend_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addFriend_result result = new addFriend_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addFriend_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.addFriend(args.user1, args.user2,resultHandler);
      }
    }

    public static class getFriendList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFriendList_args, FriendListResponse> {
      public getFriendList() {
        super("getFriendList");
      }

      public getFriendList_args getEmptyArgsInstance() {
        return new getFriendList_args();
      }

      public AsyncMethodCallback<FriendListResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FriendListResponse>() { 
          public void onComplete(FriendListResponse o) {
            getFriendList_result result = new getFriendList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getFriendList_result result = new getFriendList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFriendList_args args, org.apache.thrift.async.AsyncMethodCallback<FriendListResponse> resultHandler) throws TException {
        iface.getFriendList(args.friendListRequest,resultHandler);
      }
    }

    public static class searchFriend<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, searchFriend_args, FriendListResponse> {
      public searchFriend() {
        super("searchFriend");
      }

      public searchFriend_args getEmptyArgsInstance() {
        return new searchFriend_args();
      }

      public AsyncMethodCallback<FriendListResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<FriendListResponse>() { 
          public void onComplete(FriendListResponse o) {
            searchFriend_result result = new searchFriend_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            searchFriend_result result = new searchFriend_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, searchFriend_args args, org.apache.thrift.async.AsyncMethodCallback<FriendListResponse> resultHandler) throws TException {
        iface.searchFriend(args.friendPrefix,resultHandler);
      }
    }

    public static class getTagPassword<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTagPassword_args, String> {
      public getTagPassword() {
        super("getTagPassword");
      }

      public getTagPassword_args getEmptyArgsInstance() {
        return new getTagPassword_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            getTagPassword_result result = new getTagPassword_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getTagPassword_result result = new getTagPassword_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTagPassword_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.getTagPassword(args.tagId,resultHandler);
      }
    }

    public static class getMyProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMyProfile_args, MyProfile> {
      public getMyProfile() {
        super("getMyProfile");
      }

      public getMyProfile_args getEmptyArgsInstance() {
        return new getMyProfile_args();
      }

      public AsyncMethodCallback<MyProfile> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MyProfile>() { 
          public void onComplete(MyProfile o) {
            getMyProfile_result result = new getMyProfile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMyProfile_result result = new getMyProfile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMyProfile_args args, org.apache.thrift.async.AsyncMethodCallback<MyProfile> resultHandler) throws TException {
        iface.getMyProfile(args.requesterId, args.requestedId,resultHandler);
      }
    }

    public static class updateMyProfile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateMyProfile_args, Boolean> {
      public updateMyProfile() {
        super("updateMyProfile");
      }

      public updateMyProfile_args getEmptyArgsInstance() {
        return new updateMyProfile_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            updateMyProfile_result result = new updateMyProfile_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateMyProfile_result result = new updateMyProfile_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateMyProfile_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.updateMyProfile(args.user,resultHandler);
      }
    }

    public static class getMyFollowingList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMyFollowingList_args, MyFollowingListResponse> {
      public getMyFollowingList() {
        super("getMyFollowingList");
      }

      public getMyFollowingList_args getEmptyArgsInstance() {
        return new getMyFollowingList_args();
      }

      public AsyncMethodCallback<MyFollowingListResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MyFollowingListResponse>() { 
          public void onComplete(MyFollowingListResponse o) {
            getMyFollowingList_result result = new getMyFollowingList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMyFollowingList_result result = new getMyFollowingList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMyFollowingList_args args, org.apache.thrift.async.AsyncMethodCallback<MyFollowingListResponse> resultHandler) throws TException {
        iface.getMyFollowingList(args.followingListRequest,resultHandler);
      }
    }

    public static class getMyFollowersList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMyFollowersList_args, MyFollowersListResponse> {
      public getMyFollowersList() {
        super("getMyFollowersList");
      }

      public getMyFollowersList_args getEmptyArgsInstance() {
        return new getMyFollowersList_args();
      }

      public AsyncMethodCallback<MyFollowersListResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MyFollowersListResponse>() { 
          public void onComplete(MyFollowersListResponse o) {
            getMyFollowersList_result result = new getMyFollowersList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMyFollowersList_result result = new getMyFollowersList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMyFollowersList_args args, org.apache.thrift.async.AsyncMethodCallback<MyFollowersListResponse> resultHandler) throws TException {
        iface.getMyFollowersList(args.followersListRequest,resultHandler);
      }
    }

    public static class setPrivacy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setPrivacy_args, Boolean> {
      public setPrivacy() {
        super("setPrivacy");
      }

      public setPrivacy_args getEmptyArgsInstance() {
        return new setPrivacy_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setPrivacy_result result = new setPrivacy_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setPrivacy_result result = new setPrivacy_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setPrivacy_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setPrivacy(args.userId, args.hideProfileToStranger,resultHandler);
      }
    }

    public static class addRewardPoints<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addRewardPoints_args, AddRewardPointsResponse> {
      public addRewardPoints() {
        super("addRewardPoints");
      }

      public addRewardPoints_args getEmptyArgsInstance() {
        return new addRewardPoints_args();
      }

      public AsyncMethodCallback<AddRewardPointsResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<AddRewardPointsResponse>() { 
          public void onComplete(AddRewardPointsResponse o) {
            addRewardPoints_result result = new addRewardPoints_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addRewardPoints_result result = new addRewardPoints_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addRewardPoints_args args, org.apache.thrift.async.AsyncMethodCallback<AddRewardPointsResponse> resultHandler) throws TException {
        iface.addRewardPoints(args.addRewardPointsRequest,resultHandler);
      }
    }

    public static class getMyRewardPoints<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMyRewardPoints_args, Integer> {
      public getMyRewardPoints() {
        super("getMyRewardPoints");
      }

      public getMyRewardPoints_args getEmptyArgsInstance() {
        return new getMyRewardPoints_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            getMyRewardPoints_result result = new getMyRewardPoints_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMyRewardPoints_result result = new getMyRewardPoints_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMyRewardPoints_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.getMyRewardPoints(args.userId,resultHandler);
      }
    }

    public static class getRewardItemList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRewardItemList_args, RewardItemResponse> {
      public getRewardItemList() {
        super("getRewardItemList");
      }

      public getRewardItemList_args getEmptyArgsInstance() {
        return new getRewardItemList_args();
      }

      public AsyncMethodCallback<RewardItemResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RewardItemResponse>() { 
          public void onComplete(RewardItemResponse o) {
            getRewardItemList_result result = new getRewardItemList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRewardItemList_result result = new getRewardItemList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRewardItemList_args args, org.apache.thrift.async.AsyncMethodCallback<RewardItemResponse> resultHandler) throws TException {
        iface.getRewardItemList(args.rewardItemRequest,resultHandler);
      }
    }

    public static class rewardRedeem<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rewardRedeem_args, RewardRedeemResponse> {
      public rewardRedeem() {
        super("rewardRedeem");
      }

      public rewardRedeem_args getEmptyArgsInstance() {
        return new rewardRedeem_args();
      }

      public AsyncMethodCallback<RewardRedeemResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RewardRedeemResponse>() { 
          public void onComplete(RewardRedeemResponse o) {
            rewardRedeem_result result = new rewardRedeem_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rewardRedeem_result result = new rewardRedeem_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rewardRedeem_args args, org.apache.thrift.async.AsyncMethodCallback<RewardRedeemResponse> resultHandler) throws TException {
        iface.rewardRedeem(args.rewardRedeemRequest,resultHandler);
      }
    }

    public static class getUserPhoto<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUserPhoto_args, UserPhotoResponse> {
      public getUserPhoto() {
        super("getUserPhoto");
      }

      public getUserPhoto_args getEmptyArgsInstance() {
        return new getUserPhoto_args();
      }

      public AsyncMethodCallback<UserPhotoResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<UserPhotoResponse>() { 
          public void onComplete(UserPhotoResponse o) {
            getUserPhoto_result result = new getUserPhoto_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getUserPhoto_result result = new getUserPhoto_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUserPhoto_args args, org.apache.thrift.async.AsyncMethodCallback<UserPhotoResponse> resultHandler) throws TException {
        iface.getUserPhoto(args.userId,resultHandler);
      }
    }

    public static class getMyWishlist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMyWishlist_args, MyWishListResponse> {
      public getMyWishlist() {
        super("getMyWishlist");
      }

      public getMyWishlist_args getEmptyArgsInstance() {
        return new getMyWishlist_args();
      }

      public AsyncMethodCallback<MyWishListResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<MyWishListResponse>() { 
          public void onComplete(MyWishListResponse o) {
            getMyWishlist_result result = new getMyWishlist_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getMyWishlist_result result = new getMyWishlist_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMyWishlist_args args, org.apache.thrift.async.AsyncMethodCallback<MyWishListResponse> resultHandler) throws TException {
        iface.getMyWishlist(args.myBottlesRequest,resultHandler);
      }
    }

    public static class addToWishlist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addToWishlist_args, Boolean> {
      public addToWishlist() {
        super("addToWishlist");
      }

      public addToWishlist_args getEmptyArgsInstance() {
        return new addToWishlist_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            addToWishlist_result result = new addToWishlist_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            addToWishlist_result result = new addToWishlist_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addToWishlist_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.addToWishlist(args.addToWishlistRequest,resultHandler);
      }
    }

    public static class isInWishlist<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isInWishlist_args, IsInWishlistResponse> {
      public isInWishlist() {
        super("isInWishlist");
      }

      public isInWishlist_args getEmptyArgsInstance() {
        return new isInWishlist_args();
      }

      public AsyncMethodCallback<IsInWishlistResponse> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<IsInWishlistResponse>() { 
          public void onComplete(IsInWishlistResponse o) {
            isInWishlist_result result = new isInWishlist_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            isInWishlist_result result = new isInWishlist_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isInWishlist_args args, org.apache.thrift.async.AsyncMethodCallback<IsInWishlistResponse> resultHandler) throws TException {
        iface.isInWishlist(args.userId, args.wineId,resultHandler);
      }
    }

  }

  public static class login_args implements org.apache.thrift.TBase<login_args, login_args._Fields>, java.io.Serializable, Cloneable, Comparable<login_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new login_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new login_argsTupleSchemeFactory());
    }

    public User user; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_args.class, metaDataMap);
    }

    public login_args() {
    }

    public login_args(
      User user)
    {
      this();
      this.user = user;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_args(login_args other) {
      if (other.isSetUser()) {
        this.user = new User(other.user);
      }
    }

    public login_args deepCopy() {
      return new login_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
    }

    public User getUser() {
      return this.user;
    }

    public login_args setUser(User user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((User)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof login_args)
        return this.equals((login_args)that);
      return false;
    }

    public boolean equals(login_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user = true && (isSetUser());
      list.add(present_user);
      if (present_user)
        list.add(user);

      return list.hashCode();
    }

    @Override
    public int compareTo(login_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("login_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_argsStandardSchemeFactory implements SchemeFactory {
      public login_argsStandardScheme getScheme() {
        return new login_argsStandardScheme();
      }
    }

    private static class login_argsStandardScheme extends StandardScheme<login_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new User();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_argsTupleSchemeFactory implements SchemeFactory {
      public login_argsTupleScheme getScheme() {
        return new login_argsTupleScheme();
      }
    }

    private static class login_argsTupleScheme extends TupleScheme<login_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user = new User();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class login_result implements org.apache.thrift.TBase<login_result, login_result._Fields>, java.io.Serializable, Cloneable, Comparable<login_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("login_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new login_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new login_resultTupleSchemeFactory());
    }

    public LoginResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoginResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(login_result.class, metaDataMap);
    }

    public login_result() {
    }

    public login_result(
      LoginResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public login_result(login_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoginResult(other.success);
      }
    }

    public login_result deepCopy() {
      return new login_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public LoginResult getSuccess() {
      return this.success;
    }

    public login_result setSuccess(LoginResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LoginResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof login_result)
        return this.equals((login_result)that);
      return false;
    }

    public boolean equals(login_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(login_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("login_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class login_resultStandardSchemeFactory implements SchemeFactory {
      public login_resultStandardScheme getScheme() {
        return new login_resultStandardScheme();
      }
    }

    private static class login_resultStandardScheme extends StandardScheme<login_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, login_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LoginResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, login_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class login_resultTupleSchemeFactory implements SchemeFactory {
      public login_resultTupleScheme getScheme() {
        return new login_resultTupleScheme();
      }
    }

    private static class login_resultTupleScheme extends TupleScheme<login_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, login_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new LoginResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class loginWechat_args implements org.apache.thrift.TBase<loginWechat_args, loginWechat_args._Fields>, java.io.Serializable, Cloneable, Comparable<loginWechat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginWechat_args");

    private static final org.apache.thrift.protocol.TField WECHAT_LOGIN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("wechatLoginInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loginWechat_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loginWechat_argsTupleSchemeFactory());
    }

    public WechatLoginInfo wechatLoginInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WECHAT_LOGIN_INFO((short)1, "wechatLoginInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WECHAT_LOGIN_INFO
            return WECHAT_LOGIN_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WECHAT_LOGIN_INFO, new org.apache.thrift.meta_data.FieldMetaData("wechatLoginInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WechatLoginInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginWechat_args.class, metaDataMap);
    }

    public loginWechat_args() {
    }

    public loginWechat_args(
      WechatLoginInfo wechatLoginInfo)
    {
      this();
      this.wechatLoginInfo = wechatLoginInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginWechat_args(loginWechat_args other) {
      if (other.isSetWechatLoginInfo()) {
        this.wechatLoginInfo = new WechatLoginInfo(other.wechatLoginInfo);
      }
    }

    public loginWechat_args deepCopy() {
      return new loginWechat_args(this);
    }

    @Override
    public void clear() {
      this.wechatLoginInfo = null;
    }

    public WechatLoginInfo getWechatLoginInfo() {
      return this.wechatLoginInfo;
    }

    public loginWechat_args setWechatLoginInfo(WechatLoginInfo wechatLoginInfo) {
      this.wechatLoginInfo = wechatLoginInfo;
      return this;
    }

    public void unsetWechatLoginInfo() {
      this.wechatLoginInfo = null;
    }

    /** Returns true if field wechatLoginInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetWechatLoginInfo() {
      return this.wechatLoginInfo != null;
    }

    public void setWechatLoginInfoIsSet(boolean value) {
      if (!value) {
        this.wechatLoginInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WECHAT_LOGIN_INFO:
        if (value == null) {
          unsetWechatLoginInfo();
        } else {
          setWechatLoginInfo((WechatLoginInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WECHAT_LOGIN_INFO:
        return getWechatLoginInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WECHAT_LOGIN_INFO:
        return isSetWechatLoginInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginWechat_args)
        return this.equals((loginWechat_args)that);
      return false;
    }

    public boolean equals(loginWechat_args that) {
      if (that == null)
        return false;

      boolean this_present_wechatLoginInfo = true && this.isSetWechatLoginInfo();
      boolean that_present_wechatLoginInfo = true && that.isSetWechatLoginInfo();
      if (this_present_wechatLoginInfo || that_present_wechatLoginInfo) {
        if (!(this_present_wechatLoginInfo && that_present_wechatLoginInfo))
          return false;
        if (!this.wechatLoginInfo.equals(that.wechatLoginInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_wechatLoginInfo = true && (isSetWechatLoginInfo());
      list.add(present_wechatLoginInfo);
      if (present_wechatLoginInfo)
        list.add(wechatLoginInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(loginWechat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWechatLoginInfo()).compareTo(other.isSetWechatLoginInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWechatLoginInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wechatLoginInfo, other.wechatLoginInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginWechat_args(");
      boolean first = true;

      sb.append("wechatLoginInfo:");
      if (this.wechatLoginInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.wechatLoginInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (wechatLoginInfo != null) {
        wechatLoginInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginWechat_argsStandardSchemeFactory implements SchemeFactory {
      public loginWechat_argsStandardScheme getScheme() {
        return new loginWechat_argsStandardScheme();
      }
    }

    private static class loginWechat_argsStandardScheme extends StandardScheme<loginWechat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginWechat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WECHAT_LOGIN_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.wechatLoginInfo = new WechatLoginInfo();
                struct.wechatLoginInfo.read(iprot);
                struct.setWechatLoginInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginWechat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.wechatLoginInfo != null) {
          oprot.writeFieldBegin(WECHAT_LOGIN_INFO_FIELD_DESC);
          struct.wechatLoginInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginWechat_argsTupleSchemeFactory implements SchemeFactory {
      public loginWechat_argsTupleScheme getScheme() {
        return new loginWechat_argsTupleScheme();
      }
    }

    private static class loginWechat_argsTupleScheme extends TupleScheme<loginWechat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginWechat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWechatLoginInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWechatLoginInfo()) {
          struct.wechatLoginInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginWechat_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.wechatLoginInfo = new WechatLoginInfo();
          struct.wechatLoginInfo.read(iprot);
          struct.setWechatLoginInfoIsSet(true);
        }
      }
    }

  }

  public static class loginWechat_result implements org.apache.thrift.TBase<loginWechat_result, loginWechat_result._Fields>, java.io.Serializable, Cloneable, Comparable<loginWechat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginWechat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new loginWechat_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new loginWechat_resultTupleSchemeFactory());
    }

    public LoginResult success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LoginResult.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginWechat_result.class, metaDataMap);
    }

    public loginWechat_result() {
    }

    public loginWechat_result(
      LoginResult success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginWechat_result(loginWechat_result other) {
      if (other.isSetSuccess()) {
        this.success = new LoginResult(other.success);
      }
    }

    public loginWechat_result deepCopy() {
      return new loginWechat_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public LoginResult getSuccess() {
      return this.success;
    }

    public loginWechat_result setSuccess(LoginResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LoginResult)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof loginWechat_result)
        return this.equals((loginWechat_result)that);
      return false;
    }

    public boolean equals(loginWechat_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(loginWechat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("loginWechat_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginWechat_resultStandardSchemeFactory implements SchemeFactory {
      public loginWechat_resultStandardScheme getScheme() {
        return new loginWechat_resultStandardScheme();
      }
    }

    private static class loginWechat_resultStandardScheme extends StandardScheme<loginWechat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginWechat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LoginResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginWechat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginWechat_resultTupleSchemeFactory implements SchemeFactory {
      public loginWechat_resultTupleScheme getScheme() {
        return new loginWechat_resultTupleScheme();
      }
    }

    private static class loginWechat_resultTupleScheme extends TupleScheme<loginWechat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginWechat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginWechat_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new LoginResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class registration_args implements org.apache.thrift.TBase<registration_args, registration_args._Fields>, java.io.Serializable, Cloneable, Comparable<registration_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registration_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registration_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registration_argsTupleSchemeFactory());
    }

    public User user; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registration_args.class, metaDataMap);
    }

    public registration_args() {
    }

    public registration_args(
      User user)
    {
      this();
      this.user = user;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registration_args(registration_args other) {
      if (other.isSetUser()) {
        this.user = new User(other.user);
      }
    }

    public registration_args deepCopy() {
      return new registration_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
    }

    public User getUser() {
      return this.user;
    }

    public registration_args setUser(User user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((User)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registration_args)
        return this.equals((registration_args)that);
      return false;
    }

    public boolean equals(registration_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user = true && (isSetUser());
      list.add(present_user);
      if (present_user)
        list.add(user);

      return list.hashCode();
    }

    @Override
    public int compareTo(registration_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registration_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registration_argsStandardSchemeFactory implements SchemeFactory {
      public registration_argsStandardScheme getScheme() {
        return new registration_argsStandardScheme();
      }
    }

    private static class registration_argsStandardScheme extends StandardScheme<registration_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registration_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new User();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registration_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registration_argsTupleSchemeFactory implements SchemeFactory {
      public registration_argsTupleScheme getScheme() {
        return new registration_argsTupleScheme();
      }
    }

    private static class registration_argsTupleScheme extends TupleScheme<registration_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registration_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user = new User();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class registration_result implements org.apache.thrift.TBase<registration_result, registration_result._Fields>, java.io.Serializable, Cloneable, Comparable<registration_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registration_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registration_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registration_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see RegistrationStatus
     */
    public RegistrationStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see RegistrationStatus
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RegistrationStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registration_result.class, metaDataMap);
    }

    public registration_result() {
    }

    public registration_result(
      RegistrationStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registration_result(registration_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public registration_result deepCopy() {
      return new registration_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see RegistrationStatus
     */
    public RegistrationStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see RegistrationStatus
     */
    public registration_result setSuccess(RegistrationStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RegistrationStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registration_result)
        return this.equals((registration_result)that);
      return false;
    }

    public boolean equals(registration_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(registration_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registration_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registration_resultStandardSchemeFactory implements SchemeFactory {
      public registration_resultStandardScheme getScheme() {
        return new registration_resultStandardScheme();
      }
    }

    private static class registration_resultStandardScheme extends StandardScheme<registration_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registration_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = co.tagtalk.winemate.thriftfiles.RegistrationStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registration_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registration_resultTupleSchemeFactory implements SchemeFactory {
      public registration_resultTupleScheme getScheme() {
        return new registration_resultTupleScheme();
      }
    }

    private static class registration_resultTupleScheme extends TupleScheme<registration_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registration_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = co.tagtalk.winemate.thriftfiles.RegistrationStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class sendActivateEmail_args implements org.apache.thrift.TBase<sendActivateEmail_args, sendActivateEmail_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendActivateEmail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendActivateEmail_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendActivateEmail_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendActivateEmail_argsTupleSchemeFactory());
    }

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendActivateEmail_args.class, metaDataMap);
    }

    public sendActivateEmail_args() {
    }

    public sendActivateEmail_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendActivateEmail_args(sendActivateEmail_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public sendActivateEmail_args deepCopy() {
      return new sendActivateEmail_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public sendActivateEmail_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendActivateEmail_args)
        return this.equals((sendActivateEmail_args)that);
      return false;
    }

    public boolean equals(sendActivateEmail_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendActivateEmail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendActivateEmail_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendActivateEmail_argsStandardSchemeFactory implements SchemeFactory {
      public sendActivateEmail_argsStandardScheme getScheme() {
        return new sendActivateEmail_argsStandardScheme();
      }
    }

    private static class sendActivateEmail_argsStandardScheme extends StandardScheme<sendActivateEmail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendActivateEmail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendActivateEmail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendActivateEmail_argsTupleSchemeFactory implements SchemeFactory {
      public sendActivateEmail_argsTupleScheme getScheme() {
        return new sendActivateEmail_argsTupleScheme();
      }
    }

    private static class sendActivateEmail_argsTupleScheme extends TupleScheme<sendActivateEmail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendActivateEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendActivateEmail_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class sendActivateEmail_result implements org.apache.thrift.TBase<sendActivateEmail_result, sendActivateEmail_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendActivateEmail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendActivateEmail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendActivateEmail_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendActivateEmail_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendActivateEmail_result.class, metaDataMap);
    }

    public sendActivateEmail_result() {
    }

    public sendActivateEmail_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendActivateEmail_result(sendActivateEmail_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public sendActivateEmail_result deepCopy() {
      return new sendActivateEmail_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public sendActivateEmail_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendActivateEmail_result)
        return this.equals((sendActivateEmail_result)that);
      return false;
    }

    public boolean equals(sendActivateEmail_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(sendActivateEmail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendActivateEmail_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendActivateEmail_resultStandardSchemeFactory implements SchemeFactory {
      public sendActivateEmail_resultStandardScheme getScheme() {
        return new sendActivateEmail_resultStandardScheme();
      }
    }

    private static class sendActivateEmail_resultStandardScheme extends StandardScheme<sendActivateEmail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendActivateEmail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendActivateEmail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendActivateEmail_resultTupleSchemeFactory implements SchemeFactory {
      public sendActivateEmail_resultTupleScheme getScheme() {
        return new sendActivateEmail_resultTupleScheme();
      }
    }

    private static class sendActivateEmail_resultTupleScheme extends TupleScheme<sendActivateEmail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendActivateEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendActivateEmail_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class activateAccount_args implements org.apache.thrift.TBase<activateAccount_args, activateAccount_args._Fields>, java.io.Serializable, Cloneable, Comparable<activateAccount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateAccount_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField ACTIVATE_FIELD_DESC = new org.apache.thrift.protocol.TField("activate", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateAccount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateAccount_argsTupleSchemeFactory());
    }

    public int userId; // required
    public boolean activate; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      ACTIVATE((short)2, "activate");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // ACTIVATE
            return ACTIVATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __ACTIVATE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.ACTIVATE, new org.apache.thrift.meta_data.FieldMetaData("activate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateAccount_args.class, metaDataMap);
    }

    public activateAccount_args() {
    }

    public activateAccount_args(
      int userId,
      boolean activate)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.activate = activate;
      setActivateIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateAccount_args(activateAccount_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.activate = other.activate;
    }

    public activateAccount_args deepCopy() {
      return new activateAccount_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setActivateIsSet(false);
      this.activate = false;
    }

    public int getUserId() {
      return this.userId;
    }

    public activateAccount_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public boolean isActivate() {
      return this.activate;
    }

    public activateAccount_args setActivate(boolean activate) {
      this.activate = activate;
      setActivateIsSet(true);
      return this;
    }

    public void unsetActivate() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ACTIVATE_ISSET_ID);
    }

    /** Returns true if field activate is set (has been assigned a value) and false otherwise */
    public boolean isSetActivate() {
      return EncodingUtils.testBit(__isset_bitfield, __ACTIVATE_ISSET_ID);
    }

    public void setActivateIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ACTIVATE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case ACTIVATE:
        if (value == null) {
          unsetActivate();
        } else {
          setActivate((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case ACTIVATE:
        return isActivate();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case ACTIVATE:
        return isSetActivate();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateAccount_args)
        return this.equals((activateAccount_args)that);
      return false;
    }

    public boolean equals(activateAccount_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_activate = true;
      boolean that_present_activate = true;
      if (this_present_activate || that_present_activate) {
        if (!(this_present_activate && that_present_activate))
          return false;
        if (this.activate != that.activate)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_activate = true;
      list.add(present_activate);
      if (present_activate)
        list.add(activate);

      return list.hashCode();
    }

    @Override
    public int compareTo(activateAccount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetActivate()).compareTo(other.isSetActivate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetActivate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.activate, other.activate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateAccount_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("activate:");
      sb.append(this.activate);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateAccount_argsStandardSchemeFactory implements SchemeFactory {
      public activateAccount_argsStandardScheme getScheme() {
        return new activateAccount_argsStandardScheme();
      }
    }

    private static class activateAccount_argsStandardScheme extends StandardScheme<activateAccount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateAccount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ACTIVATE
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.activate = iprot.readBool();
                struct.setActivateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateAccount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ACTIVATE_FIELD_DESC);
        oprot.writeBool(struct.activate);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateAccount_argsTupleSchemeFactory implements SchemeFactory {
      public activateAccount_argsTupleScheme getScheme() {
        return new activateAccount_argsTupleScheme();
      }
    }

    private static class activateAccount_argsTupleScheme extends TupleScheme<activateAccount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetActivate()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetActivate()) {
          oprot.writeBool(struct.activate);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateAccount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.activate = iprot.readBool();
          struct.setActivateIsSet(true);
        }
      }
    }

  }

  public static class activateAccount_result implements org.apache.thrift.TBase<activateAccount_result, activateAccount_result._Fields>, java.io.Serializable, Cloneable, Comparable<activateAccount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("activateAccount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new activateAccount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new activateAccount_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(activateAccount_result.class, metaDataMap);
    }

    public activateAccount_result() {
    }

    public activateAccount_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public activateAccount_result(activateAccount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public activateAccount_result deepCopy() {
      return new activateAccount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public activateAccount_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof activateAccount_result)
        return this.equals((activateAccount_result)that);
      return false;
    }

    public boolean equals(activateAccount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(activateAccount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("activateAccount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class activateAccount_resultStandardSchemeFactory implements SchemeFactory {
      public activateAccount_resultStandardScheme getScheme() {
        return new activateAccount_resultStandardScheme();
      }
    }

    private static class activateAccount_resultStandardScheme extends StandardScheme<activateAccount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, activateAccount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, activateAccount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class activateAccount_resultTupleSchemeFactory implements SchemeFactory {
      public activateAccount_resultTupleScheme getScheme() {
        return new activateAccount_resultTupleScheme();
      }
    }

    private static class activateAccount_resultTupleScheme extends TupleScheme<activateAccount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, activateAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, activateAccount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findPassword_args implements org.apache.thrift.TBase<findPassword_args, findPassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<findPassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPassword_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPassword_argsTupleSchemeFactory());
    }

    public User user; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPassword_args.class, metaDataMap);
    }

    public findPassword_args() {
    }

    public findPassword_args(
      User user)
    {
      this();
      this.user = user;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPassword_args(findPassword_args other) {
      if (other.isSetUser()) {
        this.user = new User(other.user);
      }
    }

    public findPassword_args deepCopy() {
      return new findPassword_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
    }

    public User getUser() {
      return this.user;
    }

    public findPassword_args setUser(User user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((User)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPassword_args)
        return this.equals((findPassword_args)that);
      return false;
    }

    public boolean equals(findPassword_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user = true && (isSetUser());
      list.add(present_user);
      if (present_user)
        list.add(user);

      return list.hashCode();
    }

    @Override
    public int compareTo(findPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPassword_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPassword_argsStandardSchemeFactory implements SchemeFactory {
      public findPassword_argsStandardScheme getScheme() {
        return new findPassword_argsStandardScheme();
      }
    }

    private static class findPassword_argsStandardScheme extends StandardScheme<findPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new User();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPassword_argsTupleSchemeFactory implements SchemeFactory {
      public findPassword_argsTupleScheme getScheme() {
        return new findPassword_argsTupleScheme();
      }
    }

    private static class findPassword_argsTupleScheme extends TupleScheme<findPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user = new User();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class findPassword_result implements org.apache.thrift.TBase<findPassword_result, findPassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<findPassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findPassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findPassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findPassword_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see FindPasswordStatus
     */
    public FindPasswordStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see FindPasswordStatus
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FindPasswordStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findPassword_result.class, metaDataMap);
    }

    public findPassword_result() {
    }

    public findPassword_result(
      FindPasswordStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findPassword_result(findPassword_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public findPassword_result deepCopy() {
      return new findPassword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see FindPasswordStatus
     */
    public FindPasswordStatus getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see FindPasswordStatus
     */
    public findPassword_result setSuccess(FindPasswordStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FindPasswordStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findPassword_result)
        return this.equals((findPassword_result)that);
      return false;
    }

    public boolean equals(findPassword_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(findPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findPassword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findPassword_resultStandardSchemeFactory implements SchemeFactory {
      public findPassword_resultStandardScheme getScheme() {
        return new findPassword_resultStandardScheme();
      }
    }

    private static class findPassword_resultStandardScheme extends StandardScheme<findPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = co.tagtalk.winemate.thriftfiles.FindPasswordStatus.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findPassword_resultTupleSchemeFactory implements SchemeFactory {
      public findPassword_resultTupleScheme getScheme() {
        return new findPassword_resultTupleScheme();
      }
    }

    private static class findPassword_resultTupleScheme extends TupleScheme<findPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = co.tagtalk.winemate.thriftfiles.FindPasswordStatus.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class authentication_args implements org.apache.thrift.TBase<authentication_args, authentication_args._Fields>, java.io.Serializable, Cloneable, Comparable<authentication_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authentication_args");

    private static final org.apache.thrift.protocol.TField TAG_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("tagInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authentication_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authentication_argsTupleSchemeFactory());
    }

    public TagInfo tagInfo; // required
    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_INFO((short)1, "tagInfo"),
      USER_ID((short)2, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_INFO
            return TAG_INFO;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_INFO, new org.apache.thrift.meta_data.FieldMetaData("tagInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TagInfo.class)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authentication_args.class, metaDataMap);
    }

    public authentication_args() {
    }

    public authentication_args(
      TagInfo tagInfo,
      int userId)
    {
      this();
      this.tagInfo = tagInfo;
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authentication_args(authentication_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetTagInfo()) {
        this.tagInfo = new TagInfo(other.tagInfo);
      }
      this.userId = other.userId;
    }

    public authentication_args deepCopy() {
      return new authentication_args(this);
    }

    @Override
    public void clear() {
      this.tagInfo = null;
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public TagInfo getTagInfo() {
      return this.tagInfo;
    }

    public authentication_args setTagInfo(TagInfo tagInfo) {
      this.tagInfo = tagInfo;
      return this;
    }

    public void unsetTagInfo() {
      this.tagInfo = null;
    }

    /** Returns true if field tagInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetTagInfo() {
      return this.tagInfo != null;
    }

    public void setTagInfoIsSet(boolean value) {
      if (!value) {
        this.tagInfo = null;
      }
    }

    public int getUserId() {
      return this.userId;
    }

    public authentication_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_INFO:
        if (value == null) {
          unsetTagInfo();
        } else {
          setTagInfo((TagInfo)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_INFO:
        return getTagInfo();

      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_INFO:
        return isSetTagInfo();
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authentication_args)
        return this.equals((authentication_args)that);
      return false;
    }

    public boolean equals(authentication_args that) {
      if (that == null)
        return false;

      boolean this_present_tagInfo = true && this.isSetTagInfo();
      boolean that_present_tagInfo = true && that.isSetTagInfo();
      if (this_present_tagInfo || that_present_tagInfo) {
        if (!(this_present_tagInfo && that_present_tagInfo))
          return false;
        if (!this.tagInfo.equals(that.tagInfo))
          return false;
      }

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tagInfo = true && (isSetTagInfo());
      list.add(present_tagInfo);
      if (present_tagInfo)
        list.add(tagInfo);

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(authentication_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTagInfo()).compareTo(other.isSetTagInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagInfo, other.tagInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authentication_args(");
      boolean first = true;

      sb.append("tagInfo:");
      if (this.tagInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.tagInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (tagInfo != null) {
        tagInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authentication_argsStandardSchemeFactory implements SchemeFactory {
      public authentication_argsStandardScheme getScheme() {
        return new authentication_argsStandardScheme();
      }
    }

    private static class authentication_argsStandardScheme extends StandardScheme<authentication_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authentication_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.tagInfo = new TagInfo();
                struct.tagInfo.read(iprot);
                struct.setTagInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authentication_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tagInfo != null) {
          oprot.writeFieldBegin(TAG_INFO_FIELD_DESC);
          struct.tagInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authentication_argsTupleSchemeFactory implements SchemeFactory {
      public authentication_argsTupleScheme getScheme() {
        return new authentication_argsTupleScheme();
      }
    }

    private static class authentication_argsTupleScheme extends TupleScheme<authentication_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authentication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTagInfo()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTagInfo()) {
          struct.tagInfo.write(oprot);
        }
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authentication_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.tagInfo = new TagInfo();
          struct.tagInfo.read(iprot);
          struct.setTagInfoIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class authentication_result implements org.apache.thrift.TBase<authentication_result, authentication_result._Fields>, java.io.Serializable, Cloneable, Comparable<authentication_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("authentication_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new authentication_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new authentication_resultTupleSchemeFactory());
    }

    public WineInfo success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WineInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(authentication_result.class, metaDataMap);
    }

    public authentication_result() {
    }

    public authentication_result(
      WineInfo success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public authentication_result(authentication_result other) {
      if (other.isSetSuccess()) {
        this.success = new WineInfo(other.success);
      }
    }

    public authentication_result deepCopy() {
      return new authentication_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WineInfo getSuccess() {
      return this.success;
    }

    public authentication_result setSuccess(WineInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WineInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof authentication_result)
        return this.equals((authentication_result)that);
      return false;
    }

    public boolean equals(authentication_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(authentication_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("authentication_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class authentication_resultStandardSchemeFactory implements SchemeFactory {
      public authentication_resultStandardScheme getScheme() {
        return new authentication_resultStandardScheme();
      }
    }

    private static class authentication_resultStandardScheme extends StandardScheme<authentication_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, authentication_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WineInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, authentication_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class authentication_resultTupleSchemeFactory implements SchemeFactory {
      public authentication_resultTupleScheme getScheme() {
        return new authentication_resultTupleScheme();
      }
    }

    private static class authentication_resultTupleScheme extends TupleScheme<authentication_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, authentication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, authentication_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WineInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class openBottle_args implements org.apache.thrift.TBase<openBottle_args, openBottle_args._Fields>, java.io.Serializable, Cloneable, Comparable<openBottle_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openBottle_args");

    private static final org.apache.thrift.protocol.TField BOTTLE_OPEN_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("bottleOpenInfo", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openBottle_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openBottle_argsTupleSchemeFactory());
    }

    public BottleOpenInfo bottleOpenInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BOTTLE_OPEN_INFO((short)1, "bottleOpenInfo");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BOTTLE_OPEN_INFO
            return BOTTLE_OPEN_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BOTTLE_OPEN_INFO, new org.apache.thrift.meta_data.FieldMetaData("bottleOpenInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BottleOpenInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openBottle_args.class, metaDataMap);
    }

    public openBottle_args() {
    }

    public openBottle_args(
      BottleOpenInfo bottleOpenInfo)
    {
      this();
      this.bottleOpenInfo = bottleOpenInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openBottle_args(openBottle_args other) {
      if (other.isSetBottleOpenInfo()) {
        this.bottleOpenInfo = new BottleOpenInfo(other.bottleOpenInfo);
      }
    }

    public openBottle_args deepCopy() {
      return new openBottle_args(this);
    }

    @Override
    public void clear() {
      this.bottleOpenInfo = null;
    }

    public BottleOpenInfo getBottleOpenInfo() {
      return this.bottleOpenInfo;
    }

    public openBottle_args setBottleOpenInfo(BottleOpenInfo bottleOpenInfo) {
      this.bottleOpenInfo = bottleOpenInfo;
      return this;
    }

    public void unsetBottleOpenInfo() {
      this.bottleOpenInfo = null;
    }

    /** Returns true if field bottleOpenInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetBottleOpenInfo() {
      return this.bottleOpenInfo != null;
    }

    public void setBottleOpenInfoIsSet(boolean value) {
      if (!value) {
        this.bottleOpenInfo = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BOTTLE_OPEN_INFO:
        if (value == null) {
          unsetBottleOpenInfo();
        } else {
          setBottleOpenInfo((BottleOpenInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BOTTLE_OPEN_INFO:
        return getBottleOpenInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BOTTLE_OPEN_INFO:
        return isSetBottleOpenInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openBottle_args)
        return this.equals((openBottle_args)that);
      return false;
    }

    public boolean equals(openBottle_args that) {
      if (that == null)
        return false;

      boolean this_present_bottleOpenInfo = true && this.isSetBottleOpenInfo();
      boolean that_present_bottleOpenInfo = true && that.isSetBottleOpenInfo();
      if (this_present_bottleOpenInfo || that_present_bottleOpenInfo) {
        if (!(this_present_bottleOpenInfo && that_present_bottleOpenInfo))
          return false;
        if (!this.bottleOpenInfo.equals(that.bottleOpenInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_bottleOpenInfo = true && (isSetBottleOpenInfo());
      list.add(present_bottleOpenInfo);
      if (present_bottleOpenInfo)
        list.add(bottleOpenInfo);

      return list.hashCode();
    }

    @Override
    public int compareTo(openBottle_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBottleOpenInfo()).compareTo(other.isSetBottleOpenInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBottleOpenInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.bottleOpenInfo, other.bottleOpenInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openBottle_args(");
      boolean first = true;

      sb.append("bottleOpenInfo:");
      if (this.bottleOpenInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.bottleOpenInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (bottleOpenInfo != null) {
        bottleOpenInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openBottle_argsStandardSchemeFactory implements SchemeFactory {
      public openBottle_argsStandardScheme getScheme() {
        return new openBottle_argsStandardScheme();
      }
    }

    private static class openBottle_argsStandardScheme extends StandardScheme<openBottle_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openBottle_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BOTTLE_OPEN_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.bottleOpenInfo = new BottleOpenInfo();
                struct.bottleOpenInfo.read(iprot);
                struct.setBottleOpenInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openBottle_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.bottleOpenInfo != null) {
          oprot.writeFieldBegin(BOTTLE_OPEN_INFO_FIELD_DESC);
          struct.bottleOpenInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openBottle_argsTupleSchemeFactory implements SchemeFactory {
      public openBottle_argsTupleScheme getScheme() {
        return new openBottle_argsTupleScheme();
      }
    }

    private static class openBottle_argsTupleScheme extends TupleScheme<openBottle_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openBottle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBottleOpenInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBottleOpenInfo()) {
          struct.bottleOpenInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openBottle_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.bottleOpenInfo = new BottleOpenInfo();
          struct.bottleOpenInfo.read(iprot);
          struct.setBottleOpenInfoIsSet(true);
        }
      }
    }

  }

  public static class openBottle_result implements org.apache.thrift.TBase<openBottle_result, openBottle_result._Fields>, java.io.Serializable, Cloneable, Comparable<openBottle_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("openBottle_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new openBottle_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new openBottle_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(openBottle_result.class, metaDataMap);
    }

    public openBottle_result() {
    }

    public openBottle_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public openBottle_result(openBottle_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public openBottle_result deepCopy() {
      return new openBottle_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public openBottle_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof openBottle_result)
        return this.equals((openBottle_result)that);
      return false;
    }

    public boolean equals(openBottle_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(openBottle_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("openBottle_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class openBottle_resultStandardSchemeFactory implements SchemeFactory {
      public openBottle_resultStandardScheme getScheme() {
        return new openBottle_resultStandardScheme();
      }
    }

    private static class openBottle_resultStandardScheme extends StandardScheme<openBottle_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, openBottle_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, openBottle_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class openBottle_resultTupleSchemeFactory implements SchemeFactory {
      public openBottle_resultTupleScheme getScheme() {
        return new openBottle_resultTupleScheme();
      }
    }

    private static class openBottle_resultTupleScheme extends TupleScheme<openBottle_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, openBottle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, openBottle_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getBasicInfo_args implements org.apache.thrift.TBase<getBasicInfo_args, getBasicInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getBasicInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBasicInfo_args");

    private static final org.apache.thrift.protocol.TField WINE_BASIC_INFO_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("wineBasicInfoRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBasicInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBasicInfo_argsTupleSchemeFactory());
    }

    public WineBasicInfoRequest wineBasicInfoRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WINE_BASIC_INFO_REQUEST((short)1, "wineBasicInfoRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WINE_BASIC_INFO_REQUEST
            return WINE_BASIC_INFO_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WINE_BASIC_INFO_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("wineBasicInfoRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WineBasicInfoRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBasicInfo_args.class, metaDataMap);
    }

    public getBasicInfo_args() {
    }

    public getBasicInfo_args(
      WineBasicInfoRequest wineBasicInfoRequest)
    {
      this();
      this.wineBasicInfoRequest = wineBasicInfoRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBasicInfo_args(getBasicInfo_args other) {
      if (other.isSetWineBasicInfoRequest()) {
        this.wineBasicInfoRequest = new WineBasicInfoRequest(other.wineBasicInfoRequest);
      }
    }

    public getBasicInfo_args deepCopy() {
      return new getBasicInfo_args(this);
    }

    @Override
    public void clear() {
      this.wineBasicInfoRequest = null;
    }

    public WineBasicInfoRequest getWineBasicInfoRequest() {
      return this.wineBasicInfoRequest;
    }

    public getBasicInfo_args setWineBasicInfoRequest(WineBasicInfoRequest wineBasicInfoRequest) {
      this.wineBasicInfoRequest = wineBasicInfoRequest;
      return this;
    }

    public void unsetWineBasicInfoRequest() {
      this.wineBasicInfoRequest = null;
    }

    /** Returns true if field wineBasicInfoRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetWineBasicInfoRequest() {
      return this.wineBasicInfoRequest != null;
    }

    public void setWineBasicInfoRequestIsSet(boolean value) {
      if (!value) {
        this.wineBasicInfoRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WINE_BASIC_INFO_REQUEST:
        if (value == null) {
          unsetWineBasicInfoRequest();
        } else {
          setWineBasicInfoRequest((WineBasicInfoRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WINE_BASIC_INFO_REQUEST:
        return getWineBasicInfoRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WINE_BASIC_INFO_REQUEST:
        return isSetWineBasicInfoRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBasicInfo_args)
        return this.equals((getBasicInfo_args)that);
      return false;
    }

    public boolean equals(getBasicInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_wineBasicInfoRequest = true && this.isSetWineBasicInfoRequest();
      boolean that_present_wineBasicInfoRequest = true && that.isSetWineBasicInfoRequest();
      if (this_present_wineBasicInfoRequest || that_present_wineBasicInfoRequest) {
        if (!(this_present_wineBasicInfoRequest && that_present_wineBasicInfoRequest))
          return false;
        if (!this.wineBasicInfoRequest.equals(that.wineBasicInfoRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_wineBasicInfoRequest = true && (isSetWineBasicInfoRequest());
      list.add(present_wineBasicInfoRequest);
      if (present_wineBasicInfoRequest)
        list.add(wineBasicInfoRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBasicInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWineBasicInfoRequest()).compareTo(other.isSetWineBasicInfoRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWineBasicInfoRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineBasicInfoRequest, other.wineBasicInfoRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBasicInfo_args(");
      boolean first = true;

      sb.append("wineBasicInfoRequest:");
      if (this.wineBasicInfoRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.wineBasicInfoRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (wineBasicInfoRequest != null) {
        wineBasicInfoRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBasicInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getBasicInfo_argsStandardScheme getScheme() {
        return new getBasicInfo_argsStandardScheme();
      }
    }

    private static class getBasicInfo_argsStandardScheme extends StandardScheme<getBasicInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBasicInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WINE_BASIC_INFO_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.wineBasicInfoRequest = new WineBasicInfoRequest();
                struct.wineBasicInfoRequest.read(iprot);
                struct.setWineBasicInfoRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBasicInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.wineBasicInfoRequest != null) {
          oprot.writeFieldBegin(WINE_BASIC_INFO_REQUEST_FIELD_DESC);
          struct.wineBasicInfoRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBasicInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getBasicInfo_argsTupleScheme getScheme() {
        return new getBasicInfo_argsTupleScheme();
      }
    }

    private static class getBasicInfo_argsTupleScheme extends TupleScheme<getBasicInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBasicInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWineBasicInfoRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWineBasicInfoRequest()) {
          struct.wineBasicInfoRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBasicInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.wineBasicInfoRequest = new WineBasicInfoRequest();
          struct.wineBasicInfoRequest.read(iprot);
          struct.setWineBasicInfoRequestIsSet(true);
        }
      }
    }

  }

  public static class getBasicInfo_result implements org.apache.thrift.TBase<getBasicInfo_result, getBasicInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getBasicInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getBasicInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getBasicInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getBasicInfo_resultTupleSchemeFactory());
    }

    public WineBasicInfoResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WineBasicInfoResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getBasicInfo_result.class, metaDataMap);
    }

    public getBasicInfo_result() {
    }

    public getBasicInfo_result(
      WineBasicInfoResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getBasicInfo_result(getBasicInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new WineBasicInfoResponse(other.success);
      }
    }

    public getBasicInfo_result deepCopy() {
      return new getBasicInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WineBasicInfoResponse getSuccess() {
      return this.success;
    }

    public getBasicInfo_result setSuccess(WineBasicInfoResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WineBasicInfoResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getBasicInfo_result)
        return this.equals((getBasicInfo_result)that);
      return false;
    }

    public boolean equals(getBasicInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getBasicInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getBasicInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getBasicInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getBasicInfo_resultStandardScheme getScheme() {
        return new getBasicInfo_resultStandardScheme();
      }
    }

    private static class getBasicInfo_resultStandardScheme extends StandardScheme<getBasicInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getBasicInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WineBasicInfoResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getBasicInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getBasicInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getBasicInfo_resultTupleScheme getScheme() {
        return new getBasicInfo_resultTupleScheme();
      }
    }

    private static class getBasicInfo_resultTupleScheme extends TupleScheme<getBasicInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getBasicInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getBasicInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WineBasicInfoResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWineReviewAndRating_args implements org.apache.thrift.TBase<getWineReviewAndRating_args, getWineReviewAndRating_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWineReviewAndRating_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWineReviewAndRating_args");

    private static final org.apache.thrift.protocol.TField WINE_REVIEW_AND_RATING_READ_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("wineReviewAndRatingReadRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWineReviewAndRating_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWineReviewAndRating_argsTupleSchemeFactory());
    }

    public WineReviewAndRatingReadRequest wineReviewAndRatingReadRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WINE_REVIEW_AND_RATING_READ_REQUEST((short)1, "wineReviewAndRatingReadRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WINE_REVIEW_AND_RATING_READ_REQUEST
            return WINE_REVIEW_AND_RATING_READ_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WINE_REVIEW_AND_RATING_READ_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("wineReviewAndRatingReadRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WineReviewAndRatingReadRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWineReviewAndRating_args.class, metaDataMap);
    }

    public getWineReviewAndRating_args() {
    }

    public getWineReviewAndRating_args(
      WineReviewAndRatingReadRequest wineReviewAndRatingReadRequest)
    {
      this();
      this.wineReviewAndRatingReadRequest = wineReviewAndRatingReadRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWineReviewAndRating_args(getWineReviewAndRating_args other) {
      if (other.isSetWineReviewAndRatingReadRequest()) {
        this.wineReviewAndRatingReadRequest = new WineReviewAndRatingReadRequest(other.wineReviewAndRatingReadRequest);
      }
    }

    public getWineReviewAndRating_args deepCopy() {
      return new getWineReviewAndRating_args(this);
    }

    @Override
    public void clear() {
      this.wineReviewAndRatingReadRequest = null;
    }

    public WineReviewAndRatingReadRequest getWineReviewAndRatingReadRequest() {
      return this.wineReviewAndRatingReadRequest;
    }

    public getWineReviewAndRating_args setWineReviewAndRatingReadRequest(WineReviewAndRatingReadRequest wineReviewAndRatingReadRequest) {
      this.wineReviewAndRatingReadRequest = wineReviewAndRatingReadRequest;
      return this;
    }

    public void unsetWineReviewAndRatingReadRequest() {
      this.wineReviewAndRatingReadRequest = null;
    }

    /** Returns true if field wineReviewAndRatingReadRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetWineReviewAndRatingReadRequest() {
      return this.wineReviewAndRatingReadRequest != null;
    }

    public void setWineReviewAndRatingReadRequestIsSet(boolean value) {
      if (!value) {
        this.wineReviewAndRatingReadRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WINE_REVIEW_AND_RATING_READ_REQUEST:
        if (value == null) {
          unsetWineReviewAndRatingReadRequest();
        } else {
          setWineReviewAndRatingReadRequest((WineReviewAndRatingReadRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WINE_REVIEW_AND_RATING_READ_REQUEST:
        return getWineReviewAndRatingReadRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WINE_REVIEW_AND_RATING_READ_REQUEST:
        return isSetWineReviewAndRatingReadRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWineReviewAndRating_args)
        return this.equals((getWineReviewAndRating_args)that);
      return false;
    }

    public boolean equals(getWineReviewAndRating_args that) {
      if (that == null)
        return false;

      boolean this_present_wineReviewAndRatingReadRequest = true && this.isSetWineReviewAndRatingReadRequest();
      boolean that_present_wineReviewAndRatingReadRequest = true && that.isSetWineReviewAndRatingReadRequest();
      if (this_present_wineReviewAndRatingReadRequest || that_present_wineReviewAndRatingReadRequest) {
        if (!(this_present_wineReviewAndRatingReadRequest && that_present_wineReviewAndRatingReadRequest))
          return false;
        if (!this.wineReviewAndRatingReadRequest.equals(that.wineReviewAndRatingReadRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_wineReviewAndRatingReadRequest = true && (isSetWineReviewAndRatingReadRequest());
      list.add(present_wineReviewAndRatingReadRequest);
      if (present_wineReviewAndRatingReadRequest)
        list.add(wineReviewAndRatingReadRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(getWineReviewAndRating_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWineReviewAndRatingReadRequest()).compareTo(other.isSetWineReviewAndRatingReadRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWineReviewAndRatingReadRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineReviewAndRatingReadRequest, other.wineReviewAndRatingReadRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWineReviewAndRating_args(");
      boolean first = true;

      sb.append("wineReviewAndRatingReadRequest:");
      if (this.wineReviewAndRatingReadRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.wineReviewAndRatingReadRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (wineReviewAndRatingReadRequest != null) {
        wineReviewAndRatingReadRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWineReviewAndRating_argsStandardSchemeFactory implements SchemeFactory {
      public getWineReviewAndRating_argsStandardScheme getScheme() {
        return new getWineReviewAndRating_argsStandardScheme();
      }
    }

    private static class getWineReviewAndRating_argsStandardScheme extends StandardScheme<getWineReviewAndRating_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWineReviewAndRating_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WINE_REVIEW_AND_RATING_READ_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.wineReviewAndRatingReadRequest = new WineReviewAndRatingReadRequest();
                struct.wineReviewAndRatingReadRequest.read(iprot);
                struct.setWineReviewAndRatingReadRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWineReviewAndRating_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.wineReviewAndRatingReadRequest != null) {
          oprot.writeFieldBegin(WINE_REVIEW_AND_RATING_READ_REQUEST_FIELD_DESC);
          struct.wineReviewAndRatingReadRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWineReviewAndRating_argsTupleSchemeFactory implements SchemeFactory {
      public getWineReviewAndRating_argsTupleScheme getScheme() {
        return new getWineReviewAndRating_argsTupleScheme();
      }
    }

    private static class getWineReviewAndRating_argsTupleScheme extends TupleScheme<getWineReviewAndRating_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWineReviewAndRating_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWineReviewAndRatingReadRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWineReviewAndRatingReadRequest()) {
          struct.wineReviewAndRatingReadRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWineReviewAndRating_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.wineReviewAndRatingReadRequest = new WineReviewAndRatingReadRequest();
          struct.wineReviewAndRatingReadRequest.read(iprot);
          struct.setWineReviewAndRatingReadRequestIsSet(true);
        }
      }
    }

  }

  public static class getWineReviewAndRating_result implements org.apache.thrift.TBase<getWineReviewAndRating_result, getWineReviewAndRating_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWineReviewAndRating_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWineReviewAndRating_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWineReviewAndRating_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWineReviewAndRating_resultTupleSchemeFactory());
    }

    public WineReviewAndRatingReadResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WineReviewAndRatingReadResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWineReviewAndRating_result.class, metaDataMap);
    }

    public getWineReviewAndRating_result() {
    }

    public getWineReviewAndRating_result(
      WineReviewAndRatingReadResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWineReviewAndRating_result(getWineReviewAndRating_result other) {
      if (other.isSetSuccess()) {
        this.success = new WineReviewAndRatingReadResponse(other.success);
      }
    }

    public getWineReviewAndRating_result deepCopy() {
      return new getWineReviewAndRating_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WineReviewAndRatingReadResponse getSuccess() {
      return this.success;
    }

    public getWineReviewAndRating_result setSuccess(WineReviewAndRatingReadResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WineReviewAndRatingReadResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWineReviewAndRating_result)
        return this.equals((getWineReviewAndRating_result)that);
      return false;
    }

    public boolean equals(getWineReviewAndRating_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getWineReviewAndRating_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWineReviewAndRating_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWineReviewAndRating_resultStandardSchemeFactory implements SchemeFactory {
      public getWineReviewAndRating_resultStandardScheme getScheme() {
        return new getWineReviewAndRating_resultStandardScheme();
      }
    }

    private static class getWineReviewAndRating_resultStandardScheme extends StandardScheme<getWineReviewAndRating_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWineReviewAndRating_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WineReviewAndRatingReadResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWineReviewAndRating_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWineReviewAndRating_resultTupleSchemeFactory implements SchemeFactory {
      public getWineReviewAndRating_resultTupleScheme getScheme() {
        return new getWineReviewAndRating_resultTupleScheme();
      }
    }

    private static class getWineReviewAndRating_resultTupleScheme extends TupleScheme<getWineReviewAndRating_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWineReviewAndRating_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWineReviewAndRating_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WineReviewAndRatingReadResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class writeWineReviewAndRating_args implements org.apache.thrift.TBase<writeWineReviewAndRating_args, writeWineReviewAndRating_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeWineReviewAndRating_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeWineReviewAndRating_args");

    private static final org.apache.thrift.protocol.TField WINE_REVIEW_AND_RATING_WRITE_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("wineReviewAndRatingWriteRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writeWineReviewAndRating_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writeWineReviewAndRating_argsTupleSchemeFactory());
    }

    public WineReviewAndRatingWriteRequest wineReviewAndRatingWriteRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WINE_REVIEW_AND_RATING_WRITE_REQUEST((short)1, "wineReviewAndRatingWriteRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WINE_REVIEW_AND_RATING_WRITE_REQUEST
            return WINE_REVIEW_AND_RATING_WRITE_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WINE_REVIEW_AND_RATING_WRITE_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("wineReviewAndRatingWriteRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WineReviewAndRatingWriteRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeWineReviewAndRating_args.class, metaDataMap);
    }

    public writeWineReviewAndRating_args() {
    }

    public writeWineReviewAndRating_args(
      WineReviewAndRatingWriteRequest wineReviewAndRatingWriteRequest)
    {
      this();
      this.wineReviewAndRatingWriteRequest = wineReviewAndRatingWriteRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeWineReviewAndRating_args(writeWineReviewAndRating_args other) {
      if (other.isSetWineReviewAndRatingWriteRequest()) {
        this.wineReviewAndRatingWriteRequest = new WineReviewAndRatingWriteRequest(other.wineReviewAndRatingWriteRequest);
      }
    }

    public writeWineReviewAndRating_args deepCopy() {
      return new writeWineReviewAndRating_args(this);
    }

    @Override
    public void clear() {
      this.wineReviewAndRatingWriteRequest = null;
    }

    public WineReviewAndRatingWriteRequest getWineReviewAndRatingWriteRequest() {
      return this.wineReviewAndRatingWriteRequest;
    }

    public writeWineReviewAndRating_args setWineReviewAndRatingWriteRequest(WineReviewAndRatingWriteRequest wineReviewAndRatingWriteRequest) {
      this.wineReviewAndRatingWriteRequest = wineReviewAndRatingWriteRequest;
      return this;
    }

    public void unsetWineReviewAndRatingWriteRequest() {
      this.wineReviewAndRatingWriteRequest = null;
    }

    /** Returns true if field wineReviewAndRatingWriteRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetWineReviewAndRatingWriteRequest() {
      return this.wineReviewAndRatingWriteRequest != null;
    }

    public void setWineReviewAndRatingWriteRequestIsSet(boolean value) {
      if (!value) {
        this.wineReviewAndRatingWriteRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WINE_REVIEW_AND_RATING_WRITE_REQUEST:
        if (value == null) {
          unsetWineReviewAndRatingWriteRequest();
        } else {
          setWineReviewAndRatingWriteRequest((WineReviewAndRatingWriteRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WINE_REVIEW_AND_RATING_WRITE_REQUEST:
        return getWineReviewAndRatingWriteRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WINE_REVIEW_AND_RATING_WRITE_REQUEST:
        return isSetWineReviewAndRatingWriteRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeWineReviewAndRating_args)
        return this.equals((writeWineReviewAndRating_args)that);
      return false;
    }

    public boolean equals(writeWineReviewAndRating_args that) {
      if (that == null)
        return false;

      boolean this_present_wineReviewAndRatingWriteRequest = true && this.isSetWineReviewAndRatingWriteRequest();
      boolean that_present_wineReviewAndRatingWriteRequest = true && that.isSetWineReviewAndRatingWriteRequest();
      if (this_present_wineReviewAndRatingWriteRequest || that_present_wineReviewAndRatingWriteRequest) {
        if (!(this_present_wineReviewAndRatingWriteRequest && that_present_wineReviewAndRatingWriteRequest))
          return false;
        if (!this.wineReviewAndRatingWriteRequest.equals(that.wineReviewAndRatingWriteRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_wineReviewAndRatingWriteRequest = true && (isSetWineReviewAndRatingWriteRequest());
      list.add(present_wineReviewAndRatingWriteRequest);
      if (present_wineReviewAndRatingWriteRequest)
        list.add(wineReviewAndRatingWriteRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(writeWineReviewAndRating_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWineReviewAndRatingWriteRequest()).compareTo(other.isSetWineReviewAndRatingWriteRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWineReviewAndRatingWriteRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineReviewAndRatingWriteRequest, other.wineReviewAndRatingWriteRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeWineReviewAndRating_args(");
      boolean first = true;

      sb.append("wineReviewAndRatingWriteRequest:");
      if (this.wineReviewAndRatingWriteRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.wineReviewAndRatingWriteRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (wineReviewAndRatingWriteRequest != null) {
        wineReviewAndRatingWriteRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeWineReviewAndRating_argsStandardSchemeFactory implements SchemeFactory {
      public writeWineReviewAndRating_argsStandardScheme getScheme() {
        return new writeWineReviewAndRating_argsStandardScheme();
      }
    }

    private static class writeWineReviewAndRating_argsStandardScheme extends StandardScheme<writeWineReviewAndRating_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeWineReviewAndRating_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WINE_REVIEW_AND_RATING_WRITE_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.wineReviewAndRatingWriteRequest = new WineReviewAndRatingWriteRequest();
                struct.wineReviewAndRatingWriteRequest.read(iprot);
                struct.setWineReviewAndRatingWriteRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeWineReviewAndRating_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.wineReviewAndRatingWriteRequest != null) {
          oprot.writeFieldBegin(WINE_REVIEW_AND_RATING_WRITE_REQUEST_FIELD_DESC);
          struct.wineReviewAndRatingWriteRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeWineReviewAndRating_argsTupleSchemeFactory implements SchemeFactory {
      public writeWineReviewAndRating_argsTupleScheme getScheme() {
        return new writeWineReviewAndRating_argsTupleScheme();
      }
    }

    private static class writeWineReviewAndRating_argsTupleScheme extends TupleScheme<writeWineReviewAndRating_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeWineReviewAndRating_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWineReviewAndRatingWriteRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWineReviewAndRatingWriteRequest()) {
          struct.wineReviewAndRatingWriteRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeWineReviewAndRating_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.wineReviewAndRatingWriteRequest = new WineReviewAndRatingWriteRequest();
          struct.wineReviewAndRatingWriteRequest.read(iprot);
          struct.setWineReviewAndRatingWriteRequestIsSet(true);
        }
      }
    }

  }

  public static class writeWineReviewAndRating_result implements org.apache.thrift.TBase<writeWineReviewAndRating_result, writeWineReviewAndRating_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeWineReviewAndRating_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeWineReviewAndRating_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writeWineReviewAndRating_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writeWineReviewAndRating_resultTupleSchemeFactory());
    }

    public WineReviewAndRatingWriteResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WineReviewAndRatingWriteResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeWineReviewAndRating_result.class, metaDataMap);
    }

    public writeWineReviewAndRating_result() {
    }

    public writeWineReviewAndRating_result(
      WineReviewAndRatingWriteResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeWineReviewAndRating_result(writeWineReviewAndRating_result other) {
      if (other.isSetSuccess()) {
        this.success = new WineReviewAndRatingWriteResponse(other.success);
      }
    }

    public writeWineReviewAndRating_result deepCopy() {
      return new writeWineReviewAndRating_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WineReviewAndRatingWriteResponse getSuccess() {
      return this.success;
    }

    public writeWineReviewAndRating_result setSuccess(WineReviewAndRatingWriteResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WineReviewAndRatingWriteResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeWineReviewAndRating_result)
        return this.equals((writeWineReviewAndRating_result)that);
      return false;
    }

    public boolean equals(writeWineReviewAndRating_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(writeWineReviewAndRating_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeWineReviewAndRating_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeWineReviewAndRating_resultStandardSchemeFactory implements SchemeFactory {
      public writeWineReviewAndRating_resultStandardScheme getScheme() {
        return new writeWineReviewAndRating_resultStandardScheme();
      }
    }

    private static class writeWineReviewAndRating_resultStandardScheme extends StandardScheme<writeWineReviewAndRating_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeWineReviewAndRating_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WineReviewAndRatingWriteResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeWineReviewAndRating_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeWineReviewAndRating_resultTupleSchemeFactory implements SchemeFactory {
      public writeWineReviewAndRating_resultTupleScheme getScheme() {
        return new writeWineReviewAndRating_resultTupleScheme();
      }
    }

    private static class writeWineReviewAndRating_resultTupleScheme extends TupleScheme<writeWineReviewAndRating_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeWineReviewAndRating_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeWineReviewAndRating_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WineReviewAndRatingWriteResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMyRateRecord_args implements org.apache.thrift.TBase<getMyRateRecord_args, getMyRateRecord_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyRateRecord_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyRateRecord_args");

    private static final org.apache.thrift.protocol.TField MY_RATE_RECORD_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("myRateRecordRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyRateRecord_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyRateRecord_argsTupleSchemeFactory());
    }

    public MyRateRecordRequest myRateRecordRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MY_RATE_RECORD_REQUEST((short)1, "myRateRecordRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MY_RATE_RECORD_REQUEST
            return MY_RATE_RECORD_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MY_RATE_RECORD_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("myRateRecordRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyRateRecordRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyRateRecord_args.class, metaDataMap);
    }

    public getMyRateRecord_args() {
    }

    public getMyRateRecord_args(
      MyRateRecordRequest myRateRecordRequest)
    {
      this();
      this.myRateRecordRequest = myRateRecordRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyRateRecord_args(getMyRateRecord_args other) {
      if (other.isSetMyRateRecordRequest()) {
        this.myRateRecordRequest = new MyRateRecordRequest(other.myRateRecordRequest);
      }
    }

    public getMyRateRecord_args deepCopy() {
      return new getMyRateRecord_args(this);
    }

    @Override
    public void clear() {
      this.myRateRecordRequest = null;
    }

    public MyRateRecordRequest getMyRateRecordRequest() {
      return this.myRateRecordRequest;
    }

    public getMyRateRecord_args setMyRateRecordRequest(MyRateRecordRequest myRateRecordRequest) {
      this.myRateRecordRequest = myRateRecordRequest;
      return this;
    }

    public void unsetMyRateRecordRequest() {
      this.myRateRecordRequest = null;
    }

    /** Returns true if field myRateRecordRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetMyRateRecordRequest() {
      return this.myRateRecordRequest != null;
    }

    public void setMyRateRecordRequestIsSet(boolean value) {
      if (!value) {
        this.myRateRecordRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MY_RATE_RECORD_REQUEST:
        if (value == null) {
          unsetMyRateRecordRequest();
        } else {
          setMyRateRecordRequest((MyRateRecordRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MY_RATE_RECORD_REQUEST:
        return getMyRateRecordRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MY_RATE_RECORD_REQUEST:
        return isSetMyRateRecordRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyRateRecord_args)
        return this.equals((getMyRateRecord_args)that);
      return false;
    }

    public boolean equals(getMyRateRecord_args that) {
      if (that == null)
        return false;

      boolean this_present_myRateRecordRequest = true && this.isSetMyRateRecordRequest();
      boolean that_present_myRateRecordRequest = true && that.isSetMyRateRecordRequest();
      if (this_present_myRateRecordRequest || that_present_myRateRecordRequest) {
        if (!(this_present_myRateRecordRequest && that_present_myRateRecordRequest))
          return false;
        if (!this.myRateRecordRequest.equals(that.myRateRecordRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_myRateRecordRequest = true && (isSetMyRateRecordRequest());
      list.add(present_myRateRecordRequest);
      if (present_myRateRecordRequest)
        list.add(myRateRecordRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyRateRecord_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMyRateRecordRequest()).compareTo(other.isSetMyRateRecordRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyRateRecordRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myRateRecordRequest, other.myRateRecordRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyRateRecord_args(");
      boolean first = true;

      sb.append("myRateRecordRequest:");
      if (this.myRateRecordRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.myRateRecordRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (myRateRecordRequest != null) {
        myRateRecordRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyRateRecord_argsStandardSchemeFactory implements SchemeFactory {
      public getMyRateRecord_argsStandardScheme getScheme() {
        return new getMyRateRecord_argsStandardScheme();
      }
    }

    private static class getMyRateRecord_argsStandardScheme extends StandardScheme<getMyRateRecord_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyRateRecord_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MY_RATE_RECORD_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myRateRecordRequest = new MyRateRecordRequest();
                struct.myRateRecordRequest.read(iprot);
                struct.setMyRateRecordRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyRateRecord_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.myRateRecordRequest != null) {
          oprot.writeFieldBegin(MY_RATE_RECORD_REQUEST_FIELD_DESC);
          struct.myRateRecordRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyRateRecord_argsTupleSchemeFactory implements SchemeFactory {
      public getMyRateRecord_argsTupleScheme getScheme() {
        return new getMyRateRecord_argsTupleScheme();
      }
    }

    private static class getMyRateRecord_argsTupleScheme extends TupleScheme<getMyRateRecord_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyRateRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMyRateRecordRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMyRateRecordRequest()) {
          struct.myRateRecordRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyRateRecord_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.myRateRecordRequest = new MyRateRecordRequest();
          struct.myRateRecordRequest.read(iprot);
          struct.setMyRateRecordRequestIsSet(true);
        }
      }
    }

  }

  public static class getMyRateRecord_result implements org.apache.thrift.TBase<getMyRateRecord_result, getMyRateRecord_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyRateRecord_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyRateRecord_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyRateRecord_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyRateRecord_resultTupleSchemeFactory());
    }

    public MyRateRecordResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyRateRecordResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyRateRecord_result.class, metaDataMap);
    }

    public getMyRateRecord_result() {
    }

    public getMyRateRecord_result(
      MyRateRecordResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyRateRecord_result(getMyRateRecord_result other) {
      if (other.isSetSuccess()) {
        this.success = new MyRateRecordResponse(other.success);
      }
    }

    public getMyRateRecord_result deepCopy() {
      return new getMyRateRecord_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MyRateRecordResponse getSuccess() {
      return this.success;
    }

    public getMyRateRecord_result setSuccess(MyRateRecordResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MyRateRecordResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyRateRecord_result)
        return this.equals((getMyRateRecord_result)that);
      return false;
    }

    public boolean equals(getMyRateRecord_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyRateRecord_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyRateRecord_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyRateRecord_resultStandardSchemeFactory implements SchemeFactory {
      public getMyRateRecord_resultStandardScheme getScheme() {
        return new getMyRateRecord_resultStandardScheme();
      }
    }

    private static class getMyRateRecord_resultStandardScheme extends StandardScheme<getMyRateRecord_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyRateRecord_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MyRateRecordResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyRateRecord_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyRateRecord_resultTupleSchemeFactory implements SchemeFactory {
      public getMyRateRecord_resultTupleScheme getScheme() {
        return new getMyRateRecord_resultTupleScheme();
      }
    }

    private static class getMyRateRecord_resultTupleScheme extends TupleScheme<getMyRateRecord_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyRateRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyRateRecord_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MyRateRecordResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMyOpenedBottles_args implements org.apache.thrift.TBase<getMyOpenedBottles_args, getMyOpenedBottles_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyOpenedBottles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyOpenedBottles_args");

    private static final org.apache.thrift.protocol.TField MY_BOTTLES_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("myBottlesRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyOpenedBottles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyOpenedBottles_argsTupleSchemeFactory());
    }

    public MyBottlesRequest myBottlesRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MY_BOTTLES_REQUEST((short)1, "myBottlesRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MY_BOTTLES_REQUEST
            return MY_BOTTLES_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MY_BOTTLES_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("myBottlesRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyBottlesRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyOpenedBottles_args.class, metaDataMap);
    }

    public getMyOpenedBottles_args() {
    }

    public getMyOpenedBottles_args(
      MyBottlesRequest myBottlesRequest)
    {
      this();
      this.myBottlesRequest = myBottlesRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyOpenedBottles_args(getMyOpenedBottles_args other) {
      if (other.isSetMyBottlesRequest()) {
        this.myBottlesRequest = new MyBottlesRequest(other.myBottlesRequest);
      }
    }

    public getMyOpenedBottles_args deepCopy() {
      return new getMyOpenedBottles_args(this);
    }

    @Override
    public void clear() {
      this.myBottlesRequest = null;
    }

    public MyBottlesRequest getMyBottlesRequest() {
      return this.myBottlesRequest;
    }

    public getMyOpenedBottles_args setMyBottlesRequest(MyBottlesRequest myBottlesRequest) {
      this.myBottlesRequest = myBottlesRequest;
      return this;
    }

    public void unsetMyBottlesRequest() {
      this.myBottlesRequest = null;
    }

    /** Returns true if field myBottlesRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetMyBottlesRequest() {
      return this.myBottlesRequest != null;
    }

    public void setMyBottlesRequestIsSet(boolean value) {
      if (!value) {
        this.myBottlesRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MY_BOTTLES_REQUEST:
        if (value == null) {
          unsetMyBottlesRequest();
        } else {
          setMyBottlesRequest((MyBottlesRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MY_BOTTLES_REQUEST:
        return getMyBottlesRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MY_BOTTLES_REQUEST:
        return isSetMyBottlesRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyOpenedBottles_args)
        return this.equals((getMyOpenedBottles_args)that);
      return false;
    }

    public boolean equals(getMyOpenedBottles_args that) {
      if (that == null)
        return false;

      boolean this_present_myBottlesRequest = true && this.isSetMyBottlesRequest();
      boolean that_present_myBottlesRequest = true && that.isSetMyBottlesRequest();
      if (this_present_myBottlesRequest || that_present_myBottlesRequest) {
        if (!(this_present_myBottlesRequest && that_present_myBottlesRequest))
          return false;
        if (!this.myBottlesRequest.equals(that.myBottlesRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_myBottlesRequest = true && (isSetMyBottlesRequest());
      list.add(present_myBottlesRequest);
      if (present_myBottlesRequest)
        list.add(myBottlesRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyOpenedBottles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMyBottlesRequest()).compareTo(other.isSetMyBottlesRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyBottlesRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myBottlesRequest, other.myBottlesRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyOpenedBottles_args(");
      boolean first = true;

      sb.append("myBottlesRequest:");
      if (this.myBottlesRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.myBottlesRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (myBottlesRequest != null) {
        myBottlesRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyOpenedBottles_argsStandardSchemeFactory implements SchemeFactory {
      public getMyOpenedBottles_argsStandardScheme getScheme() {
        return new getMyOpenedBottles_argsStandardScheme();
      }
    }

    private static class getMyOpenedBottles_argsStandardScheme extends StandardScheme<getMyOpenedBottles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyOpenedBottles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MY_BOTTLES_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myBottlesRequest = new MyBottlesRequest();
                struct.myBottlesRequest.read(iprot);
                struct.setMyBottlesRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyOpenedBottles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.myBottlesRequest != null) {
          oprot.writeFieldBegin(MY_BOTTLES_REQUEST_FIELD_DESC);
          struct.myBottlesRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyOpenedBottles_argsTupleSchemeFactory implements SchemeFactory {
      public getMyOpenedBottles_argsTupleScheme getScheme() {
        return new getMyOpenedBottles_argsTupleScheme();
      }
    }

    private static class getMyOpenedBottles_argsTupleScheme extends TupleScheme<getMyOpenedBottles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyOpenedBottles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMyBottlesRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMyBottlesRequest()) {
          struct.myBottlesRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyOpenedBottles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.myBottlesRequest = new MyBottlesRequest();
          struct.myBottlesRequest.read(iprot);
          struct.setMyBottlesRequestIsSet(true);
        }
      }
    }

  }

  public static class getMyOpenedBottles_result implements org.apache.thrift.TBase<getMyOpenedBottles_result, getMyOpenedBottles_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyOpenedBottles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyOpenedBottles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyOpenedBottles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyOpenedBottles_resultTupleSchemeFactory());
    }

    public OpenedBottlesResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OpenedBottlesResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyOpenedBottles_result.class, metaDataMap);
    }

    public getMyOpenedBottles_result() {
    }

    public getMyOpenedBottles_result(
      OpenedBottlesResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyOpenedBottles_result(getMyOpenedBottles_result other) {
      if (other.isSetSuccess()) {
        this.success = new OpenedBottlesResponse(other.success);
      }
    }

    public getMyOpenedBottles_result deepCopy() {
      return new getMyOpenedBottles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public OpenedBottlesResponse getSuccess() {
      return this.success;
    }

    public getMyOpenedBottles_result setSuccess(OpenedBottlesResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((OpenedBottlesResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyOpenedBottles_result)
        return this.equals((getMyOpenedBottles_result)that);
      return false;
    }

    public boolean equals(getMyOpenedBottles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyOpenedBottles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyOpenedBottles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyOpenedBottles_resultStandardSchemeFactory implements SchemeFactory {
      public getMyOpenedBottles_resultStandardScheme getScheme() {
        return new getMyOpenedBottles_resultStandardScheme();
      }
    }

    private static class getMyOpenedBottles_resultStandardScheme extends StandardScheme<getMyOpenedBottles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyOpenedBottles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new OpenedBottlesResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyOpenedBottles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyOpenedBottles_resultTupleSchemeFactory implements SchemeFactory {
      public getMyOpenedBottles_resultTupleScheme getScheme() {
        return new getMyOpenedBottles_resultTupleScheme();
      }
    }

    private static class getMyOpenedBottles_resultTupleScheme extends TupleScheme<getMyOpenedBottles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyOpenedBottles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyOpenedBottles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new OpenedBottlesResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMyScannedBottles_args implements org.apache.thrift.TBase<getMyScannedBottles_args, getMyScannedBottles_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyScannedBottles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyScannedBottles_args");

    private static final org.apache.thrift.protocol.TField MY_BOTTLES_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("myBottlesRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyScannedBottles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyScannedBottles_argsTupleSchemeFactory());
    }

    public MyBottlesRequest myBottlesRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MY_BOTTLES_REQUEST((short)1, "myBottlesRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MY_BOTTLES_REQUEST
            return MY_BOTTLES_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MY_BOTTLES_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("myBottlesRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyBottlesRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyScannedBottles_args.class, metaDataMap);
    }

    public getMyScannedBottles_args() {
    }

    public getMyScannedBottles_args(
      MyBottlesRequest myBottlesRequest)
    {
      this();
      this.myBottlesRequest = myBottlesRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyScannedBottles_args(getMyScannedBottles_args other) {
      if (other.isSetMyBottlesRequest()) {
        this.myBottlesRequest = new MyBottlesRequest(other.myBottlesRequest);
      }
    }

    public getMyScannedBottles_args deepCopy() {
      return new getMyScannedBottles_args(this);
    }

    @Override
    public void clear() {
      this.myBottlesRequest = null;
    }

    public MyBottlesRequest getMyBottlesRequest() {
      return this.myBottlesRequest;
    }

    public getMyScannedBottles_args setMyBottlesRequest(MyBottlesRequest myBottlesRequest) {
      this.myBottlesRequest = myBottlesRequest;
      return this;
    }

    public void unsetMyBottlesRequest() {
      this.myBottlesRequest = null;
    }

    /** Returns true if field myBottlesRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetMyBottlesRequest() {
      return this.myBottlesRequest != null;
    }

    public void setMyBottlesRequestIsSet(boolean value) {
      if (!value) {
        this.myBottlesRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MY_BOTTLES_REQUEST:
        if (value == null) {
          unsetMyBottlesRequest();
        } else {
          setMyBottlesRequest((MyBottlesRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MY_BOTTLES_REQUEST:
        return getMyBottlesRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MY_BOTTLES_REQUEST:
        return isSetMyBottlesRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyScannedBottles_args)
        return this.equals((getMyScannedBottles_args)that);
      return false;
    }

    public boolean equals(getMyScannedBottles_args that) {
      if (that == null)
        return false;

      boolean this_present_myBottlesRequest = true && this.isSetMyBottlesRequest();
      boolean that_present_myBottlesRequest = true && that.isSetMyBottlesRequest();
      if (this_present_myBottlesRequest || that_present_myBottlesRequest) {
        if (!(this_present_myBottlesRequest && that_present_myBottlesRequest))
          return false;
        if (!this.myBottlesRequest.equals(that.myBottlesRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_myBottlesRequest = true && (isSetMyBottlesRequest());
      list.add(present_myBottlesRequest);
      if (present_myBottlesRequest)
        list.add(myBottlesRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyScannedBottles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMyBottlesRequest()).compareTo(other.isSetMyBottlesRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyBottlesRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myBottlesRequest, other.myBottlesRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyScannedBottles_args(");
      boolean first = true;

      sb.append("myBottlesRequest:");
      if (this.myBottlesRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.myBottlesRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (myBottlesRequest != null) {
        myBottlesRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyScannedBottles_argsStandardSchemeFactory implements SchemeFactory {
      public getMyScannedBottles_argsStandardScheme getScheme() {
        return new getMyScannedBottles_argsStandardScheme();
      }
    }

    private static class getMyScannedBottles_argsStandardScheme extends StandardScheme<getMyScannedBottles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyScannedBottles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MY_BOTTLES_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myBottlesRequest = new MyBottlesRequest();
                struct.myBottlesRequest.read(iprot);
                struct.setMyBottlesRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyScannedBottles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.myBottlesRequest != null) {
          oprot.writeFieldBegin(MY_BOTTLES_REQUEST_FIELD_DESC);
          struct.myBottlesRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyScannedBottles_argsTupleSchemeFactory implements SchemeFactory {
      public getMyScannedBottles_argsTupleScheme getScheme() {
        return new getMyScannedBottles_argsTupleScheme();
      }
    }

    private static class getMyScannedBottles_argsTupleScheme extends TupleScheme<getMyScannedBottles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyScannedBottles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMyBottlesRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMyBottlesRequest()) {
          struct.myBottlesRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyScannedBottles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.myBottlesRequest = new MyBottlesRequest();
          struct.myBottlesRequest.read(iprot);
          struct.setMyBottlesRequestIsSet(true);
        }
      }
    }

  }

  public static class getMyScannedBottles_result implements org.apache.thrift.TBase<getMyScannedBottles_result, getMyScannedBottles_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyScannedBottles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyScannedBottles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyScannedBottles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyScannedBottles_resultTupleSchemeFactory());
    }

    public ScannedBottlesResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ScannedBottlesResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyScannedBottles_result.class, metaDataMap);
    }

    public getMyScannedBottles_result() {
    }

    public getMyScannedBottles_result(
      ScannedBottlesResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyScannedBottles_result(getMyScannedBottles_result other) {
      if (other.isSetSuccess()) {
        this.success = new ScannedBottlesResponse(other.success);
      }
    }

    public getMyScannedBottles_result deepCopy() {
      return new getMyScannedBottles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ScannedBottlesResponse getSuccess() {
      return this.success;
    }

    public getMyScannedBottles_result setSuccess(ScannedBottlesResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ScannedBottlesResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyScannedBottles_result)
        return this.equals((getMyScannedBottles_result)that);
      return false;
    }

    public boolean equals(getMyScannedBottles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyScannedBottles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyScannedBottles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyScannedBottles_resultStandardSchemeFactory implements SchemeFactory {
      public getMyScannedBottles_resultStandardScheme getScheme() {
        return new getMyScannedBottles_resultStandardScheme();
      }
    }

    private static class getMyScannedBottles_resultStandardScheme extends StandardScheme<getMyScannedBottles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyScannedBottles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ScannedBottlesResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyScannedBottles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyScannedBottles_resultTupleSchemeFactory implements SchemeFactory {
      public getMyScannedBottles_resultTupleScheme getScheme() {
        return new getMyScannedBottles_resultTupleScheme();
      }
    }

    private static class getMyScannedBottles_resultTupleScheme extends TupleScheme<getMyScannedBottles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyScannedBottles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyScannedBottles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ScannedBottlesResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMyRatedBottles_args implements org.apache.thrift.TBase<getMyRatedBottles_args, getMyRatedBottles_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyRatedBottles_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyRatedBottles_args");

    private static final org.apache.thrift.protocol.TField MY_BOTTLES_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("myBottlesRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyRatedBottles_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyRatedBottles_argsTupleSchemeFactory());
    }

    public MyBottlesRequest myBottlesRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MY_BOTTLES_REQUEST((short)1, "myBottlesRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MY_BOTTLES_REQUEST
            return MY_BOTTLES_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MY_BOTTLES_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("myBottlesRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyBottlesRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyRatedBottles_args.class, metaDataMap);
    }

    public getMyRatedBottles_args() {
    }

    public getMyRatedBottles_args(
      MyBottlesRequest myBottlesRequest)
    {
      this();
      this.myBottlesRequest = myBottlesRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyRatedBottles_args(getMyRatedBottles_args other) {
      if (other.isSetMyBottlesRequest()) {
        this.myBottlesRequest = new MyBottlesRequest(other.myBottlesRequest);
      }
    }

    public getMyRatedBottles_args deepCopy() {
      return new getMyRatedBottles_args(this);
    }

    @Override
    public void clear() {
      this.myBottlesRequest = null;
    }

    public MyBottlesRequest getMyBottlesRequest() {
      return this.myBottlesRequest;
    }

    public getMyRatedBottles_args setMyBottlesRequest(MyBottlesRequest myBottlesRequest) {
      this.myBottlesRequest = myBottlesRequest;
      return this;
    }

    public void unsetMyBottlesRequest() {
      this.myBottlesRequest = null;
    }

    /** Returns true if field myBottlesRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetMyBottlesRequest() {
      return this.myBottlesRequest != null;
    }

    public void setMyBottlesRequestIsSet(boolean value) {
      if (!value) {
        this.myBottlesRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MY_BOTTLES_REQUEST:
        if (value == null) {
          unsetMyBottlesRequest();
        } else {
          setMyBottlesRequest((MyBottlesRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MY_BOTTLES_REQUEST:
        return getMyBottlesRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MY_BOTTLES_REQUEST:
        return isSetMyBottlesRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyRatedBottles_args)
        return this.equals((getMyRatedBottles_args)that);
      return false;
    }

    public boolean equals(getMyRatedBottles_args that) {
      if (that == null)
        return false;

      boolean this_present_myBottlesRequest = true && this.isSetMyBottlesRequest();
      boolean that_present_myBottlesRequest = true && that.isSetMyBottlesRequest();
      if (this_present_myBottlesRequest || that_present_myBottlesRequest) {
        if (!(this_present_myBottlesRequest && that_present_myBottlesRequest))
          return false;
        if (!this.myBottlesRequest.equals(that.myBottlesRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_myBottlesRequest = true && (isSetMyBottlesRequest());
      list.add(present_myBottlesRequest);
      if (present_myBottlesRequest)
        list.add(myBottlesRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyRatedBottles_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMyBottlesRequest()).compareTo(other.isSetMyBottlesRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyBottlesRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myBottlesRequest, other.myBottlesRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyRatedBottles_args(");
      boolean first = true;

      sb.append("myBottlesRequest:");
      if (this.myBottlesRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.myBottlesRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (myBottlesRequest != null) {
        myBottlesRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyRatedBottles_argsStandardSchemeFactory implements SchemeFactory {
      public getMyRatedBottles_argsStandardScheme getScheme() {
        return new getMyRatedBottles_argsStandardScheme();
      }
    }

    private static class getMyRatedBottles_argsStandardScheme extends StandardScheme<getMyRatedBottles_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyRatedBottles_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MY_BOTTLES_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myBottlesRequest = new MyBottlesRequest();
                struct.myBottlesRequest.read(iprot);
                struct.setMyBottlesRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyRatedBottles_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.myBottlesRequest != null) {
          oprot.writeFieldBegin(MY_BOTTLES_REQUEST_FIELD_DESC);
          struct.myBottlesRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyRatedBottles_argsTupleSchemeFactory implements SchemeFactory {
      public getMyRatedBottles_argsTupleScheme getScheme() {
        return new getMyRatedBottles_argsTupleScheme();
      }
    }

    private static class getMyRatedBottles_argsTupleScheme extends TupleScheme<getMyRatedBottles_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyRatedBottles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMyBottlesRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMyBottlesRequest()) {
          struct.myBottlesRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyRatedBottles_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.myBottlesRequest = new MyBottlesRequest();
          struct.myBottlesRequest.read(iprot);
          struct.setMyBottlesRequestIsSet(true);
        }
      }
    }

  }

  public static class getMyRatedBottles_result implements org.apache.thrift.TBase<getMyRatedBottles_result, getMyRatedBottles_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyRatedBottles_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyRatedBottles_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyRatedBottles_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyRatedBottles_resultTupleSchemeFactory());
    }

    public RatedBottlesResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RatedBottlesResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyRatedBottles_result.class, metaDataMap);
    }

    public getMyRatedBottles_result() {
    }

    public getMyRatedBottles_result(
      RatedBottlesResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyRatedBottles_result(getMyRatedBottles_result other) {
      if (other.isSetSuccess()) {
        this.success = new RatedBottlesResponse(other.success);
      }
    }

    public getMyRatedBottles_result deepCopy() {
      return new getMyRatedBottles_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RatedBottlesResponse getSuccess() {
      return this.success;
    }

    public getMyRatedBottles_result setSuccess(RatedBottlesResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RatedBottlesResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyRatedBottles_result)
        return this.equals((getMyRatedBottles_result)that);
      return false;
    }

    public boolean equals(getMyRatedBottles_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyRatedBottles_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyRatedBottles_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyRatedBottles_resultStandardSchemeFactory implements SchemeFactory {
      public getMyRatedBottles_resultStandardScheme getScheme() {
        return new getMyRatedBottles_resultStandardScheme();
      }
    }

    private static class getMyRatedBottles_resultStandardScheme extends StandardScheme<getMyRatedBottles_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyRatedBottles_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RatedBottlesResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyRatedBottles_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyRatedBottles_resultTupleSchemeFactory implements SchemeFactory {
      public getMyRatedBottles_resultTupleScheme getScheme() {
        return new getMyRatedBottles_resultTupleScheme();
      }
    }

    private static class getMyRatedBottles_resultTupleScheme extends TupleScheme<getMyRatedBottles_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyRatedBottles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyRatedBottles_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RatedBottlesResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMyNewsFeed_args implements org.apache.thrift.TBase<getMyNewsFeed_args, getMyNewsFeed_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyNewsFeed_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyNewsFeed_args");

    private static final org.apache.thrift.protocol.TField NEWS_FEED_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("newsFeedRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyNewsFeed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyNewsFeed_argsTupleSchemeFactory());
    }

    public NewsFeedRequest newsFeedRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NEWS_FEED_REQUEST((short)1, "newsFeedRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NEWS_FEED_REQUEST
            return NEWS_FEED_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NEWS_FEED_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("newsFeedRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NewsFeedRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyNewsFeed_args.class, metaDataMap);
    }

    public getMyNewsFeed_args() {
    }

    public getMyNewsFeed_args(
      NewsFeedRequest newsFeedRequest)
    {
      this();
      this.newsFeedRequest = newsFeedRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyNewsFeed_args(getMyNewsFeed_args other) {
      if (other.isSetNewsFeedRequest()) {
        this.newsFeedRequest = new NewsFeedRequest(other.newsFeedRequest);
      }
    }

    public getMyNewsFeed_args deepCopy() {
      return new getMyNewsFeed_args(this);
    }

    @Override
    public void clear() {
      this.newsFeedRequest = null;
    }

    public NewsFeedRequest getNewsFeedRequest() {
      return this.newsFeedRequest;
    }

    public getMyNewsFeed_args setNewsFeedRequest(NewsFeedRequest newsFeedRequest) {
      this.newsFeedRequest = newsFeedRequest;
      return this;
    }

    public void unsetNewsFeedRequest() {
      this.newsFeedRequest = null;
    }

    /** Returns true if field newsFeedRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetNewsFeedRequest() {
      return this.newsFeedRequest != null;
    }

    public void setNewsFeedRequestIsSet(boolean value) {
      if (!value) {
        this.newsFeedRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case NEWS_FEED_REQUEST:
        if (value == null) {
          unsetNewsFeedRequest();
        } else {
          setNewsFeedRequest((NewsFeedRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case NEWS_FEED_REQUEST:
        return getNewsFeedRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case NEWS_FEED_REQUEST:
        return isSetNewsFeedRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyNewsFeed_args)
        return this.equals((getMyNewsFeed_args)that);
      return false;
    }

    public boolean equals(getMyNewsFeed_args that) {
      if (that == null)
        return false;

      boolean this_present_newsFeedRequest = true && this.isSetNewsFeedRequest();
      boolean that_present_newsFeedRequest = true && that.isSetNewsFeedRequest();
      if (this_present_newsFeedRequest || that_present_newsFeedRequest) {
        if (!(this_present_newsFeedRequest && that_present_newsFeedRequest))
          return false;
        if (!this.newsFeedRequest.equals(that.newsFeedRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_newsFeedRequest = true && (isSetNewsFeedRequest());
      list.add(present_newsFeedRequest);
      if (present_newsFeedRequest)
        list.add(newsFeedRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyNewsFeed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetNewsFeedRequest()).compareTo(other.isSetNewsFeedRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewsFeedRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newsFeedRequest, other.newsFeedRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyNewsFeed_args(");
      boolean first = true;

      sb.append("newsFeedRequest:");
      if (this.newsFeedRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.newsFeedRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (newsFeedRequest != null) {
        newsFeedRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyNewsFeed_argsStandardSchemeFactory implements SchemeFactory {
      public getMyNewsFeed_argsStandardScheme getScheme() {
        return new getMyNewsFeed_argsStandardScheme();
      }
    }

    private static class getMyNewsFeed_argsStandardScheme extends StandardScheme<getMyNewsFeed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyNewsFeed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NEWS_FEED_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.newsFeedRequest = new NewsFeedRequest();
                struct.newsFeedRequest.read(iprot);
                struct.setNewsFeedRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyNewsFeed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.newsFeedRequest != null) {
          oprot.writeFieldBegin(NEWS_FEED_REQUEST_FIELD_DESC);
          struct.newsFeedRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyNewsFeed_argsTupleSchemeFactory implements SchemeFactory {
      public getMyNewsFeed_argsTupleScheme getScheme() {
        return new getMyNewsFeed_argsTupleScheme();
      }
    }

    private static class getMyNewsFeed_argsTupleScheme extends TupleScheme<getMyNewsFeed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyNewsFeed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetNewsFeedRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetNewsFeedRequest()) {
          struct.newsFeedRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyNewsFeed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.newsFeedRequest = new NewsFeedRequest();
          struct.newsFeedRequest.read(iprot);
          struct.setNewsFeedRequestIsSet(true);
        }
      }
    }

  }

  public static class getMyNewsFeed_result implements org.apache.thrift.TBase<getMyNewsFeed_result, getMyNewsFeed_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyNewsFeed_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyNewsFeed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyNewsFeed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyNewsFeed_resultTupleSchemeFactory());
    }

    public NewsFeedResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NewsFeedResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyNewsFeed_result.class, metaDataMap);
    }

    public getMyNewsFeed_result() {
    }

    public getMyNewsFeed_result(
      NewsFeedResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyNewsFeed_result(getMyNewsFeed_result other) {
      if (other.isSetSuccess()) {
        this.success = new NewsFeedResponse(other.success);
      }
    }

    public getMyNewsFeed_result deepCopy() {
      return new getMyNewsFeed_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public NewsFeedResponse getSuccess() {
      return this.success;
    }

    public getMyNewsFeed_result setSuccess(NewsFeedResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((NewsFeedResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyNewsFeed_result)
        return this.equals((getMyNewsFeed_result)that);
      return false;
    }

    public boolean equals(getMyNewsFeed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyNewsFeed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyNewsFeed_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyNewsFeed_resultStandardSchemeFactory implements SchemeFactory {
      public getMyNewsFeed_resultStandardScheme getScheme() {
        return new getMyNewsFeed_resultStandardScheme();
      }
    }

    private static class getMyNewsFeed_resultStandardScheme extends StandardScheme<getMyNewsFeed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyNewsFeed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new NewsFeedResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyNewsFeed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyNewsFeed_resultTupleSchemeFactory implements SchemeFactory {
      public getMyNewsFeed_resultTupleScheme getScheme() {
        return new getMyNewsFeed_resultTupleScheme();
      }
    }

    private static class getMyNewsFeed_resultTupleScheme extends TupleScheme<getMyNewsFeed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyNewsFeed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyNewsFeed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new NewsFeedResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getWineryInfo_args implements org.apache.thrift.TBase<getWineryInfo_args, getWineryInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getWineryInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWineryInfo_args");

    private static final org.apache.thrift.protocol.TField WINERY_INFO_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("wineryInfoRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWineryInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWineryInfo_argsTupleSchemeFactory());
    }

    public WineryInfoRequest wineryInfoRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WINERY_INFO_REQUEST((short)1, "wineryInfoRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WINERY_INFO_REQUEST
            return WINERY_INFO_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WINERY_INFO_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("wineryInfoRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WineryInfoRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWineryInfo_args.class, metaDataMap);
    }

    public getWineryInfo_args() {
    }

    public getWineryInfo_args(
      WineryInfoRequest wineryInfoRequest)
    {
      this();
      this.wineryInfoRequest = wineryInfoRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWineryInfo_args(getWineryInfo_args other) {
      if (other.isSetWineryInfoRequest()) {
        this.wineryInfoRequest = new WineryInfoRequest(other.wineryInfoRequest);
      }
    }

    public getWineryInfo_args deepCopy() {
      return new getWineryInfo_args(this);
    }

    @Override
    public void clear() {
      this.wineryInfoRequest = null;
    }

    public WineryInfoRequest getWineryInfoRequest() {
      return this.wineryInfoRequest;
    }

    public getWineryInfo_args setWineryInfoRequest(WineryInfoRequest wineryInfoRequest) {
      this.wineryInfoRequest = wineryInfoRequest;
      return this;
    }

    public void unsetWineryInfoRequest() {
      this.wineryInfoRequest = null;
    }

    /** Returns true if field wineryInfoRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetWineryInfoRequest() {
      return this.wineryInfoRequest != null;
    }

    public void setWineryInfoRequestIsSet(boolean value) {
      if (!value) {
        this.wineryInfoRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WINERY_INFO_REQUEST:
        if (value == null) {
          unsetWineryInfoRequest();
        } else {
          setWineryInfoRequest((WineryInfoRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WINERY_INFO_REQUEST:
        return getWineryInfoRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WINERY_INFO_REQUEST:
        return isSetWineryInfoRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWineryInfo_args)
        return this.equals((getWineryInfo_args)that);
      return false;
    }

    public boolean equals(getWineryInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_wineryInfoRequest = true && this.isSetWineryInfoRequest();
      boolean that_present_wineryInfoRequest = true && that.isSetWineryInfoRequest();
      if (this_present_wineryInfoRequest || that_present_wineryInfoRequest) {
        if (!(this_present_wineryInfoRequest && that_present_wineryInfoRequest))
          return false;
        if (!this.wineryInfoRequest.equals(that.wineryInfoRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_wineryInfoRequest = true && (isSetWineryInfoRequest());
      list.add(present_wineryInfoRequest);
      if (present_wineryInfoRequest)
        list.add(wineryInfoRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(getWineryInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWineryInfoRequest()).compareTo(other.isSetWineryInfoRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWineryInfoRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineryInfoRequest, other.wineryInfoRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWineryInfo_args(");
      boolean first = true;

      sb.append("wineryInfoRequest:");
      if (this.wineryInfoRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.wineryInfoRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (wineryInfoRequest != null) {
        wineryInfoRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWineryInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getWineryInfo_argsStandardScheme getScheme() {
        return new getWineryInfo_argsStandardScheme();
      }
    }

    private static class getWineryInfo_argsStandardScheme extends StandardScheme<getWineryInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWineryInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WINERY_INFO_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.wineryInfoRequest = new WineryInfoRequest();
                struct.wineryInfoRequest.read(iprot);
                struct.setWineryInfoRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWineryInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.wineryInfoRequest != null) {
          oprot.writeFieldBegin(WINERY_INFO_REQUEST_FIELD_DESC);
          struct.wineryInfoRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWineryInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getWineryInfo_argsTupleScheme getScheme() {
        return new getWineryInfo_argsTupleScheme();
      }
    }

    private static class getWineryInfo_argsTupleScheme extends TupleScheme<getWineryInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWineryInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWineryInfoRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetWineryInfoRequest()) {
          struct.wineryInfoRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWineryInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.wineryInfoRequest = new WineryInfoRequest();
          struct.wineryInfoRequest.read(iprot);
          struct.setWineryInfoRequestIsSet(true);
        }
      }
    }

  }

  public static class getWineryInfo_result implements org.apache.thrift.TBase<getWineryInfo_result, getWineryInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getWineryInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getWineryInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getWineryInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getWineryInfo_resultTupleSchemeFactory());
    }

    public WineryInfoResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, WineryInfoResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getWineryInfo_result.class, metaDataMap);
    }

    public getWineryInfo_result() {
    }

    public getWineryInfo_result(
      WineryInfoResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getWineryInfo_result(getWineryInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new WineryInfoResponse(other.success);
      }
    }

    public getWineryInfo_result deepCopy() {
      return new getWineryInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public WineryInfoResponse getSuccess() {
      return this.success;
    }

    public getWineryInfo_result setSuccess(WineryInfoResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((WineryInfoResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getWineryInfo_result)
        return this.equals((getWineryInfo_result)that);
      return false;
    }

    public boolean equals(getWineryInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getWineryInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getWineryInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getWineryInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getWineryInfo_resultStandardScheme getScheme() {
        return new getWineryInfo_resultStandardScheme();
      }
    }

    private static class getWineryInfo_resultStandardScheme extends StandardScheme<getWineryInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getWineryInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new WineryInfoResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getWineryInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getWineryInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getWineryInfo_resultTupleScheme getScheme() {
        return new getWineryInfo_resultTupleScheme();
      }
    }

    private static class getWineryInfo_resultTupleScheme extends TupleScheme<getWineryInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getWineryInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getWineryInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new WineryInfoResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class followUser_args implements org.apache.thrift.TBase<followUser_args, followUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<followUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("followUser_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TO_FOLLOW_FIELD_DESC = new org.apache.thrift.protocol.TField("userToFollow", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new followUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new followUser_argsTupleSchemeFactory());
    }

    public int user; // required
    public int userToFollow; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user"),
      USER_TO_FOLLOW((short)2, "userToFollow");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // USER_TO_FOLLOW
            return USER_TO_FOLLOW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USER_ISSET_ID = 0;
    private static final int __USERTOFOLLOW_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_TO_FOLLOW, new org.apache.thrift.meta_data.FieldMetaData("userToFollow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(followUser_args.class, metaDataMap);
    }

    public followUser_args() {
    }

    public followUser_args(
      int user,
      int userToFollow)
    {
      this();
      this.user = user;
      setUserIsSet(true);
      this.userToFollow = userToFollow;
      setUserToFollowIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public followUser_args(followUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.user = other.user;
      this.userToFollow = other.userToFollow;
    }

    public followUser_args deepCopy() {
      return new followUser_args(this);
    }

    @Override
    public void clear() {
      setUserIsSet(false);
      this.user = 0;
      setUserToFollowIsSet(false);
      this.userToFollow = 0;
    }

    public int getUser() {
      return this.user;
    }

    public followUser_args setUser(int user) {
      this.user = user;
      setUserIsSet(true);
      return this;
    }

    public void unsetUser() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_ISSET_ID);
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return EncodingUtils.testBit(__isset_bitfield, __USER_ISSET_ID);
    }

    public void setUserIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_ISSET_ID, value);
    }

    public int getUserToFollow() {
      return this.userToFollow;
    }

    public followUser_args setUserToFollow(int userToFollow) {
      this.userToFollow = userToFollow;
      setUserToFollowIsSet(true);
      return this;
    }

    public void unsetUserToFollow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTOFOLLOW_ISSET_ID);
    }

    /** Returns true if field userToFollow is set (has been assigned a value) and false otherwise */
    public boolean isSetUserToFollow() {
      return EncodingUtils.testBit(__isset_bitfield, __USERTOFOLLOW_ISSET_ID);
    }

    public void setUserToFollowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTOFOLLOW_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((Integer)value);
        }
        break;

      case USER_TO_FOLLOW:
        if (value == null) {
          unsetUserToFollow();
        } else {
          setUserToFollow((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case USER_TO_FOLLOW:
        return getUserToFollow();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case USER_TO_FOLLOW:
        return isSetUserToFollow();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof followUser_args)
        return this.equals((followUser_args)that);
      return false;
    }

    public boolean equals(followUser_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true;
      boolean that_present_user = true;
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (this.user != that.user)
          return false;
      }

      boolean this_present_userToFollow = true;
      boolean that_present_userToFollow = true;
      if (this_present_userToFollow || that_present_userToFollow) {
        if (!(this_present_userToFollow && that_present_userToFollow))
          return false;
        if (this.userToFollow != that.userToFollow)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user = true;
      list.add(present_user);
      if (present_user)
        list.add(user);

      boolean present_userToFollow = true;
      list.add(present_userToFollow);
      if (present_userToFollow)
        list.add(userToFollow);

      return list.hashCode();
    }

    @Override
    public int compareTo(followUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserToFollow()).compareTo(other.isSetUserToFollow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserToFollow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userToFollow, other.userToFollow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("followUser_args(");
      boolean first = true;

      sb.append("user:");
      sb.append(this.user);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userToFollow:");
      sb.append(this.userToFollow);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class followUser_argsStandardSchemeFactory implements SchemeFactory {
      public followUser_argsStandardScheme getScheme() {
        return new followUser_argsStandardScheme();
      }
    }

    private static class followUser_argsStandardScheme extends StandardScheme<followUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, followUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.user = iprot.readI32();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TO_FOLLOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userToFollow = iprot.readI32();
                struct.setUserToFollowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, followUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeI32(struct.user);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_TO_FOLLOW_FIELD_DESC);
        oprot.writeI32(struct.userToFollow);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class followUser_argsTupleSchemeFactory implements SchemeFactory {
      public followUser_argsTupleScheme getScheme() {
        return new followUser_argsTupleScheme();
      }
    }

    private static class followUser_argsTupleScheme extends TupleScheme<followUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, followUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetUserToFollow()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser()) {
          oprot.writeI32(struct.user);
        }
        if (struct.isSetUserToFollow()) {
          oprot.writeI32(struct.userToFollow);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, followUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user = iprot.readI32();
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userToFollow = iprot.readI32();
          struct.setUserToFollowIsSet(true);
        }
      }
    }

  }

  public static class followUser_result implements org.apache.thrift.TBase<followUser_result, followUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<followUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("followUser_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new followUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new followUser_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(followUser_result.class, metaDataMap);
    }

    public followUser_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public followUser_result(followUser_result other) {
    }

    public followUser_result deepCopy() {
      return new followUser_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof followUser_result)
        return this.equals((followUser_result)that);
      return false;
    }

    public boolean equals(followUser_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(followUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("followUser_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class followUser_resultStandardSchemeFactory implements SchemeFactory {
      public followUser_resultStandardScheme getScheme() {
        return new followUser_resultStandardScheme();
      }
    }

    private static class followUser_resultStandardScheme extends StandardScheme<followUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, followUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, followUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class followUser_resultTupleSchemeFactory implements SchemeFactory {
      public followUser_resultTupleScheme getScheme() {
        return new followUser_resultTupleScheme();
      }
    }

    private static class followUser_resultTupleScheme extends TupleScheme<followUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, followUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, followUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class unfollowUser_args implements org.apache.thrift.TBase<unfollowUser_args, unfollowUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<unfollowUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unfollowUser_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER_TO_UNFOLLOW_FIELD_DESC = new org.apache.thrift.protocol.TField("userToUnfollow", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unfollowUser_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unfollowUser_argsTupleSchemeFactory());
    }

    public int user; // required
    public int userToUnfollow; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user"),
      USER_TO_UNFOLLOW((short)2, "userToUnfollow");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          case 2: // USER_TO_UNFOLLOW
            return USER_TO_UNFOLLOW;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USER_ISSET_ID = 0;
    private static final int __USERTOUNFOLLOW_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER_TO_UNFOLLOW, new org.apache.thrift.meta_data.FieldMetaData("userToUnfollow", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unfollowUser_args.class, metaDataMap);
    }

    public unfollowUser_args() {
    }

    public unfollowUser_args(
      int user,
      int userToUnfollow)
    {
      this();
      this.user = user;
      setUserIsSet(true);
      this.userToUnfollow = userToUnfollow;
      setUserToUnfollowIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unfollowUser_args(unfollowUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.user = other.user;
      this.userToUnfollow = other.userToUnfollow;
    }

    public unfollowUser_args deepCopy() {
      return new unfollowUser_args(this);
    }

    @Override
    public void clear() {
      setUserIsSet(false);
      this.user = 0;
      setUserToUnfollowIsSet(false);
      this.userToUnfollow = 0;
    }

    public int getUser() {
      return this.user;
    }

    public unfollowUser_args setUser(int user) {
      this.user = user;
      setUserIsSet(true);
      return this;
    }

    public void unsetUser() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER_ISSET_ID);
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return EncodingUtils.testBit(__isset_bitfield, __USER_ISSET_ID);
    }

    public void setUserIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER_ISSET_ID, value);
    }

    public int getUserToUnfollow() {
      return this.userToUnfollow;
    }

    public unfollowUser_args setUserToUnfollow(int userToUnfollow) {
      this.userToUnfollow = userToUnfollow;
      setUserToUnfollowIsSet(true);
      return this;
    }

    public void unsetUserToUnfollow() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERTOUNFOLLOW_ISSET_ID);
    }

    /** Returns true if field userToUnfollow is set (has been assigned a value) and false otherwise */
    public boolean isSetUserToUnfollow() {
      return EncodingUtils.testBit(__isset_bitfield, __USERTOUNFOLLOW_ISSET_ID);
    }

    public void setUserToUnfollowIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERTOUNFOLLOW_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((Integer)value);
        }
        break;

      case USER_TO_UNFOLLOW:
        if (value == null) {
          unsetUserToUnfollow();
        } else {
          setUserToUnfollow((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      case USER_TO_UNFOLLOW:
        return getUserToUnfollow();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      case USER_TO_UNFOLLOW:
        return isSetUserToUnfollow();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unfollowUser_args)
        return this.equals((unfollowUser_args)that);
      return false;
    }

    public boolean equals(unfollowUser_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true;
      boolean that_present_user = true;
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (this.user != that.user)
          return false;
      }

      boolean this_present_userToUnfollow = true;
      boolean that_present_userToUnfollow = true;
      if (this_present_userToUnfollow || that_present_userToUnfollow) {
        if (!(this_present_userToUnfollow && that_present_userToUnfollow))
          return false;
        if (this.userToUnfollow != that.userToUnfollow)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user = true;
      list.add(present_user);
      if (present_user)
        list.add(user);

      boolean present_userToUnfollow = true;
      list.add(present_userToUnfollow);
      if (present_userToUnfollow)
        list.add(userToUnfollow);

      return list.hashCode();
    }

    @Override
    public int compareTo(unfollowUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUserToUnfollow()).compareTo(other.isSetUserToUnfollow());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserToUnfollow()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userToUnfollow, other.userToUnfollow);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unfollowUser_args(");
      boolean first = true;

      sb.append("user:");
      sb.append(this.user);
      first = false;
      if (!first) sb.append(", ");
      sb.append("userToUnfollow:");
      sb.append(this.userToUnfollow);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unfollowUser_argsStandardSchemeFactory implements SchemeFactory {
      public unfollowUser_argsStandardScheme getScheme() {
        return new unfollowUser_argsStandardScheme();
      }
    }

    private static class unfollowUser_argsStandardScheme extends StandardScheme<unfollowUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unfollowUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.user = iprot.readI32();
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_TO_UNFOLLOW
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userToUnfollow = iprot.readI32();
                struct.setUserToUnfollowIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unfollowUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_FIELD_DESC);
        oprot.writeI32(struct.user);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER_TO_UNFOLLOW_FIELD_DESC);
        oprot.writeI32(struct.userToUnfollow);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unfollowUser_argsTupleSchemeFactory implements SchemeFactory {
      public unfollowUser_argsTupleScheme getScheme() {
        return new unfollowUser_argsTupleScheme();
      }
    }

    private static class unfollowUser_argsTupleScheme extends TupleScheme<unfollowUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unfollowUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        if (struct.isSetUserToUnfollow()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser()) {
          oprot.writeI32(struct.user);
        }
        if (struct.isSetUserToUnfollow()) {
          oprot.writeI32(struct.userToUnfollow);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unfollowUser_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user = iprot.readI32();
          struct.setUserIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userToUnfollow = iprot.readI32();
          struct.setUserToUnfollowIsSet(true);
        }
      }
    }

  }

  public static class unfollowUser_result implements org.apache.thrift.TBase<unfollowUser_result, unfollowUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<unfollowUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unfollowUser_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unfollowUser_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unfollowUser_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unfollowUser_result.class, metaDataMap);
    }

    public unfollowUser_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public unfollowUser_result(unfollowUser_result other) {
    }

    public unfollowUser_result deepCopy() {
      return new unfollowUser_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unfollowUser_result)
        return this.equals((unfollowUser_result)that);
      return false;
    }

    public boolean equals(unfollowUser_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(unfollowUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unfollowUser_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class unfollowUser_resultStandardSchemeFactory implements SchemeFactory {
      public unfollowUser_resultStandardScheme getScheme() {
        return new unfollowUser_resultStandardScheme();
      }
    }

    private static class unfollowUser_resultStandardScheme extends StandardScheme<unfollowUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, unfollowUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, unfollowUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class unfollowUser_resultTupleSchemeFactory implements SchemeFactory {
      public unfollowUser_resultTupleScheme getScheme() {
        return new unfollowUser_resultTupleScheme();
      }
    }

    private static class unfollowUser_resultTupleScheme extends TupleScheme<unfollowUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unfollowUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unfollowUser_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class addFriend_args implements org.apache.thrift.TBase<addFriend_args, addFriend_args._Fields>, java.io.Serializable, Cloneable, Comparable<addFriend_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFriend_args");

    private static final org.apache.thrift.protocol.TField USER1_FIELD_DESC = new org.apache.thrift.protocol.TField("user1", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField USER2_FIELD_DESC = new org.apache.thrift.protocol.TField("user2", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFriend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFriend_argsTupleSchemeFactory());
    }

    public int user1; // required
    public int user2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER1((short)1, "user1"),
      USER2((short)2, "user2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER1
            return USER1;
          case 2: // USER2
            return USER2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USER1_ISSET_ID = 0;
    private static final int __USER2_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER1, new org.apache.thrift.meta_data.FieldMetaData("user1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.USER2, new org.apache.thrift.meta_data.FieldMetaData("user2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFriend_args.class, metaDataMap);
    }

    public addFriend_args() {
    }

    public addFriend_args(
      int user1,
      int user2)
    {
      this();
      this.user1 = user1;
      setUser1IsSet(true);
      this.user2 = user2;
      setUser2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFriend_args(addFriend_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.user1 = other.user1;
      this.user2 = other.user2;
    }

    public addFriend_args deepCopy() {
      return new addFriend_args(this);
    }

    @Override
    public void clear() {
      setUser1IsSet(false);
      this.user1 = 0;
      setUser2IsSet(false);
      this.user2 = 0;
    }

    public int getUser1() {
      return this.user1;
    }

    public addFriend_args setUser1(int user1) {
      this.user1 = user1;
      setUser1IsSet(true);
      return this;
    }

    public void unsetUser1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER1_ISSET_ID);
    }

    /** Returns true if field user1 is set (has been assigned a value) and false otherwise */
    public boolean isSetUser1() {
      return EncodingUtils.testBit(__isset_bitfield, __USER1_ISSET_ID);
    }

    public void setUser1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER1_ISSET_ID, value);
    }

    public int getUser2() {
      return this.user2;
    }

    public addFriend_args setUser2(int user2) {
      this.user2 = user2;
      setUser2IsSet(true);
      return this;
    }

    public void unsetUser2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USER2_ISSET_ID);
    }

    /** Returns true if field user2 is set (has been assigned a value) and false otherwise */
    public boolean isSetUser2() {
      return EncodingUtils.testBit(__isset_bitfield, __USER2_ISSET_ID);
    }

    public void setUser2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USER2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER1:
        if (value == null) {
          unsetUser1();
        } else {
          setUser1((Integer)value);
        }
        break;

      case USER2:
        if (value == null) {
          unsetUser2();
        } else {
          setUser2((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER1:
        return getUser1();

      case USER2:
        return getUser2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER1:
        return isSetUser1();
      case USER2:
        return isSetUser2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFriend_args)
        return this.equals((addFriend_args)that);
      return false;
    }

    public boolean equals(addFriend_args that) {
      if (that == null)
        return false;

      boolean this_present_user1 = true;
      boolean that_present_user1 = true;
      if (this_present_user1 || that_present_user1) {
        if (!(this_present_user1 && that_present_user1))
          return false;
        if (this.user1 != that.user1)
          return false;
      }

      boolean this_present_user2 = true;
      boolean that_present_user2 = true;
      if (this_present_user2 || that_present_user2) {
        if (!(this_present_user2 && that_present_user2))
          return false;
        if (this.user2 != that.user2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user1 = true;
      list.add(present_user1);
      if (present_user1)
        list.add(user1);

      boolean present_user2 = true;
      list.add(present_user2);
      if (present_user2)
        list.add(user2);

      return list.hashCode();
    }

    @Override
    public int compareTo(addFriend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser1()).compareTo(other.isSetUser1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user1, other.user1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUser2()).compareTo(other.isSetUser2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user2, other.user2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFriend_args(");
      boolean first = true;

      sb.append("user1:");
      sb.append(this.user1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("user2:");
      sb.append(this.user2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFriend_argsStandardSchemeFactory implements SchemeFactory {
      public addFriend_argsStandardScheme getScheme() {
        return new addFriend_argsStandardScheme();
      }
    }

    private static class addFriend_argsStandardScheme extends StandardScheme<addFriend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFriend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER1
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.user1 = iprot.readI32();
                struct.setUser1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER2
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.user2 = iprot.readI32();
                struct.setUser2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFriend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER1_FIELD_DESC);
        oprot.writeI32(struct.user1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(USER2_FIELD_DESC);
        oprot.writeI32(struct.user2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFriend_argsTupleSchemeFactory implements SchemeFactory {
      public addFriend_argsTupleScheme getScheme() {
        return new addFriend_argsTupleScheme();
      }
    }

    private static class addFriend_argsTupleScheme extends TupleScheme<addFriend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFriend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser1()) {
          optionals.set(0);
        }
        if (struct.isSetUser2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUser1()) {
          oprot.writeI32(struct.user1);
        }
        if (struct.isSetUser2()) {
          oprot.writeI32(struct.user2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFriend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.user1 = iprot.readI32();
          struct.setUser1IsSet(true);
        }
        if (incoming.get(1)) {
          struct.user2 = iprot.readI32();
          struct.setUser2IsSet(true);
        }
      }
    }

  }

  public static class addFriend_result implements org.apache.thrift.TBase<addFriend_result, addFriend_result._Fields>, java.io.Serializable, Cloneable, Comparable<addFriend_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addFriend_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addFriend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addFriend_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addFriend_result.class, metaDataMap);
    }

    public addFriend_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addFriend_result(addFriend_result other) {
    }

    public addFriend_result deepCopy() {
      return new addFriend_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addFriend_result)
        return this.equals((addFriend_result)that);
      return false;
    }

    public boolean equals(addFriend_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(addFriend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addFriend_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addFriend_resultStandardSchemeFactory implements SchemeFactory {
      public addFriend_resultStandardScheme getScheme() {
        return new addFriend_resultStandardScheme();
      }
    }

    private static class addFriend_resultStandardScheme extends StandardScheme<addFriend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addFriend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addFriend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addFriend_resultTupleSchemeFactory implements SchemeFactory {
      public addFriend_resultTupleScheme getScheme() {
        return new addFriend_resultTupleScheme();
      }
    }

    private static class addFriend_resultTupleScheme extends TupleScheme<addFriend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addFriend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addFriend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getFriendList_args implements org.apache.thrift.TBase<getFriendList_args, getFriendList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFriendList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFriendList_args");

    private static final org.apache.thrift.protocol.TField FRIEND_LIST_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("friendListRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFriendList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFriendList_argsTupleSchemeFactory());
    }

    public FriendListRequest friendListRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FRIEND_LIST_REQUEST((short)1, "friendListRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FRIEND_LIST_REQUEST
            return FRIEND_LIST_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FRIEND_LIST_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("friendListRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FriendListRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFriendList_args.class, metaDataMap);
    }

    public getFriendList_args() {
    }

    public getFriendList_args(
      FriendListRequest friendListRequest)
    {
      this();
      this.friendListRequest = friendListRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendList_args(getFriendList_args other) {
      if (other.isSetFriendListRequest()) {
        this.friendListRequest = new FriendListRequest(other.friendListRequest);
      }
    }

    public getFriendList_args deepCopy() {
      return new getFriendList_args(this);
    }

    @Override
    public void clear() {
      this.friendListRequest = null;
    }

    public FriendListRequest getFriendListRequest() {
      return this.friendListRequest;
    }

    public getFriendList_args setFriendListRequest(FriendListRequest friendListRequest) {
      this.friendListRequest = friendListRequest;
      return this;
    }

    public void unsetFriendListRequest() {
      this.friendListRequest = null;
    }

    /** Returns true if field friendListRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetFriendListRequest() {
      return this.friendListRequest != null;
    }

    public void setFriendListRequestIsSet(boolean value) {
      if (!value) {
        this.friendListRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FRIEND_LIST_REQUEST:
        if (value == null) {
          unsetFriendListRequest();
        } else {
          setFriendListRequest((FriendListRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FRIEND_LIST_REQUEST:
        return getFriendListRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FRIEND_LIST_REQUEST:
        return isSetFriendListRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendList_args)
        return this.equals((getFriendList_args)that);
      return false;
    }

    public boolean equals(getFriendList_args that) {
      if (that == null)
        return false;

      boolean this_present_friendListRequest = true && this.isSetFriendListRequest();
      boolean that_present_friendListRequest = true && that.isSetFriendListRequest();
      if (this_present_friendListRequest || that_present_friendListRequest) {
        if (!(this_present_friendListRequest && that_present_friendListRequest))
          return false;
        if (!this.friendListRequest.equals(that.friendListRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_friendListRequest = true && (isSetFriendListRequest());
      list.add(present_friendListRequest);
      if (present_friendListRequest)
        list.add(friendListRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFriendList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFriendListRequest()).compareTo(other.isSetFriendListRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFriendListRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friendListRequest, other.friendListRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFriendList_args(");
      boolean first = true;

      sb.append("friendListRequest:");
      if (this.friendListRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.friendListRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (friendListRequest != null) {
        friendListRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFriendList_argsStandardSchemeFactory implements SchemeFactory {
      public getFriendList_argsStandardScheme getScheme() {
        return new getFriendList_argsStandardScheme();
      }
    }

    private static class getFriendList_argsStandardScheme extends StandardScheme<getFriendList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFriendList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FRIEND_LIST_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.friendListRequest = new FriendListRequest();
                struct.friendListRequest.read(iprot);
                struct.setFriendListRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFriendList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.friendListRequest != null) {
          oprot.writeFieldBegin(FRIEND_LIST_REQUEST_FIELD_DESC);
          struct.friendListRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFriendList_argsTupleSchemeFactory implements SchemeFactory {
      public getFriendList_argsTupleScheme getScheme() {
        return new getFriendList_argsTupleScheme();
      }
    }

    private static class getFriendList_argsTupleScheme extends TupleScheme<getFriendList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFriendList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFriendListRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFriendListRequest()) {
          struct.friendListRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFriendList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.friendListRequest = new FriendListRequest();
          struct.friendListRequest.read(iprot);
          struct.setFriendListRequestIsSet(true);
        }
      }
    }

  }

  public static class getFriendList_result implements org.apache.thrift.TBase<getFriendList_result, getFriendList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFriendList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFriendList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getFriendList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getFriendList_resultTupleSchemeFactory());
    }

    public FriendListResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FriendListResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFriendList_result.class, metaDataMap);
    }

    public getFriendList_result() {
    }

    public getFriendList_result(
      FriendListResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFriendList_result(getFriendList_result other) {
      if (other.isSetSuccess()) {
        this.success = new FriendListResponse(other.success);
      }
    }

    public getFriendList_result deepCopy() {
      return new getFriendList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FriendListResponse getSuccess() {
      return this.success;
    }

    public getFriendList_result setSuccess(FriendListResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FriendListResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getFriendList_result)
        return this.equals((getFriendList_result)that);
      return false;
    }

    public boolean equals(getFriendList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getFriendList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getFriendList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFriendList_resultStandardSchemeFactory implements SchemeFactory {
      public getFriendList_resultStandardScheme getScheme() {
        return new getFriendList_resultStandardScheme();
      }
    }

    private static class getFriendList_resultStandardScheme extends StandardScheme<getFriendList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFriendList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FriendListResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFriendList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFriendList_resultTupleSchemeFactory implements SchemeFactory {
      public getFriendList_resultTupleScheme getScheme() {
        return new getFriendList_resultTupleScheme();
      }
    }

    private static class getFriendList_resultTupleScheme extends TupleScheme<getFriendList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFriendList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFriendList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FriendListResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class searchFriend_args implements org.apache.thrift.TBase<searchFriend_args, searchFriend_args._Fields>, java.io.Serializable, Cloneable, Comparable<searchFriend_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchFriend_args");

    private static final org.apache.thrift.protocol.TField FRIEND_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("friendPrefix", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchFriend_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchFriend_argsTupleSchemeFactory());
    }

    public String friendPrefix; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FRIEND_PREFIX((short)1, "friendPrefix");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FRIEND_PREFIX
            return FRIEND_PREFIX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FRIEND_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("friendPrefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchFriend_args.class, metaDataMap);
    }

    public searchFriend_args() {
    }

    public searchFriend_args(
      String friendPrefix)
    {
      this();
      this.friendPrefix = friendPrefix;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchFriend_args(searchFriend_args other) {
      if (other.isSetFriendPrefix()) {
        this.friendPrefix = other.friendPrefix;
      }
    }

    public searchFriend_args deepCopy() {
      return new searchFriend_args(this);
    }

    @Override
    public void clear() {
      this.friendPrefix = null;
    }

    public String getFriendPrefix() {
      return this.friendPrefix;
    }

    public searchFriend_args setFriendPrefix(String friendPrefix) {
      this.friendPrefix = friendPrefix;
      return this;
    }

    public void unsetFriendPrefix() {
      this.friendPrefix = null;
    }

    /** Returns true if field friendPrefix is set (has been assigned a value) and false otherwise */
    public boolean isSetFriendPrefix() {
      return this.friendPrefix != null;
    }

    public void setFriendPrefixIsSet(boolean value) {
      if (!value) {
        this.friendPrefix = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FRIEND_PREFIX:
        if (value == null) {
          unsetFriendPrefix();
        } else {
          setFriendPrefix((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FRIEND_PREFIX:
        return getFriendPrefix();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FRIEND_PREFIX:
        return isSetFriendPrefix();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchFriend_args)
        return this.equals((searchFriend_args)that);
      return false;
    }

    public boolean equals(searchFriend_args that) {
      if (that == null)
        return false;

      boolean this_present_friendPrefix = true && this.isSetFriendPrefix();
      boolean that_present_friendPrefix = true && that.isSetFriendPrefix();
      if (this_present_friendPrefix || that_present_friendPrefix) {
        if (!(this_present_friendPrefix && that_present_friendPrefix))
          return false;
        if (!this.friendPrefix.equals(that.friendPrefix))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_friendPrefix = true && (isSetFriendPrefix());
      list.add(present_friendPrefix);
      if (present_friendPrefix)
        list.add(friendPrefix);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchFriend_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFriendPrefix()).compareTo(other.isSetFriendPrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFriendPrefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.friendPrefix, other.friendPrefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchFriend_args(");
      boolean first = true;

      sb.append("friendPrefix:");
      if (this.friendPrefix == null) {
        sb.append("null");
      } else {
        sb.append(this.friendPrefix);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchFriend_argsStandardSchemeFactory implements SchemeFactory {
      public searchFriend_argsStandardScheme getScheme() {
        return new searchFriend_argsStandardScheme();
      }
    }

    private static class searchFriend_argsStandardScheme extends StandardScheme<searchFriend_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchFriend_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FRIEND_PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.friendPrefix = iprot.readString();
                struct.setFriendPrefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchFriend_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.friendPrefix != null) {
          oprot.writeFieldBegin(FRIEND_PREFIX_FIELD_DESC);
          oprot.writeString(struct.friendPrefix);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchFriend_argsTupleSchemeFactory implements SchemeFactory {
      public searchFriend_argsTupleScheme getScheme() {
        return new searchFriend_argsTupleScheme();
      }
    }

    private static class searchFriend_argsTupleScheme extends TupleScheme<searchFriend_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchFriend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFriendPrefix()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFriendPrefix()) {
          oprot.writeString(struct.friendPrefix);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchFriend_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.friendPrefix = iprot.readString();
          struct.setFriendPrefixIsSet(true);
        }
      }
    }

  }

  public static class searchFriend_result implements org.apache.thrift.TBase<searchFriend_result, searchFriend_result._Fields>, java.io.Serializable, Cloneable, Comparable<searchFriend_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("searchFriend_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new searchFriend_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new searchFriend_resultTupleSchemeFactory());
    }

    public FriendListResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FriendListResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(searchFriend_result.class, metaDataMap);
    }

    public searchFriend_result() {
    }

    public searchFriend_result(
      FriendListResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public searchFriend_result(searchFriend_result other) {
      if (other.isSetSuccess()) {
        this.success = new FriendListResponse(other.success);
      }
    }

    public searchFriend_result deepCopy() {
      return new searchFriend_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public FriendListResponse getSuccess() {
      return this.success;
    }

    public searchFriend_result setSuccess(FriendListResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((FriendListResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof searchFriend_result)
        return this.equals((searchFriend_result)that);
      return false;
    }

    public boolean equals(searchFriend_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(searchFriend_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("searchFriend_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class searchFriend_resultStandardSchemeFactory implements SchemeFactory {
      public searchFriend_resultStandardScheme getScheme() {
        return new searchFriend_resultStandardScheme();
      }
    }

    private static class searchFriend_resultStandardScheme extends StandardScheme<searchFriend_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, searchFriend_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new FriendListResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, searchFriend_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class searchFriend_resultTupleSchemeFactory implements SchemeFactory {
      public searchFriend_resultTupleScheme getScheme() {
        return new searchFriend_resultTupleScheme();
      }
    }

    private static class searchFriend_resultTupleScheme extends TupleScheme<searchFriend_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, searchFriend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, searchFriend_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new FriendListResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getTagPassword_args implements org.apache.thrift.TBase<getTagPassword_args, getTagPassword_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTagPassword_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTagPassword_args");

    private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTagPassword_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTagPassword_argsTupleSchemeFactory());
    }

    public String tagId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TAG_ID((short)1, "tagId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TAG_ID
            return TAG_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTagPassword_args.class, metaDataMap);
    }

    public getTagPassword_args() {
    }

    public getTagPassword_args(
      String tagId)
    {
      this();
      this.tagId = tagId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTagPassword_args(getTagPassword_args other) {
      if (other.isSetTagId()) {
        this.tagId = other.tagId;
      }
    }

    public getTagPassword_args deepCopy() {
      return new getTagPassword_args(this);
    }

    @Override
    public void clear() {
      this.tagId = null;
    }

    public String getTagId() {
      return this.tagId;
    }

    public getTagPassword_args setTagId(String tagId) {
      this.tagId = tagId;
      return this;
    }

    public void unsetTagId() {
      this.tagId = null;
    }

    /** Returns true if field tagId is set (has been assigned a value) and false otherwise */
    public boolean isSetTagId() {
      return this.tagId != null;
    }

    public void setTagIdIsSet(boolean value) {
      if (!value) {
        this.tagId = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TAG_ID:
        if (value == null) {
          unsetTagId();
        } else {
          setTagId((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TAG_ID:
        return getTagId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TAG_ID:
        return isSetTagId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTagPassword_args)
        return this.equals((getTagPassword_args)that);
      return false;
    }

    public boolean equals(getTagPassword_args that) {
      if (that == null)
        return false;

      boolean this_present_tagId = true && this.isSetTagId();
      boolean that_present_tagId = true && that.isSetTagId();
      if (this_present_tagId || that_present_tagId) {
        if (!(this_present_tagId && that_present_tagId))
          return false;
        if (!this.tagId.equals(that.tagId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_tagId = true && (isSetTagId());
      list.add(present_tagId);
      if (present_tagId)
        list.add(tagId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTagPassword_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTagId()).compareTo(other.isSetTagId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTagId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagId, other.tagId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTagPassword_args(");
      boolean first = true;

      sb.append("tagId:");
      if (this.tagId == null) {
        sb.append("null");
      } else {
        sb.append(this.tagId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTagPassword_argsStandardSchemeFactory implements SchemeFactory {
      public getTagPassword_argsStandardScheme getScheme() {
        return new getTagPassword_argsStandardScheme();
      }
    }

    private static class getTagPassword_argsStandardScheme extends StandardScheme<getTagPassword_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTagPassword_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TAG_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tagId = iprot.readString();
                struct.setTagIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTagPassword_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.tagId != null) {
          oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
          oprot.writeString(struct.tagId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTagPassword_argsTupleSchemeFactory implements SchemeFactory {
      public getTagPassword_argsTupleScheme getScheme() {
        return new getTagPassword_argsTupleScheme();
      }
    }

    private static class getTagPassword_argsTupleScheme extends TupleScheme<getTagPassword_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTagPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTagId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTagId()) {
          oprot.writeString(struct.tagId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTagPassword_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.tagId = iprot.readString();
          struct.setTagIdIsSet(true);
        }
      }
    }

  }

  public static class getTagPassword_result implements org.apache.thrift.TBase<getTagPassword_result, getTagPassword_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTagPassword_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTagPassword_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getTagPassword_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getTagPassword_resultTupleSchemeFactory());
    }

    public String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTagPassword_result.class, metaDataMap);
    }

    public getTagPassword_result() {
    }

    public getTagPassword_result(
      String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTagPassword_result(getTagPassword_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getTagPassword_result deepCopy() {
      return new getTagPassword_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public getTagPassword_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getTagPassword_result)
        return this.equals((getTagPassword_result)that);
      return false;
    }

    public boolean equals(getTagPassword_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getTagPassword_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getTagPassword_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTagPassword_resultStandardSchemeFactory implements SchemeFactory {
      public getTagPassword_resultStandardScheme getScheme() {
        return new getTagPassword_resultStandardScheme();
      }
    }

    private static class getTagPassword_resultStandardScheme extends StandardScheme<getTagPassword_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTagPassword_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTagPassword_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTagPassword_resultTupleSchemeFactory implements SchemeFactory {
      public getTagPassword_resultTupleScheme getScheme() {
        return new getTagPassword_resultTupleScheme();
      }
    }

    private static class getTagPassword_resultTupleScheme extends TupleScheme<getTagPassword_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTagPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTagPassword_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMyProfile_args implements org.apache.thrift.TBase<getMyProfile_args, getMyProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyProfile_args");

    private static final org.apache.thrift.protocol.TField REQUESTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requesterId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField REQUESTED_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestedId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyProfile_argsTupleSchemeFactory());
    }

    public int requesterId; // required
    public int requestedId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQUESTER_ID((short)1, "requesterId"),
      REQUESTED_ID((short)2, "requestedId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUESTER_ID
            return REQUESTER_ID;
          case 2: // REQUESTED_ID
            return REQUESTED_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REQUESTERID_ISSET_ID = 0;
    private static final int __REQUESTEDID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUESTER_ID, new org.apache.thrift.meta_data.FieldMetaData("requesterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.REQUESTED_ID, new org.apache.thrift.meta_data.FieldMetaData("requestedId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyProfile_args.class, metaDataMap);
    }

    public getMyProfile_args() {
    }

    public getMyProfile_args(
      int requesterId,
      int requestedId)
    {
      this();
      this.requesterId = requesterId;
      setRequesterIdIsSet(true);
      this.requestedId = requestedId;
      setRequestedIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyProfile_args(getMyProfile_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.requesterId = other.requesterId;
      this.requestedId = other.requestedId;
    }

    public getMyProfile_args deepCopy() {
      return new getMyProfile_args(this);
    }

    @Override
    public void clear() {
      setRequesterIdIsSet(false);
      this.requesterId = 0;
      setRequestedIdIsSet(false);
      this.requestedId = 0;
    }

    public int getRequesterId() {
      return this.requesterId;
    }

    public getMyProfile_args setRequesterId(int requesterId) {
      this.requesterId = requesterId;
      setRequesterIdIsSet(true);
      return this;
    }

    public void unsetRequesterId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTERID_ISSET_ID);
    }

    /** Returns true if field requesterId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequesterId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTERID_ISSET_ID);
    }

    public void setRequesterIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTERID_ISSET_ID, value);
    }

    public int getRequestedId() {
      return this.requestedId;
    }

    public getMyProfile_args setRequestedId(int requestedId) {
      this.requestedId = requestedId;
      setRequestedIdIsSet(true);
      return this;
    }

    public void unsetRequestedId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REQUESTEDID_ISSET_ID);
    }

    /** Returns true if field requestedId is set (has been assigned a value) and false otherwise */
    public boolean isSetRequestedId() {
      return EncodingUtils.testBit(__isset_bitfield, __REQUESTEDID_ISSET_ID);
    }

    public void setRequestedIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REQUESTEDID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUESTER_ID:
        if (value == null) {
          unsetRequesterId();
        } else {
          setRequesterId((Integer)value);
        }
        break;

      case REQUESTED_ID:
        if (value == null) {
          unsetRequestedId();
        } else {
          setRequestedId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUESTER_ID:
        return getRequesterId();

      case REQUESTED_ID:
        return getRequestedId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUESTER_ID:
        return isSetRequesterId();
      case REQUESTED_ID:
        return isSetRequestedId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyProfile_args)
        return this.equals((getMyProfile_args)that);
      return false;
    }

    public boolean equals(getMyProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_requesterId = true;
      boolean that_present_requesterId = true;
      if (this_present_requesterId || that_present_requesterId) {
        if (!(this_present_requesterId && that_present_requesterId))
          return false;
        if (this.requesterId != that.requesterId)
          return false;
      }

      boolean this_present_requestedId = true;
      boolean that_present_requestedId = true;
      if (this_present_requestedId || that_present_requestedId) {
        if (!(this_present_requestedId && that_present_requestedId))
          return false;
        if (this.requestedId != that.requestedId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_requesterId = true;
      list.add(present_requesterId);
      if (present_requesterId)
        list.add(requesterId);

      boolean present_requestedId = true;
      list.add(present_requestedId);
      if (present_requestedId)
        list.add(requestedId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequesterId()).compareTo(other.isSetRequesterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequesterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requesterId, other.requesterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetRequestedId()).compareTo(other.isSetRequestedId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequestedId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestedId, other.requestedId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyProfile_args(");
      boolean first = true;

      sb.append("requesterId:");
      sb.append(this.requesterId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("requestedId:");
      sb.append(this.requestedId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyProfile_argsStandardSchemeFactory implements SchemeFactory {
      public getMyProfile_argsStandardScheme getScheme() {
        return new getMyProfile_argsStandardScheme();
      }
    }

    private static class getMyProfile_argsStandardScheme extends StandardScheme<getMyProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUESTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requesterId = iprot.readI32();
                struct.setRequesterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REQUESTED_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.requestedId = iprot.readI32();
                struct.setRequestedIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(REQUESTER_ID_FIELD_DESC);
        oprot.writeI32(struct.requesterId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(REQUESTED_ID_FIELD_DESC);
        oprot.writeI32(struct.requestedId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyProfile_argsTupleSchemeFactory implements SchemeFactory {
      public getMyProfile_argsTupleScheme getScheme() {
        return new getMyProfile_argsTupleScheme();
      }
    }

    private static class getMyProfile_argsTupleScheme extends TupleScheme<getMyProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequesterId()) {
          optionals.set(0);
        }
        if (struct.isSetRequestedId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRequesterId()) {
          oprot.writeI32(struct.requesterId);
        }
        if (struct.isSetRequestedId()) {
          oprot.writeI32(struct.requestedId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.requesterId = iprot.readI32();
          struct.setRequesterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.requestedId = iprot.readI32();
          struct.setRequestedIdIsSet(true);
        }
      }
    }

  }

  public static class getMyProfile_result implements org.apache.thrift.TBase<getMyProfile_result, getMyProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyProfile_resultTupleSchemeFactory());
    }

    public MyProfile success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyProfile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyProfile_result.class, metaDataMap);
    }

    public getMyProfile_result() {
    }

    public getMyProfile_result(
      MyProfile success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyProfile_result(getMyProfile_result other) {
      if (other.isSetSuccess()) {
        this.success = new MyProfile(other.success);
      }
    }

    public getMyProfile_result deepCopy() {
      return new getMyProfile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MyProfile getSuccess() {
      return this.success;
    }

    public getMyProfile_result setSuccess(MyProfile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MyProfile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyProfile_result)
        return this.equals((getMyProfile_result)that);
      return false;
    }

    public boolean equals(getMyProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyProfile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyProfile_resultStandardSchemeFactory implements SchemeFactory {
      public getMyProfile_resultStandardScheme getScheme() {
        return new getMyProfile_resultStandardScheme();
      }
    }

    private static class getMyProfile_resultStandardScheme extends StandardScheme<getMyProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MyProfile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyProfile_resultTupleSchemeFactory implements SchemeFactory {
      public getMyProfile_resultTupleScheme getScheme() {
        return new getMyProfile_resultTupleScheme();
      }
    }

    private static class getMyProfile_resultTupleScheme extends TupleScheme<getMyProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MyProfile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class updateMyProfile_args implements org.apache.thrift.TBase<updateMyProfile_args, updateMyProfile_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateMyProfile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMyProfile_args");

    private static final org.apache.thrift.protocol.TField USER_FIELD_DESC = new org.apache.thrift.protocol.TField("user", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMyProfile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMyProfile_argsTupleSchemeFactory());
    }

    public User user; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER((short)1, "user");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER
            return USER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER, new org.apache.thrift.meta_data.FieldMetaData("user", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, User.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMyProfile_args.class, metaDataMap);
    }

    public updateMyProfile_args() {
    }

    public updateMyProfile_args(
      User user)
    {
      this();
      this.user = user;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMyProfile_args(updateMyProfile_args other) {
      if (other.isSetUser()) {
        this.user = new User(other.user);
      }
    }

    public updateMyProfile_args deepCopy() {
      return new updateMyProfile_args(this);
    }

    @Override
    public void clear() {
      this.user = null;
    }

    public User getUser() {
      return this.user;
    }

    public updateMyProfile_args setUser(User user) {
      this.user = user;
      return this;
    }

    public void unsetUser() {
      this.user = null;
    }

    /** Returns true if field user is set (has been assigned a value) and false otherwise */
    public boolean isSetUser() {
      return this.user != null;
    }

    public void setUserIsSet(boolean value) {
      if (!value) {
        this.user = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER:
        if (value == null) {
          unsetUser();
        } else {
          setUser((User)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER:
        return getUser();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER:
        return isSetUser();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMyProfile_args)
        return this.equals((updateMyProfile_args)that);
      return false;
    }

    public boolean equals(updateMyProfile_args that) {
      if (that == null)
        return false;

      boolean this_present_user = true && this.isSetUser();
      boolean that_present_user = true && that.isSetUser();
      if (this_present_user || that_present_user) {
        if (!(this_present_user && that_present_user))
          return false;
        if (!this.user.equals(that.user))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_user = true && (isSetUser());
      list.add(present_user);
      if (present_user)
        list.add(user);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMyProfile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUser()).compareTo(other.isSetUser());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUser()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user, other.user);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMyProfile_args(");
      boolean first = true;

      sb.append("user:");
      if (this.user == null) {
        sb.append("null");
      } else {
        sb.append(this.user);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (user != null) {
        user.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMyProfile_argsStandardSchemeFactory implements SchemeFactory {
      public updateMyProfile_argsStandardScheme getScheme() {
        return new updateMyProfile_argsStandardScheme();
      }
    }

    private static class updateMyProfile_argsStandardScheme extends StandardScheme<updateMyProfile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMyProfile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.user = new User();
                struct.user.read(iprot);
                struct.setUserIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMyProfile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.user != null) {
          oprot.writeFieldBegin(USER_FIELD_DESC);
          struct.user.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMyProfile_argsTupleSchemeFactory implements SchemeFactory {
      public updateMyProfile_argsTupleScheme getScheme() {
        return new updateMyProfile_argsTupleScheme();
      }
    }

    private static class updateMyProfile_argsTupleScheme extends TupleScheme<updateMyProfile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMyProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUser()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUser()) {
          struct.user.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMyProfile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.user = new User();
          struct.user.read(iprot);
          struct.setUserIsSet(true);
        }
      }
    }

  }

  public static class updateMyProfile_result implements org.apache.thrift.TBase<updateMyProfile_result, updateMyProfile_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateMyProfile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateMyProfile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateMyProfile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateMyProfile_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateMyProfile_result.class, metaDataMap);
    }

    public updateMyProfile_result() {
    }

    public updateMyProfile_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateMyProfile_result(updateMyProfile_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public updateMyProfile_result deepCopy() {
      return new updateMyProfile_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateMyProfile_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateMyProfile_result)
        return this.equals((updateMyProfile_result)that);
      return false;
    }

    public boolean equals(updateMyProfile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(updateMyProfile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateMyProfile_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateMyProfile_resultStandardSchemeFactory implements SchemeFactory {
      public updateMyProfile_resultStandardScheme getScheme() {
        return new updateMyProfile_resultStandardScheme();
      }
    }

    private static class updateMyProfile_resultStandardScheme extends StandardScheme<updateMyProfile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateMyProfile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateMyProfile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateMyProfile_resultTupleSchemeFactory implements SchemeFactory {
      public updateMyProfile_resultTupleScheme getScheme() {
        return new updateMyProfile_resultTupleScheme();
      }
    }

    private static class updateMyProfile_resultTupleScheme extends TupleScheme<updateMyProfile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateMyProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateMyProfile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMyFollowingList_args implements org.apache.thrift.TBase<getMyFollowingList_args, getMyFollowingList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyFollowingList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyFollowingList_args");

    private static final org.apache.thrift.protocol.TField FOLLOWING_LIST_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("followingListRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyFollowingList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyFollowingList_argsTupleSchemeFactory());
    }

    public FriendListRequest followingListRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FOLLOWING_LIST_REQUEST((short)1, "followingListRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FOLLOWING_LIST_REQUEST
            return FOLLOWING_LIST_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FOLLOWING_LIST_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("followingListRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FriendListRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyFollowingList_args.class, metaDataMap);
    }

    public getMyFollowingList_args() {
    }

    public getMyFollowingList_args(
      FriendListRequest followingListRequest)
    {
      this();
      this.followingListRequest = followingListRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyFollowingList_args(getMyFollowingList_args other) {
      if (other.isSetFollowingListRequest()) {
        this.followingListRequest = new FriendListRequest(other.followingListRequest);
      }
    }

    public getMyFollowingList_args deepCopy() {
      return new getMyFollowingList_args(this);
    }

    @Override
    public void clear() {
      this.followingListRequest = null;
    }

    public FriendListRequest getFollowingListRequest() {
      return this.followingListRequest;
    }

    public getMyFollowingList_args setFollowingListRequest(FriendListRequest followingListRequest) {
      this.followingListRequest = followingListRequest;
      return this;
    }

    public void unsetFollowingListRequest() {
      this.followingListRequest = null;
    }

    /** Returns true if field followingListRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetFollowingListRequest() {
      return this.followingListRequest != null;
    }

    public void setFollowingListRequestIsSet(boolean value) {
      if (!value) {
        this.followingListRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FOLLOWING_LIST_REQUEST:
        if (value == null) {
          unsetFollowingListRequest();
        } else {
          setFollowingListRequest((FriendListRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FOLLOWING_LIST_REQUEST:
        return getFollowingListRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FOLLOWING_LIST_REQUEST:
        return isSetFollowingListRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyFollowingList_args)
        return this.equals((getMyFollowingList_args)that);
      return false;
    }

    public boolean equals(getMyFollowingList_args that) {
      if (that == null)
        return false;

      boolean this_present_followingListRequest = true && this.isSetFollowingListRequest();
      boolean that_present_followingListRequest = true && that.isSetFollowingListRequest();
      if (this_present_followingListRequest || that_present_followingListRequest) {
        if (!(this_present_followingListRequest && that_present_followingListRequest))
          return false;
        if (!this.followingListRequest.equals(that.followingListRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_followingListRequest = true && (isSetFollowingListRequest());
      list.add(present_followingListRequest);
      if (present_followingListRequest)
        list.add(followingListRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyFollowingList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFollowingListRequest()).compareTo(other.isSetFollowingListRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFollowingListRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followingListRequest, other.followingListRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyFollowingList_args(");
      boolean first = true;

      sb.append("followingListRequest:");
      if (this.followingListRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.followingListRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (followingListRequest != null) {
        followingListRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyFollowingList_argsStandardSchemeFactory implements SchemeFactory {
      public getMyFollowingList_argsStandardScheme getScheme() {
        return new getMyFollowingList_argsStandardScheme();
      }
    }

    private static class getMyFollowingList_argsStandardScheme extends StandardScheme<getMyFollowingList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyFollowingList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FOLLOWING_LIST_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.followingListRequest = new FriendListRequest();
                struct.followingListRequest.read(iprot);
                struct.setFollowingListRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyFollowingList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.followingListRequest != null) {
          oprot.writeFieldBegin(FOLLOWING_LIST_REQUEST_FIELD_DESC);
          struct.followingListRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyFollowingList_argsTupleSchemeFactory implements SchemeFactory {
      public getMyFollowingList_argsTupleScheme getScheme() {
        return new getMyFollowingList_argsTupleScheme();
      }
    }

    private static class getMyFollowingList_argsTupleScheme extends TupleScheme<getMyFollowingList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyFollowingList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFollowingListRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFollowingListRequest()) {
          struct.followingListRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyFollowingList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.followingListRequest = new FriendListRequest();
          struct.followingListRequest.read(iprot);
          struct.setFollowingListRequestIsSet(true);
        }
      }
    }

  }

  public static class getMyFollowingList_result implements org.apache.thrift.TBase<getMyFollowingList_result, getMyFollowingList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyFollowingList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyFollowingList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyFollowingList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyFollowingList_resultTupleSchemeFactory());
    }

    public MyFollowingListResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyFollowingListResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyFollowingList_result.class, metaDataMap);
    }

    public getMyFollowingList_result() {
    }

    public getMyFollowingList_result(
      MyFollowingListResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyFollowingList_result(getMyFollowingList_result other) {
      if (other.isSetSuccess()) {
        this.success = new MyFollowingListResponse(other.success);
      }
    }

    public getMyFollowingList_result deepCopy() {
      return new getMyFollowingList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MyFollowingListResponse getSuccess() {
      return this.success;
    }

    public getMyFollowingList_result setSuccess(MyFollowingListResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MyFollowingListResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyFollowingList_result)
        return this.equals((getMyFollowingList_result)that);
      return false;
    }

    public boolean equals(getMyFollowingList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyFollowingList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyFollowingList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyFollowingList_resultStandardSchemeFactory implements SchemeFactory {
      public getMyFollowingList_resultStandardScheme getScheme() {
        return new getMyFollowingList_resultStandardScheme();
      }
    }

    private static class getMyFollowingList_resultStandardScheme extends StandardScheme<getMyFollowingList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyFollowingList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MyFollowingListResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyFollowingList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyFollowingList_resultTupleSchemeFactory implements SchemeFactory {
      public getMyFollowingList_resultTupleScheme getScheme() {
        return new getMyFollowingList_resultTupleScheme();
      }
    }

    private static class getMyFollowingList_resultTupleScheme extends TupleScheme<getMyFollowingList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyFollowingList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyFollowingList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MyFollowingListResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMyFollowersList_args implements org.apache.thrift.TBase<getMyFollowersList_args, getMyFollowersList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyFollowersList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyFollowersList_args");

    private static final org.apache.thrift.protocol.TField FOLLOWERS_LIST_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("followersListRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyFollowersList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyFollowersList_argsTupleSchemeFactory());
    }

    public FriendListRequest followersListRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FOLLOWERS_LIST_REQUEST((short)1, "followersListRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FOLLOWERS_LIST_REQUEST
            return FOLLOWERS_LIST_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FOLLOWERS_LIST_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("followersListRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FriendListRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyFollowersList_args.class, metaDataMap);
    }

    public getMyFollowersList_args() {
    }

    public getMyFollowersList_args(
      FriendListRequest followersListRequest)
    {
      this();
      this.followersListRequest = followersListRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyFollowersList_args(getMyFollowersList_args other) {
      if (other.isSetFollowersListRequest()) {
        this.followersListRequest = new FriendListRequest(other.followersListRequest);
      }
    }

    public getMyFollowersList_args deepCopy() {
      return new getMyFollowersList_args(this);
    }

    @Override
    public void clear() {
      this.followersListRequest = null;
    }

    public FriendListRequest getFollowersListRequest() {
      return this.followersListRequest;
    }

    public getMyFollowersList_args setFollowersListRequest(FriendListRequest followersListRequest) {
      this.followersListRequest = followersListRequest;
      return this;
    }

    public void unsetFollowersListRequest() {
      this.followersListRequest = null;
    }

    /** Returns true if field followersListRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetFollowersListRequest() {
      return this.followersListRequest != null;
    }

    public void setFollowersListRequestIsSet(boolean value) {
      if (!value) {
        this.followersListRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FOLLOWERS_LIST_REQUEST:
        if (value == null) {
          unsetFollowersListRequest();
        } else {
          setFollowersListRequest((FriendListRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FOLLOWERS_LIST_REQUEST:
        return getFollowersListRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FOLLOWERS_LIST_REQUEST:
        return isSetFollowersListRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyFollowersList_args)
        return this.equals((getMyFollowersList_args)that);
      return false;
    }

    public boolean equals(getMyFollowersList_args that) {
      if (that == null)
        return false;

      boolean this_present_followersListRequest = true && this.isSetFollowersListRequest();
      boolean that_present_followersListRequest = true && that.isSetFollowersListRequest();
      if (this_present_followersListRequest || that_present_followersListRequest) {
        if (!(this_present_followersListRequest && that_present_followersListRequest))
          return false;
        if (!this.followersListRequest.equals(that.followersListRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_followersListRequest = true && (isSetFollowersListRequest());
      list.add(present_followersListRequest);
      if (present_followersListRequest)
        list.add(followersListRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyFollowersList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFollowersListRequest()).compareTo(other.isSetFollowersListRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFollowersListRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.followersListRequest, other.followersListRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyFollowersList_args(");
      boolean first = true;

      sb.append("followersListRequest:");
      if (this.followersListRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.followersListRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (followersListRequest != null) {
        followersListRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyFollowersList_argsStandardSchemeFactory implements SchemeFactory {
      public getMyFollowersList_argsStandardScheme getScheme() {
        return new getMyFollowersList_argsStandardScheme();
      }
    }

    private static class getMyFollowersList_argsStandardScheme extends StandardScheme<getMyFollowersList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyFollowersList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FOLLOWERS_LIST_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.followersListRequest = new FriendListRequest();
                struct.followersListRequest.read(iprot);
                struct.setFollowersListRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyFollowersList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.followersListRequest != null) {
          oprot.writeFieldBegin(FOLLOWERS_LIST_REQUEST_FIELD_DESC);
          struct.followersListRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyFollowersList_argsTupleSchemeFactory implements SchemeFactory {
      public getMyFollowersList_argsTupleScheme getScheme() {
        return new getMyFollowersList_argsTupleScheme();
      }
    }

    private static class getMyFollowersList_argsTupleScheme extends TupleScheme<getMyFollowersList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyFollowersList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFollowersListRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFollowersListRequest()) {
          struct.followersListRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyFollowersList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.followersListRequest = new FriendListRequest();
          struct.followersListRequest.read(iprot);
          struct.setFollowersListRequestIsSet(true);
        }
      }
    }

  }

  public static class getMyFollowersList_result implements org.apache.thrift.TBase<getMyFollowersList_result, getMyFollowersList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyFollowersList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyFollowersList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyFollowersList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyFollowersList_resultTupleSchemeFactory());
    }

    public MyFollowersListResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyFollowersListResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyFollowersList_result.class, metaDataMap);
    }

    public getMyFollowersList_result() {
    }

    public getMyFollowersList_result(
      MyFollowersListResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyFollowersList_result(getMyFollowersList_result other) {
      if (other.isSetSuccess()) {
        this.success = new MyFollowersListResponse(other.success);
      }
    }

    public getMyFollowersList_result deepCopy() {
      return new getMyFollowersList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MyFollowersListResponse getSuccess() {
      return this.success;
    }

    public getMyFollowersList_result setSuccess(MyFollowersListResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MyFollowersListResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyFollowersList_result)
        return this.equals((getMyFollowersList_result)that);
      return false;
    }

    public boolean equals(getMyFollowersList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyFollowersList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyFollowersList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyFollowersList_resultStandardSchemeFactory implements SchemeFactory {
      public getMyFollowersList_resultStandardScheme getScheme() {
        return new getMyFollowersList_resultStandardScheme();
      }
    }

    private static class getMyFollowersList_resultStandardScheme extends StandardScheme<getMyFollowersList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyFollowersList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MyFollowersListResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyFollowersList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyFollowersList_resultTupleSchemeFactory implements SchemeFactory {
      public getMyFollowersList_resultTupleScheme getScheme() {
        return new getMyFollowersList_resultTupleScheme();
      }
    }

    private static class getMyFollowersList_resultTupleScheme extends TupleScheme<getMyFollowersList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyFollowersList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyFollowersList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MyFollowersListResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setPrivacy_args implements org.apache.thrift.TBase<setPrivacy_args, setPrivacy_args._Fields>, java.io.Serializable, Cloneable, Comparable<setPrivacy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPrivacy_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField HIDE_PROFILE_TO_STRANGER_FIELD_DESC = new org.apache.thrift.protocol.TField("hideProfileToStranger", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPrivacy_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPrivacy_argsTupleSchemeFactory());
    }

    public int userId; // required
    public boolean hideProfileToStranger; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      HIDE_PROFILE_TO_STRANGER((short)2, "hideProfileToStranger");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // HIDE_PROFILE_TO_STRANGER
            return HIDE_PROFILE_TO_STRANGER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __HIDEPROFILETOSTRANGER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.HIDE_PROFILE_TO_STRANGER, new org.apache.thrift.meta_data.FieldMetaData("hideProfileToStranger", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPrivacy_args.class, metaDataMap);
    }

    public setPrivacy_args() {
    }

    public setPrivacy_args(
      int userId,
      boolean hideProfileToStranger)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.hideProfileToStranger = hideProfileToStranger;
      setHideProfileToStrangerIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPrivacy_args(setPrivacy_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.hideProfileToStranger = other.hideProfileToStranger;
    }

    public setPrivacy_args deepCopy() {
      return new setPrivacy_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setHideProfileToStrangerIsSet(false);
      this.hideProfileToStranger = false;
    }

    public int getUserId() {
      return this.userId;
    }

    public setPrivacy_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public boolean isHideProfileToStranger() {
      return this.hideProfileToStranger;
    }

    public setPrivacy_args setHideProfileToStranger(boolean hideProfileToStranger) {
      this.hideProfileToStranger = hideProfileToStranger;
      setHideProfileToStrangerIsSet(true);
      return this;
    }

    public void unsetHideProfileToStranger() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HIDEPROFILETOSTRANGER_ISSET_ID);
    }

    /** Returns true if field hideProfileToStranger is set (has been assigned a value) and false otherwise */
    public boolean isSetHideProfileToStranger() {
      return EncodingUtils.testBit(__isset_bitfield, __HIDEPROFILETOSTRANGER_ISSET_ID);
    }

    public void setHideProfileToStrangerIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HIDEPROFILETOSTRANGER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case HIDE_PROFILE_TO_STRANGER:
        if (value == null) {
          unsetHideProfileToStranger();
        } else {
          setHideProfileToStranger((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case HIDE_PROFILE_TO_STRANGER:
        return isHideProfileToStranger();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case HIDE_PROFILE_TO_STRANGER:
        return isSetHideProfileToStranger();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPrivacy_args)
        return this.equals((setPrivacy_args)that);
      return false;
    }

    public boolean equals(setPrivacy_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_hideProfileToStranger = true;
      boolean that_present_hideProfileToStranger = true;
      if (this_present_hideProfileToStranger || that_present_hideProfileToStranger) {
        if (!(this_present_hideProfileToStranger && that_present_hideProfileToStranger))
          return false;
        if (this.hideProfileToStranger != that.hideProfileToStranger)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_hideProfileToStranger = true;
      list.add(present_hideProfileToStranger);
      if (present_hideProfileToStranger)
        list.add(hideProfileToStranger);

      return list.hashCode();
    }

    @Override
    public int compareTo(setPrivacy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHideProfileToStranger()).compareTo(other.isSetHideProfileToStranger());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHideProfileToStranger()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hideProfileToStranger, other.hideProfileToStranger);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPrivacy_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hideProfileToStranger:");
      sb.append(this.hideProfileToStranger);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPrivacy_argsStandardSchemeFactory implements SchemeFactory {
      public setPrivacy_argsStandardScheme getScheme() {
        return new setPrivacy_argsStandardScheme();
      }
    }

    private static class setPrivacy_argsStandardScheme extends StandardScheme<setPrivacy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPrivacy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // HIDE_PROFILE_TO_STRANGER
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.hideProfileToStranger = iprot.readBool();
                struct.setHideProfileToStrangerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPrivacy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HIDE_PROFILE_TO_STRANGER_FIELD_DESC);
        oprot.writeBool(struct.hideProfileToStranger);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPrivacy_argsTupleSchemeFactory implements SchemeFactory {
      public setPrivacy_argsTupleScheme getScheme() {
        return new setPrivacy_argsTupleScheme();
      }
    }

    private static class setPrivacy_argsTupleScheme extends TupleScheme<setPrivacy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPrivacy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetHideProfileToStranger()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetHideProfileToStranger()) {
          oprot.writeBool(struct.hideProfileToStranger);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPrivacy_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.hideProfileToStranger = iprot.readBool();
          struct.setHideProfileToStrangerIsSet(true);
        }
      }
    }

  }

  public static class setPrivacy_result implements org.apache.thrift.TBase<setPrivacy_result, setPrivacy_result._Fields>, java.io.Serializable, Cloneable, Comparable<setPrivacy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPrivacy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setPrivacy_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setPrivacy_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPrivacy_result.class, metaDataMap);
    }

    public setPrivacy_result() {
    }

    public setPrivacy_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPrivacy_result(setPrivacy_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setPrivacy_result deepCopy() {
      return new setPrivacy_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setPrivacy_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setPrivacy_result)
        return this.equals((setPrivacy_result)that);
      return false;
    }

    public boolean equals(setPrivacy_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(setPrivacy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setPrivacy_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPrivacy_resultStandardSchemeFactory implements SchemeFactory {
      public setPrivacy_resultStandardScheme getScheme() {
        return new setPrivacy_resultStandardScheme();
      }
    }

    private static class setPrivacy_resultStandardScheme extends StandardScheme<setPrivacy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPrivacy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPrivacy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPrivacy_resultTupleSchemeFactory implements SchemeFactory {
      public setPrivacy_resultTupleScheme getScheme() {
        return new setPrivacy_resultTupleScheme();
      }
    }

    private static class setPrivacy_resultTupleScheme extends TupleScheme<setPrivacy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPrivacy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPrivacy_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addRewardPoints_args implements org.apache.thrift.TBase<addRewardPoints_args, addRewardPoints_args._Fields>, java.io.Serializable, Cloneable, Comparable<addRewardPoints_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRewardPoints_args");

    private static final org.apache.thrift.protocol.TField ADD_REWARD_POINTS_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("addRewardPointsRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRewardPoints_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRewardPoints_argsTupleSchemeFactory());
    }

    public AddRewardPointsRequest addRewardPointsRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADD_REWARD_POINTS_REQUEST((short)1, "addRewardPointsRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADD_REWARD_POINTS_REQUEST
            return ADD_REWARD_POINTS_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADD_REWARD_POINTS_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("addRewardPointsRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AddRewardPointsRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRewardPoints_args.class, metaDataMap);
    }

    public addRewardPoints_args() {
    }

    public addRewardPoints_args(
      AddRewardPointsRequest addRewardPointsRequest)
    {
      this();
      this.addRewardPointsRequest = addRewardPointsRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRewardPoints_args(addRewardPoints_args other) {
      if (other.isSetAddRewardPointsRequest()) {
        this.addRewardPointsRequest = new AddRewardPointsRequest(other.addRewardPointsRequest);
      }
    }

    public addRewardPoints_args deepCopy() {
      return new addRewardPoints_args(this);
    }

    @Override
    public void clear() {
      this.addRewardPointsRequest = null;
    }

    public AddRewardPointsRequest getAddRewardPointsRequest() {
      return this.addRewardPointsRequest;
    }

    public addRewardPoints_args setAddRewardPointsRequest(AddRewardPointsRequest addRewardPointsRequest) {
      this.addRewardPointsRequest = addRewardPointsRequest;
      return this;
    }

    public void unsetAddRewardPointsRequest() {
      this.addRewardPointsRequest = null;
    }

    /** Returns true if field addRewardPointsRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetAddRewardPointsRequest() {
      return this.addRewardPointsRequest != null;
    }

    public void setAddRewardPointsRequestIsSet(boolean value) {
      if (!value) {
        this.addRewardPointsRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADD_REWARD_POINTS_REQUEST:
        if (value == null) {
          unsetAddRewardPointsRequest();
        } else {
          setAddRewardPointsRequest((AddRewardPointsRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADD_REWARD_POINTS_REQUEST:
        return getAddRewardPointsRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADD_REWARD_POINTS_REQUEST:
        return isSetAddRewardPointsRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRewardPoints_args)
        return this.equals((addRewardPoints_args)that);
      return false;
    }

    public boolean equals(addRewardPoints_args that) {
      if (that == null)
        return false;

      boolean this_present_addRewardPointsRequest = true && this.isSetAddRewardPointsRequest();
      boolean that_present_addRewardPointsRequest = true && that.isSetAddRewardPointsRequest();
      if (this_present_addRewardPointsRequest || that_present_addRewardPointsRequest) {
        if (!(this_present_addRewardPointsRequest && that_present_addRewardPointsRequest))
          return false;
        if (!this.addRewardPointsRequest.equals(that.addRewardPointsRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_addRewardPointsRequest = true && (isSetAddRewardPointsRequest());
      list.add(present_addRewardPointsRequest);
      if (present_addRewardPointsRequest)
        list.add(addRewardPointsRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(addRewardPoints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAddRewardPointsRequest()).compareTo(other.isSetAddRewardPointsRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddRewardPointsRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addRewardPointsRequest, other.addRewardPointsRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRewardPoints_args(");
      boolean first = true;

      sb.append("addRewardPointsRequest:");
      if (this.addRewardPointsRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.addRewardPointsRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (addRewardPointsRequest != null) {
        addRewardPointsRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRewardPoints_argsStandardSchemeFactory implements SchemeFactory {
      public addRewardPoints_argsStandardScheme getScheme() {
        return new addRewardPoints_argsStandardScheme();
      }
    }

    private static class addRewardPoints_argsStandardScheme extends StandardScheme<addRewardPoints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRewardPoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADD_REWARD_POINTS_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.addRewardPointsRequest = new AddRewardPointsRequest();
                struct.addRewardPointsRequest.read(iprot);
                struct.setAddRewardPointsRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRewardPoints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.addRewardPointsRequest != null) {
          oprot.writeFieldBegin(ADD_REWARD_POINTS_REQUEST_FIELD_DESC);
          struct.addRewardPointsRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRewardPoints_argsTupleSchemeFactory implements SchemeFactory {
      public addRewardPoints_argsTupleScheme getScheme() {
        return new addRewardPoints_argsTupleScheme();
      }
    }

    private static class addRewardPoints_argsTupleScheme extends TupleScheme<addRewardPoints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRewardPoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAddRewardPointsRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAddRewardPointsRequest()) {
          struct.addRewardPointsRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRewardPoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.addRewardPointsRequest = new AddRewardPointsRequest();
          struct.addRewardPointsRequest.read(iprot);
          struct.setAddRewardPointsRequestIsSet(true);
        }
      }
    }

  }

  public static class addRewardPoints_result implements org.apache.thrift.TBase<addRewardPoints_result, addRewardPoints_result._Fields>, java.io.Serializable, Cloneable, Comparable<addRewardPoints_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addRewardPoints_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addRewardPoints_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addRewardPoints_resultTupleSchemeFactory());
    }

    /**
     * 
     * @see AddRewardPointsResponse
     */
    public AddRewardPointsResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 
       * @see AddRewardPointsResponse
       */
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, AddRewardPointsResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addRewardPoints_result.class, metaDataMap);
    }

    public addRewardPoints_result() {
    }

    public addRewardPoints_result(
      AddRewardPointsResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addRewardPoints_result(addRewardPoints_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addRewardPoints_result deepCopy() {
      return new addRewardPoints_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * 
     * @see AddRewardPointsResponse
     */
    public AddRewardPointsResponse getSuccess() {
      return this.success;
    }

    /**
     * 
     * @see AddRewardPointsResponse
     */
    public addRewardPoints_result setSuccess(AddRewardPointsResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((AddRewardPointsResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addRewardPoints_result)
        return this.equals((addRewardPoints_result)that);
      return false;
    }

    public boolean equals(addRewardPoints_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success.getValue());

      return list.hashCode();
    }

    @Override
    public int compareTo(addRewardPoints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addRewardPoints_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addRewardPoints_resultStandardSchemeFactory implements SchemeFactory {
      public addRewardPoints_resultStandardScheme getScheme() {
        return new addRewardPoints_resultStandardScheme();
      }
    }

    private static class addRewardPoints_resultStandardScheme extends StandardScheme<addRewardPoints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addRewardPoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = co.tagtalk.winemate.thriftfiles.AddRewardPointsResponse.findByValue(iprot.readI32());
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addRewardPoints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addRewardPoints_resultTupleSchemeFactory implements SchemeFactory {
      public addRewardPoints_resultTupleScheme getScheme() {
        return new addRewardPoints_resultTupleScheme();
      }
    }

    private static class addRewardPoints_resultTupleScheme extends TupleScheme<addRewardPoints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addRewardPoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addRewardPoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = co.tagtalk.winemate.thriftfiles.AddRewardPointsResponse.findByValue(iprot.readI32());
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMyRewardPoints_args implements org.apache.thrift.TBase<getMyRewardPoints_args, getMyRewardPoints_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyRewardPoints_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyRewardPoints_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyRewardPoints_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyRewardPoints_argsTupleSchemeFactory());
    }

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyRewardPoints_args.class, metaDataMap);
    }

    public getMyRewardPoints_args() {
    }

    public getMyRewardPoints_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyRewardPoints_args(getMyRewardPoints_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public getMyRewardPoints_args deepCopy() {
      return new getMyRewardPoints_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public getMyRewardPoints_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyRewardPoints_args)
        return this.equals((getMyRewardPoints_args)that);
      return false;
    }

    public boolean equals(getMyRewardPoints_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyRewardPoints_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyRewardPoints_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyRewardPoints_argsStandardSchemeFactory implements SchemeFactory {
      public getMyRewardPoints_argsStandardScheme getScheme() {
        return new getMyRewardPoints_argsStandardScheme();
      }
    }

    private static class getMyRewardPoints_argsStandardScheme extends StandardScheme<getMyRewardPoints_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyRewardPoints_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyRewardPoints_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyRewardPoints_argsTupleSchemeFactory implements SchemeFactory {
      public getMyRewardPoints_argsTupleScheme getScheme() {
        return new getMyRewardPoints_argsTupleScheme();
      }
    }

    private static class getMyRewardPoints_argsTupleScheme extends TupleScheme<getMyRewardPoints_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyRewardPoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyRewardPoints_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getMyRewardPoints_result implements org.apache.thrift.TBase<getMyRewardPoints_result, getMyRewardPoints_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyRewardPoints_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyRewardPoints_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyRewardPoints_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyRewardPoints_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyRewardPoints_result.class, metaDataMap);
    }

    public getMyRewardPoints_result() {
    }

    public getMyRewardPoints_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyRewardPoints_result(getMyRewardPoints_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public getMyRewardPoints_result deepCopy() {
      return new getMyRewardPoints_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public getMyRewardPoints_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyRewardPoints_result)
        return this.equals((getMyRewardPoints_result)that);
      return false;
    }

    public boolean equals(getMyRewardPoints_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyRewardPoints_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyRewardPoints_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyRewardPoints_resultStandardSchemeFactory implements SchemeFactory {
      public getMyRewardPoints_resultStandardScheme getScheme() {
        return new getMyRewardPoints_resultStandardScheme();
      }
    }

    private static class getMyRewardPoints_resultStandardScheme extends StandardScheme<getMyRewardPoints_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyRewardPoints_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyRewardPoints_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyRewardPoints_resultTupleSchemeFactory implements SchemeFactory {
      public getMyRewardPoints_resultTupleScheme getScheme() {
        return new getMyRewardPoints_resultTupleScheme();
      }
    }

    private static class getMyRewardPoints_resultTupleScheme extends TupleScheme<getMyRewardPoints_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyRewardPoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyRewardPoints_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getRewardItemList_args implements org.apache.thrift.TBase<getRewardItemList_args, getRewardItemList_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRewardItemList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRewardItemList_args");

    private static final org.apache.thrift.protocol.TField REWARD_ITEM_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("rewardItemRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRewardItemList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRewardItemList_argsTupleSchemeFactory());
    }

    public RewardItemRequest rewardItemRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REWARD_ITEM_REQUEST((short)1, "rewardItemRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REWARD_ITEM_REQUEST
            return REWARD_ITEM_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REWARD_ITEM_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("rewardItemRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RewardItemRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRewardItemList_args.class, metaDataMap);
    }

    public getRewardItemList_args() {
    }

    public getRewardItemList_args(
      RewardItemRequest rewardItemRequest)
    {
      this();
      this.rewardItemRequest = rewardItemRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRewardItemList_args(getRewardItemList_args other) {
      if (other.isSetRewardItemRequest()) {
        this.rewardItemRequest = new RewardItemRequest(other.rewardItemRequest);
      }
    }

    public getRewardItemList_args deepCopy() {
      return new getRewardItemList_args(this);
    }

    @Override
    public void clear() {
      this.rewardItemRequest = null;
    }

    public RewardItemRequest getRewardItemRequest() {
      return this.rewardItemRequest;
    }

    public getRewardItemList_args setRewardItemRequest(RewardItemRequest rewardItemRequest) {
      this.rewardItemRequest = rewardItemRequest;
      return this;
    }

    public void unsetRewardItemRequest() {
      this.rewardItemRequest = null;
    }

    /** Returns true if field rewardItemRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetRewardItemRequest() {
      return this.rewardItemRequest != null;
    }

    public void setRewardItemRequestIsSet(boolean value) {
      if (!value) {
        this.rewardItemRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REWARD_ITEM_REQUEST:
        if (value == null) {
          unsetRewardItemRequest();
        } else {
          setRewardItemRequest((RewardItemRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REWARD_ITEM_REQUEST:
        return getRewardItemRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REWARD_ITEM_REQUEST:
        return isSetRewardItemRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRewardItemList_args)
        return this.equals((getRewardItemList_args)that);
      return false;
    }

    public boolean equals(getRewardItemList_args that) {
      if (that == null)
        return false;

      boolean this_present_rewardItemRequest = true && this.isSetRewardItemRequest();
      boolean that_present_rewardItemRequest = true && that.isSetRewardItemRequest();
      if (this_present_rewardItemRequest || that_present_rewardItemRequest) {
        if (!(this_present_rewardItemRequest && that_present_rewardItemRequest))
          return false;
        if (!this.rewardItemRequest.equals(that.rewardItemRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rewardItemRequest = true && (isSetRewardItemRequest());
      list.add(present_rewardItemRequest);
      if (present_rewardItemRequest)
        list.add(rewardItemRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRewardItemList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRewardItemRequest()).compareTo(other.isSetRewardItemRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRewardItemRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rewardItemRequest, other.rewardItemRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRewardItemList_args(");
      boolean first = true;

      sb.append("rewardItemRequest:");
      if (this.rewardItemRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.rewardItemRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rewardItemRequest != null) {
        rewardItemRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRewardItemList_argsStandardSchemeFactory implements SchemeFactory {
      public getRewardItemList_argsStandardScheme getScheme() {
        return new getRewardItemList_argsStandardScheme();
      }
    }

    private static class getRewardItemList_argsStandardScheme extends StandardScheme<getRewardItemList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRewardItemList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REWARD_ITEM_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rewardItemRequest = new RewardItemRequest();
                struct.rewardItemRequest.read(iprot);
                struct.setRewardItemRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRewardItemList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rewardItemRequest != null) {
          oprot.writeFieldBegin(REWARD_ITEM_REQUEST_FIELD_DESC);
          struct.rewardItemRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRewardItemList_argsTupleSchemeFactory implements SchemeFactory {
      public getRewardItemList_argsTupleScheme getScheme() {
        return new getRewardItemList_argsTupleScheme();
      }
    }

    private static class getRewardItemList_argsTupleScheme extends TupleScheme<getRewardItemList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRewardItemList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRewardItemRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRewardItemRequest()) {
          struct.rewardItemRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRewardItemList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rewardItemRequest = new RewardItemRequest();
          struct.rewardItemRequest.read(iprot);
          struct.setRewardItemRequestIsSet(true);
        }
      }
    }

  }

  public static class getRewardItemList_result implements org.apache.thrift.TBase<getRewardItemList_result, getRewardItemList_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRewardItemList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRewardItemList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRewardItemList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRewardItemList_resultTupleSchemeFactory());
    }

    public RewardItemResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RewardItemResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRewardItemList_result.class, metaDataMap);
    }

    public getRewardItemList_result() {
    }

    public getRewardItemList_result(
      RewardItemResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRewardItemList_result(getRewardItemList_result other) {
      if (other.isSetSuccess()) {
        this.success = new RewardItemResponse(other.success);
      }
    }

    public getRewardItemList_result deepCopy() {
      return new getRewardItemList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RewardItemResponse getSuccess() {
      return this.success;
    }

    public getRewardItemList_result setSuccess(RewardItemResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RewardItemResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRewardItemList_result)
        return this.equals((getRewardItemList_result)that);
      return false;
    }

    public boolean equals(getRewardItemList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRewardItemList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRewardItemList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRewardItemList_resultStandardSchemeFactory implements SchemeFactory {
      public getRewardItemList_resultStandardScheme getScheme() {
        return new getRewardItemList_resultStandardScheme();
      }
    }

    private static class getRewardItemList_resultStandardScheme extends StandardScheme<getRewardItemList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRewardItemList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RewardItemResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRewardItemList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRewardItemList_resultTupleSchemeFactory implements SchemeFactory {
      public getRewardItemList_resultTupleScheme getScheme() {
        return new getRewardItemList_resultTupleScheme();
      }
    }

    private static class getRewardItemList_resultTupleScheme extends TupleScheme<getRewardItemList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRewardItemList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRewardItemList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RewardItemResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class rewardRedeem_args implements org.apache.thrift.TBase<rewardRedeem_args, rewardRedeem_args._Fields>, java.io.Serializable, Cloneable, Comparable<rewardRedeem_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rewardRedeem_args");

    private static final org.apache.thrift.protocol.TField REWARD_REDEEM_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("rewardRedeemRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rewardRedeem_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rewardRedeem_argsTupleSchemeFactory());
    }

    public RewardRedeemRequest rewardRedeemRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REWARD_REDEEM_REQUEST((short)1, "rewardRedeemRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REWARD_REDEEM_REQUEST
            return REWARD_REDEEM_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REWARD_REDEEM_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("rewardRedeemRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RewardRedeemRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rewardRedeem_args.class, metaDataMap);
    }

    public rewardRedeem_args() {
    }

    public rewardRedeem_args(
      RewardRedeemRequest rewardRedeemRequest)
    {
      this();
      this.rewardRedeemRequest = rewardRedeemRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rewardRedeem_args(rewardRedeem_args other) {
      if (other.isSetRewardRedeemRequest()) {
        this.rewardRedeemRequest = new RewardRedeemRequest(other.rewardRedeemRequest);
      }
    }

    public rewardRedeem_args deepCopy() {
      return new rewardRedeem_args(this);
    }

    @Override
    public void clear() {
      this.rewardRedeemRequest = null;
    }

    public RewardRedeemRequest getRewardRedeemRequest() {
      return this.rewardRedeemRequest;
    }

    public rewardRedeem_args setRewardRedeemRequest(RewardRedeemRequest rewardRedeemRequest) {
      this.rewardRedeemRequest = rewardRedeemRequest;
      return this;
    }

    public void unsetRewardRedeemRequest() {
      this.rewardRedeemRequest = null;
    }

    /** Returns true if field rewardRedeemRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetRewardRedeemRequest() {
      return this.rewardRedeemRequest != null;
    }

    public void setRewardRedeemRequestIsSet(boolean value) {
      if (!value) {
        this.rewardRedeemRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REWARD_REDEEM_REQUEST:
        if (value == null) {
          unsetRewardRedeemRequest();
        } else {
          setRewardRedeemRequest((RewardRedeemRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REWARD_REDEEM_REQUEST:
        return getRewardRedeemRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REWARD_REDEEM_REQUEST:
        return isSetRewardRedeemRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rewardRedeem_args)
        return this.equals((rewardRedeem_args)that);
      return false;
    }

    public boolean equals(rewardRedeem_args that) {
      if (that == null)
        return false;

      boolean this_present_rewardRedeemRequest = true && this.isSetRewardRedeemRequest();
      boolean that_present_rewardRedeemRequest = true && that.isSetRewardRedeemRequest();
      if (this_present_rewardRedeemRequest || that_present_rewardRedeemRequest) {
        if (!(this_present_rewardRedeemRequest && that_present_rewardRedeemRequest))
          return false;
        if (!this.rewardRedeemRequest.equals(that.rewardRedeemRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rewardRedeemRequest = true && (isSetRewardRedeemRequest());
      list.add(present_rewardRedeemRequest);
      if (present_rewardRedeemRequest)
        list.add(rewardRedeemRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(rewardRedeem_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRewardRedeemRequest()).compareTo(other.isSetRewardRedeemRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRewardRedeemRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rewardRedeemRequest, other.rewardRedeemRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rewardRedeem_args(");
      boolean first = true;

      sb.append("rewardRedeemRequest:");
      if (this.rewardRedeemRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.rewardRedeemRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rewardRedeemRequest != null) {
        rewardRedeemRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rewardRedeem_argsStandardSchemeFactory implements SchemeFactory {
      public rewardRedeem_argsStandardScheme getScheme() {
        return new rewardRedeem_argsStandardScheme();
      }
    }

    private static class rewardRedeem_argsStandardScheme extends StandardScheme<rewardRedeem_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rewardRedeem_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REWARD_REDEEM_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rewardRedeemRequest = new RewardRedeemRequest();
                struct.rewardRedeemRequest.read(iprot);
                struct.setRewardRedeemRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rewardRedeem_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rewardRedeemRequest != null) {
          oprot.writeFieldBegin(REWARD_REDEEM_REQUEST_FIELD_DESC);
          struct.rewardRedeemRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rewardRedeem_argsTupleSchemeFactory implements SchemeFactory {
      public rewardRedeem_argsTupleScheme getScheme() {
        return new rewardRedeem_argsTupleScheme();
      }
    }

    private static class rewardRedeem_argsTupleScheme extends TupleScheme<rewardRedeem_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rewardRedeem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRewardRedeemRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRewardRedeemRequest()) {
          struct.rewardRedeemRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rewardRedeem_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rewardRedeemRequest = new RewardRedeemRequest();
          struct.rewardRedeemRequest.read(iprot);
          struct.setRewardRedeemRequestIsSet(true);
        }
      }
    }

  }

  public static class rewardRedeem_result implements org.apache.thrift.TBase<rewardRedeem_result, rewardRedeem_result._Fields>, java.io.Serializable, Cloneable, Comparable<rewardRedeem_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rewardRedeem_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rewardRedeem_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rewardRedeem_resultTupleSchemeFactory());
    }

    public RewardRedeemResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RewardRedeemResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rewardRedeem_result.class, metaDataMap);
    }

    public rewardRedeem_result() {
    }

    public rewardRedeem_result(
      RewardRedeemResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rewardRedeem_result(rewardRedeem_result other) {
      if (other.isSetSuccess()) {
        this.success = new RewardRedeemResponse(other.success);
      }
    }

    public rewardRedeem_result deepCopy() {
      return new rewardRedeem_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public RewardRedeemResponse getSuccess() {
      return this.success;
    }

    public rewardRedeem_result setSuccess(RewardRedeemResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RewardRedeemResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rewardRedeem_result)
        return this.equals((rewardRedeem_result)that);
      return false;
    }

    public boolean equals(rewardRedeem_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(rewardRedeem_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rewardRedeem_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rewardRedeem_resultStandardSchemeFactory implements SchemeFactory {
      public rewardRedeem_resultStandardScheme getScheme() {
        return new rewardRedeem_resultStandardScheme();
      }
    }

    private static class rewardRedeem_resultStandardScheme extends StandardScheme<rewardRedeem_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rewardRedeem_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RewardRedeemResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rewardRedeem_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rewardRedeem_resultTupleSchemeFactory implements SchemeFactory {
      public rewardRedeem_resultTupleScheme getScheme() {
        return new rewardRedeem_resultTupleScheme();
      }
    }

    private static class rewardRedeem_resultTupleScheme extends TupleScheme<rewardRedeem_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rewardRedeem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rewardRedeem_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new RewardRedeemResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getUserPhoto_args implements org.apache.thrift.TBase<getUserPhoto_args, getUserPhoto_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUserPhoto_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserPhoto_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserPhoto_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserPhoto_argsTupleSchemeFactory());
    }

    public int userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserPhoto_args.class, metaDataMap);
    }

    public getUserPhoto_args() {
    }

    public getUserPhoto_args(
      int userId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserPhoto_args(getUserPhoto_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
    }

    public getUserPhoto_args deepCopy() {
      return new getUserPhoto_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public getUserPhoto_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserPhoto_args)
        return this.equals((getUserPhoto_args)that);
      return false;
    }

    public boolean equals(getUserPhoto_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserPhoto_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserPhoto_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserPhoto_argsStandardSchemeFactory implements SchemeFactory {
      public getUserPhoto_argsStandardScheme getScheme() {
        return new getUserPhoto_argsStandardScheme();
      }
    }

    private static class getUserPhoto_argsStandardScheme extends StandardScheme<getUserPhoto_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserPhoto_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserPhoto_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserPhoto_argsTupleSchemeFactory implements SchemeFactory {
      public getUserPhoto_argsTupleScheme getScheme() {
        return new getUserPhoto_argsTupleScheme();
      }
    }

    private static class getUserPhoto_argsTupleScheme extends TupleScheme<getUserPhoto_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserPhoto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserPhoto_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
      }
    }

  }

  public static class getUserPhoto_result implements org.apache.thrift.TBase<getUserPhoto_result, getUserPhoto_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUserPhoto_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUserPhoto_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getUserPhoto_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getUserPhoto_resultTupleSchemeFactory());
    }

    public UserPhotoResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, UserPhotoResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUserPhoto_result.class, metaDataMap);
    }

    public getUserPhoto_result() {
    }

    public getUserPhoto_result(
      UserPhotoResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUserPhoto_result(getUserPhoto_result other) {
      if (other.isSetSuccess()) {
        this.success = new UserPhotoResponse(other.success);
      }
    }

    public getUserPhoto_result deepCopy() {
      return new getUserPhoto_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public UserPhotoResponse getSuccess() {
      return this.success;
    }

    public getUserPhoto_result setSuccess(UserPhotoResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((UserPhotoResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getUserPhoto_result)
        return this.equals((getUserPhoto_result)that);
      return false;
    }

    public boolean equals(getUserPhoto_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getUserPhoto_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getUserPhoto_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUserPhoto_resultStandardSchemeFactory implements SchemeFactory {
      public getUserPhoto_resultStandardScheme getScheme() {
        return new getUserPhoto_resultStandardScheme();
      }
    }

    private static class getUserPhoto_resultStandardScheme extends StandardScheme<getUserPhoto_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUserPhoto_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new UserPhotoResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUserPhoto_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUserPhoto_resultTupleSchemeFactory implements SchemeFactory {
      public getUserPhoto_resultTupleScheme getScheme() {
        return new getUserPhoto_resultTupleScheme();
      }
    }

    private static class getUserPhoto_resultTupleScheme extends TupleScheme<getUserPhoto_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUserPhoto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUserPhoto_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new UserPhotoResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getMyWishlist_args implements org.apache.thrift.TBase<getMyWishlist_args, getMyWishlist_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMyWishlist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyWishlist_args");

    private static final org.apache.thrift.protocol.TField MY_BOTTLES_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("myBottlesRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyWishlist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyWishlist_argsTupleSchemeFactory());
    }

    public MyBottlesRequest myBottlesRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MY_BOTTLES_REQUEST((short)1, "myBottlesRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MY_BOTTLES_REQUEST
            return MY_BOTTLES_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MY_BOTTLES_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("myBottlesRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyBottlesRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyWishlist_args.class, metaDataMap);
    }

    public getMyWishlist_args() {
    }

    public getMyWishlist_args(
      MyBottlesRequest myBottlesRequest)
    {
      this();
      this.myBottlesRequest = myBottlesRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyWishlist_args(getMyWishlist_args other) {
      if (other.isSetMyBottlesRequest()) {
        this.myBottlesRequest = new MyBottlesRequest(other.myBottlesRequest);
      }
    }

    public getMyWishlist_args deepCopy() {
      return new getMyWishlist_args(this);
    }

    @Override
    public void clear() {
      this.myBottlesRequest = null;
    }

    public MyBottlesRequest getMyBottlesRequest() {
      return this.myBottlesRequest;
    }

    public getMyWishlist_args setMyBottlesRequest(MyBottlesRequest myBottlesRequest) {
      this.myBottlesRequest = myBottlesRequest;
      return this;
    }

    public void unsetMyBottlesRequest() {
      this.myBottlesRequest = null;
    }

    /** Returns true if field myBottlesRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetMyBottlesRequest() {
      return this.myBottlesRequest != null;
    }

    public void setMyBottlesRequestIsSet(boolean value) {
      if (!value) {
        this.myBottlesRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case MY_BOTTLES_REQUEST:
        if (value == null) {
          unsetMyBottlesRequest();
        } else {
          setMyBottlesRequest((MyBottlesRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case MY_BOTTLES_REQUEST:
        return getMyBottlesRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case MY_BOTTLES_REQUEST:
        return isSetMyBottlesRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyWishlist_args)
        return this.equals((getMyWishlist_args)that);
      return false;
    }

    public boolean equals(getMyWishlist_args that) {
      if (that == null)
        return false;

      boolean this_present_myBottlesRequest = true && this.isSetMyBottlesRequest();
      boolean that_present_myBottlesRequest = true && that.isSetMyBottlesRequest();
      if (this_present_myBottlesRequest || that_present_myBottlesRequest) {
        if (!(this_present_myBottlesRequest && that_present_myBottlesRequest))
          return false;
        if (!this.myBottlesRequest.equals(that.myBottlesRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_myBottlesRequest = true && (isSetMyBottlesRequest());
      list.add(present_myBottlesRequest);
      if (present_myBottlesRequest)
        list.add(myBottlesRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyWishlist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetMyBottlesRequest()).compareTo(other.isSetMyBottlesRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMyBottlesRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myBottlesRequest, other.myBottlesRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyWishlist_args(");
      boolean first = true;

      sb.append("myBottlesRequest:");
      if (this.myBottlesRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.myBottlesRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (myBottlesRequest != null) {
        myBottlesRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyWishlist_argsStandardSchemeFactory implements SchemeFactory {
      public getMyWishlist_argsStandardScheme getScheme() {
        return new getMyWishlist_argsStandardScheme();
      }
    }

    private static class getMyWishlist_argsStandardScheme extends StandardScheme<getMyWishlist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyWishlist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MY_BOTTLES_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.myBottlesRequest = new MyBottlesRequest();
                struct.myBottlesRequest.read(iprot);
                struct.setMyBottlesRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyWishlist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.myBottlesRequest != null) {
          oprot.writeFieldBegin(MY_BOTTLES_REQUEST_FIELD_DESC);
          struct.myBottlesRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyWishlist_argsTupleSchemeFactory implements SchemeFactory {
      public getMyWishlist_argsTupleScheme getScheme() {
        return new getMyWishlist_argsTupleScheme();
      }
    }

    private static class getMyWishlist_argsTupleScheme extends TupleScheme<getMyWishlist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyWishlist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetMyBottlesRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMyBottlesRequest()) {
          struct.myBottlesRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyWishlist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.myBottlesRequest = new MyBottlesRequest();
          struct.myBottlesRequest.read(iprot);
          struct.setMyBottlesRequestIsSet(true);
        }
      }
    }

  }

  public static class getMyWishlist_result implements org.apache.thrift.TBase<getMyWishlist_result, getMyWishlist_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMyWishlist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMyWishlist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getMyWishlist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getMyWishlist_resultTupleSchemeFactory());
    }

    public MyWishListResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyWishListResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMyWishlist_result.class, metaDataMap);
    }

    public getMyWishlist_result() {
    }

    public getMyWishlist_result(
      MyWishListResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMyWishlist_result(getMyWishlist_result other) {
      if (other.isSetSuccess()) {
        this.success = new MyWishListResponse(other.success);
      }
    }

    public getMyWishlist_result deepCopy() {
      return new getMyWishlist_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public MyWishListResponse getSuccess() {
      return this.success;
    }

    public getMyWishlist_result setSuccess(MyWishListResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((MyWishListResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getMyWishlist_result)
        return this.equals((getMyWishlist_result)that);
      return false;
    }

    public boolean equals(getMyWishlist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(getMyWishlist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getMyWishlist_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMyWishlist_resultStandardSchemeFactory implements SchemeFactory {
      public getMyWishlist_resultStandardScheme getScheme() {
        return new getMyWishlist_resultStandardScheme();
      }
    }

    private static class getMyWishlist_resultStandardScheme extends StandardScheme<getMyWishlist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMyWishlist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new MyWishListResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMyWishlist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMyWishlist_resultTupleSchemeFactory implements SchemeFactory {
      public getMyWishlist_resultTupleScheme getScheme() {
        return new getMyWishlist_resultTupleScheme();
      }
    }

    private static class getMyWishlist_resultTupleScheme extends TupleScheme<getMyWishlist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMyWishlist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMyWishlist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new MyWishListResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class addToWishlist_args implements org.apache.thrift.TBase<addToWishlist_args, addToWishlist_args._Fields>, java.io.Serializable, Cloneable, Comparable<addToWishlist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToWishlist_args");

    private static final org.apache.thrift.protocol.TField ADD_TO_WISHLIST_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("addToWishlistRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToWishlist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToWishlist_argsTupleSchemeFactory());
    }

    public AddToWishlistRequest addToWishlistRequest; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ADD_TO_WISHLIST_REQUEST((short)1, "addToWishlistRequest");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ADD_TO_WISHLIST_REQUEST
            return ADD_TO_WISHLIST_REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ADD_TO_WISHLIST_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("addToWishlistRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, AddToWishlistRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToWishlist_args.class, metaDataMap);
    }

    public addToWishlist_args() {
    }

    public addToWishlist_args(
      AddToWishlistRequest addToWishlistRequest)
    {
      this();
      this.addToWishlistRequest = addToWishlistRequest;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToWishlist_args(addToWishlist_args other) {
      if (other.isSetAddToWishlistRequest()) {
        this.addToWishlistRequest = new AddToWishlistRequest(other.addToWishlistRequest);
      }
    }

    public addToWishlist_args deepCopy() {
      return new addToWishlist_args(this);
    }

    @Override
    public void clear() {
      this.addToWishlistRequest = null;
    }

    public AddToWishlistRequest getAddToWishlistRequest() {
      return this.addToWishlistRequest;
    }

    public addToWishlist_args setAddToWishlistRequest(AddToWishlistRequest addToWishlistRequest) {
      this.addToWishlistRequest = addToWishlistRequest;
      return this;
    }

    public void unsetAddToWishlistRequest() {
      this.addToWishlistRequest = null;
    }

    /** Returns true if field addToWishlistRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetAddToWishlistRequest() {
      return this.addToWishlistRequest != null;
    }

    public void setAddToWishlistRequestIsSet(boolean value) {
      if (!value) {
        this.addToWishlistRequest = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ADD_TO_WISHLIST_REQUEST:
        if (value == null) {
          unsetAddToWishlistRequest();
        } else {
          setAddToWishlistRequest((AddToWishlistRequest)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ADD_TO_WISHLIST_REQUEST:
        return getAddToWishlistRequest();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ADD_TO_WISHLIST_REQUEST:
        return isSetAddToWishlistRequest();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToWishlist_args)
        return this.equals((addToWishlist_args)that);
      return false;
    }

    public boolean equals(addToWishlist_args that) {
      if (that == null)
        return false;

      boolean this_present_addToWishlistRequest = true && this.isSetAddToWishlistRequest();
      boolean that_present_addToWishlistRequest = true && that.isSetAddToWishlistRequest();
      if (this_present_addToWishlistRequest || that_present_addToWishlistRequest) {
        if (!(this_present_addToWishlistRequest && that_present_addToWishlistRequest))
          return false;
        if (!this.addToWishlistRequest.equals(that.addToWishlistRequest))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_addToWishlistRequest = true && (isSetAddToWishlistRequest());
      list.add(present_addToWishlistRequest);
      if (present_addToWishlistRequest)
        list.add(addToWishlistRequest);

      return list.hashCode();
    }

    @Override
    public int compareTo(addToWishlist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetAddToWishlistRequest()).compareTo(other.isSetAddToWishlistRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddToWishlistRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addToWishlistRequest, other.addToWishlistRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToWishlist_args(");
      boolean first = true;

      sb.append("addToWishlistRequest:");
      if (this.addToWishlistRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.addToWishlistRequest);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (addToWishlistRequest != null) {
        addToWishlistRequest.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToWishlist_argsStandardSchemeFactory implements SchemeFactory {
      public addToWishlist_argsStandardScheme getScheme() {
        return new addToWishlist_argsStandardScheme();
      }
    }

    private static class addToWishlist_argsStandardScheme extends StandardScheme<addToWishlist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToWishlist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ADD_TO_WISHLIST_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.addToWishlistRequest = new AddToWishlistRequest();
                struct.addToWishlistRequest.read(iprot);
                struct.setAddToWishlistRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToWishlist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.addToWishlistRequest != null) {
          oprot.writeFieldBegin(ADD_TO_WISHLIST_REQUEST_FIELD_DESC);
          struct.addToWishlistRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToWishlist_argsTupleSchemeFactory implements SchemeFactory {
      public addToWishlist_argsTupleScheme getScheme() {
        return new addToWishlist_argsTupleScheme();
      }
    }

    private static class addToWishlist_argsTupleScheme extends TupleScheme<addToWishlist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToWishlist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetAddToWishlistRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAddToWishlistRequest()) {
          struct.addToWishlistRequest.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToWishlist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.addToWishlistRequest = new AddToWishlistRequest();
          struct.addToWishlistRequest.read(iprot);
          struct.setAddToWishlistRequestIsSet(true);
        }
      }
    }

  }

  public static class addToWishlist_result implements org.apache.thrift.TBase<addToWishlist_result, addToWishlist_result._Fields>, java.io.Serializable, Cloneable, Comparable<addToWishlist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToWishlist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new addToWishlist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new addToWishlist_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToWishlist_result.class, metaDataMap);
    }

    public addToWishlist_result() {
    }

    public addToWishlist_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToWishlist_result(addToWishlist_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public addToWishlist_result deepCopy() {
      return new addToWishlist_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addToWishlist_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof addToWishlist_result)
        return this.equals((addToWishlist_result)that);
      return false;
    }

    public boolean equals(addToWishlist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(addToWishlist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("addToWishlist_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToWishlist_resultStandardSchemeFactory implements SchemeFactory {
      public addToWishlist_resultStandardScheme getScheme() {
        return new addToWishlist_resultStandardScheme();
      }
    }

    private static class addToWishlist_resultStandardScheme extends StandardScheme<addToWishlist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToWishlist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToWishlist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToWishlist_resultTupleSchemeFactory implements SchemeFactory {
      public addToWishlist_resultTupleScheme getScheme() {
        return new addToWishlist_resultTupleScheme();
      }
    }

    private static class addToWishlist_resultTupleScheme extends TupleScheme<addToWishlist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToWishlist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToWishlist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class isInWishlist_args implements org.apache.thrift.TBase<isInWishlist_args, isInWishlist_args._Fields>, java.io.Serializable, Cloneable, Comparable<isInWishlist_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isInWishlist_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField WINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wineId", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isInWishlist_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isInWishlist_argsTupleSchemeFactory());
    }

    public int userId; // required
    public int wineId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId"),
      WINE_ID((short)2, "wineId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          case 2: // WINE_ID
            return WINE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __USERID_ISSET_ID = 0;
    private static final int __WINEID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.WINE_ID, new org.apache.thrift.meta_data.FieldMetaData("wineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isInWishlist_args.class, metaDataMap);
    }

    public isInWishlist_args() {
    }

    public isInWishlist_args(
      int userId,
      int wineId)
    {
      this();
      this.userId = userId;
      setUserIdIsSet(true);
      this.wineId = wineId;
      setWineIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isInWishlist_args(isInWishlist_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.userId = other.userId;
      this.wineId = other.wineId;
    }

    public isInWishlist_args deepCopy() {
      return new isInWishlist_args(this);
    }

    @Override
    public void clear() {
      setUserIdIsSet(false);
      this.userId = 0;
      setWineIdIsSet(false);
      this.wineId = 0;
    }

    public int getUserId() {
      return this.userId;
    }

    public isInWishlist_args setUserId(int userId) {
      this.userId = userId;
      setUserIdIsSet(true);
      return this;
    }

    public void unsetUserId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
    }

    public void setUserIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
    }

    public int getWineId() {
      return this.wineId;
    }

    public isInWishlist_args setWineId(int wineId) {
      this.wineId = wineId;
      setWineIdIsSet(true);
      return this;
    }

    public void unsetWineId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINEID_ISSET_ID);
    }

    /** Returns true if field wineId is set (has been assigned a value) and false otherwise */
    public boolean isSetWineId() {
      return EncodingUtils.testBit(__isset_bitfield, __WINEID_ISSET_ID);
    }

    public void setWineIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINEID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((Integer)value);
        }
        break;

      case WINE_ID:
        if (value == null) {
          unsetWineId();
        } else {
          setWineId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      case WINE_ID:
        return getWineId();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      case WINE_ID:
        return isSetWineId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isInWishlist_args)
        return this.equals((isInWishlist_args)that);
      return false;
    }

    public boolean equals(isInWishlist_args that) {
      if (that == null)
        return false;

      boolean this_present_userId = true;
      boolean that_present_userId = true;
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (this.userId != that.userId)
          return false;
      }

      boolean this_present_wineId = true;
      boolean that_present_wineId = true;
      if (this_present_wineId || that_present_wineId) {
        if (!(this_present_wineId && that_present_wineId))
          return false;
        if (this.wineId != that.wineId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_userId = true;
      list.add(present_userId);
      if (present_userId)
        list.add(userId);

      boolean present_wineId = true;
      list.add(present_wineId);
      if (present_wineId)
        list.add(wineId);

      return list.hashCode();
    }

    @Override
    public int compareTo(isInWishlist_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetWineId()).compareTo(other.isSetWineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineId, other.wineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isInWishlist_args(");
      boolean first = true;

      sb.append("userId:");
      sb.append(this.userId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("wineId:");
      sb.append(this.wineId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isInWishlist_argsStandardSchemeFactory implements SchemeFactory {
      public isInWishlist_argsStandardScheme getScheme() {
        return new isInWishlist_argsStandardScheme();
      }
    }

    private static class isInWishlist_argsStandardScheme extends StandardScheme<isInWishlist_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isInWishlist_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.userId = iprot.readI32();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // WINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.wineId = iprot.readI32();
                struct.setWineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isInWishlist_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeI32(struct.userId);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(WINE_ID_FIELD_DESC);
        oprot.writeI32(struct.wineId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isInWishlist_argsTupleSchemeFactory implements SchemeFactory {
      public isInWishlist_argsTupleScheme getScheme() {
        return new isInWishlist_argsTupleScheme();
      }
    }

    private static class isInWishlist_argsTupleScheme extends TupleScheme<isInWishlist_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isInWishlist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        if (struct.isSetWineId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUserId()) {
          oprot.writeI32(struct.userId);
        }
        if (struct.isSetWineId()) {
          oprot.writeI32(struct.wineId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isInWishlist_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.userId = iprot.readI32();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.wineId = iprot.readI32();
          struct.setWineIdIsSet(true);
        }
      }
    }

  }

  public static class isInWishlist_result implements org.apache.thrift.TBase<isInWishlist_result, isInWishlist_result._Fields>, java.io.Serializable, Cloneable, Comparable<isInWishlist_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isInWishlist_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new isInWishlist_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new isInWishlist_resultTupleSchemeFactory());
    }

    public IsInWishlistResponse success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, IsInWishlistResponse.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isInWishlist_result.class, metaDataMap);
    }

    public isInWishlist_result() {
    }

    public isInWishlist_result(
      IsInWishlistResponse success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isInWishlist_result(isInWishlist_result other) {
      if (other.isSetSuccess()) {
        this.success = new IsInWishlistResponse(other.success);
      }
    }

    public isInWishlist_result deepCopy() {
      return new isInWishlist_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public IsInWishlistResponse getSuccess() {
      return this.success;
    }

    public isInWishlist_result setSuccess(IsInWishlistResponse success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((IsInWishlistResponse)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof isInWishlist_result)
        return this.equals((isInWishlist_result)that);
      return false;
    }

    public boolean equals(isInWishlist_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(isInWishlist_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("isInWishlist_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isInWishlist_resultStandardSchemeFactory implements SchemeFactory {
      public isInWishlist_resultStandardScheme getScheme() {
        return new isInWishlist_resultStandardScheme();
      }
    }

    private static class isInWishlist_resultStandardScheme extends StandardScheme<isInWishlist_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isInWishlist_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new IsInWishlistResponse();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isInWishlist_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isInWishlist_resultTupleSchemeFactory implements SchemeFactory {
      public isInWishlist_resultTupleScheme getScheme() {
        return new isInWishlist_resultTupleScheme();
      }
    }

    private static class isInWishlist_resultTupleScheme extends TupleScheme<isInWishlist_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isInWishlist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isInWishlist_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new IsInWishlistResponse();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
