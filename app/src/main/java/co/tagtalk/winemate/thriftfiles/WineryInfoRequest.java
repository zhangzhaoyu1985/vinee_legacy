/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package co.tagtalk.winemate.thriftfiles;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-24")
public class WineryInfoRequest implements org.apache.thrift.TBase<WineryInfoRequest, WineryInfoRequest._Fields>, java.io.Serializable, Cloneable, Comparable<WineryInfoRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WineryInfoRequest");

  private static final org.apache.thrift.protocol.TField WINERY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("wineryName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COUNTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("countryId", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WineryInfoRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WineryInfoRequestTupleSchemeFactory());
  }

  public String wineryName; // required
  public int countryId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WINERY_NAME((short)1, "wineryName"),
    COUNTRY_ID((short)2, "countryId");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WINERY_NAME
          return WINERY_NAME;
        case 2: // COUNTRY_ID
          return COUNTRY_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __COUNTRYID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WINERY_NAME, new org.apache.thrift.meta_data.FieldMetaData("wineryName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("countryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WineryInfoRequest.class, metaDataMap);
  }

  public WineryInfoRequest() {
  }

  public WineryInfoRequest(
    String wineryName,
    int countryId)
  {
    this();
    this.wineryName = wineryName;
    this.countryId = countryId;
    setCountryIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WineryInfoRequest(WineryInfoRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetWineryName()) {
      this.wineryName = other.wineryName;
    }
    this.countryId = other.countryId;
  }

  public WineryInfoRequest deepCopy() {
    return new WineryInfoRequest(this);
  }

  @Override
  public void clear() {
    this.wineryName = null;
    setCountryIdIsSet(false);
    this.countryId = 0;
  }

  public String getWineryName() {
    return this.wineryName;
  }

  public WineryInfoRequest setWineryName(String wineryName) {
    this.wineryName = wineryName;
    return this;
  }

  public void unsetWineryName() {
    this.wineryName = null;
  }

  /** Returns true if field wineryName is set (has been assigned a value) and false otherwise */
  public boolean isSetWineryName() {
    return this.wineryName != null;
  }

  public void setWineryNameIsSet(boolean value) {
    if (!value) {
      this.wineryName = null;
    }
  }

  public int getCountryId() {
    return this.countryId;
  }

  public WineryInfoRequest setCountryId(int countryId) {
    this.countryId = countryId;
    setCountryIdIsSet(true);
    return this;
  }

  public void unsetCountryId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
  }

  /** Returns true if field countryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryId() {
    return EncodingUtils.testBit(__isset_bitfield, __COUNTRYID_ISSET_ID);
  }

  public void setCountryIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __COUNTRYID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WINERY_NAME:
      if (value == null) {
        unsetWineryName();
      } else {
        setWineryName((String)value);
      }
      break;

    case COUNTRY_ID:
      if (value == null) {
        unsetCountryId();
      } else {
        setCountryId((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WINERY_NAME:
      return getWineryName();

    case COUNTRY_ID:
      return getCountryId();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WINERY_NAME:
      return isSetWineryName();
    case COUNTRY_ID:
      return isSetCountryId();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WineryInfoRequest)
      return this.equals((WineryInfoRequest)that);
    return false;
  }

  public boolean equals(WineryInfoRequest that) {
    if (that == null)
      return false;

    boolean this_present_wineryName = true && this.isSetWineryName();
    boolean that_present_wineryName = true && that.isSetWineryName();
    if (this_present_wineryName || that_present_wineryName) {
      if (!(this_present_wineryName && that_present_wineryName))
        return false;
      if (!this.wineryName.equals(that.wineryName))
        return false;
    }

    boolean this_present_countryId = true;
    boolean that_present_countryId = true;
    if (this_present_countryId || that_present_countryId) {
      if (!(this_present_countryId && that_present_countryId))
        return false;
      if (this.countryId != that.countryId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_wineryName = true && (isSetWineryName());
    list.add(present_wineryName);
    if (present_wineryName)
      list.add(wineryName);

    boolean present_countryId = true;
    list.add(present_countryId);
    if (present_countryId)
      list.add(countryId);

    return list.hashCode();
  }

  @Override
  public int compareTo(WineryInfoRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWineryName()).compareTo(other.isSetWineryName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineryName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineryName, other.wineryName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryId()).compareTo(other.isSetCountryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryId, other.countryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WineryInfoRequest(");
    boolean first = true;

    sb.append("wineryName:");
    if (this.wineryName == null) {
      sb.append("null");
    } else {
      sb.append(this.wineryName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("countryId:");
    sb.append(this.countryId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WineryInfoRequestStandardSchemeFactory implements SchemeFactory {
    public WineryInfoRequestStandardScheme getScheme() {
      return new WineryInfoRequestStandardScheme();
    }
  }

  private static class WineryInfoRequestStandardScheme extends StandardScheme<WineryInfoRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WineryInfoRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WINERY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wineryName = iprot.readString();
              struct.setWineryNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUNTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.countryId = iprot.readI32();
              struct.setCountryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WineryInfoRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.wineryName != null) {
        oprot.writeFieldBegin(WINERY_NAME_FIELD_DESC);
        oprot.writeString(struct.wineryName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COUNTRY_ID_FIELD_DESC);
      oprot.writeI32(struct.countryId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WineryInfoRequestTupleSchemeFactory implements SchemeFactory {
    public WineryInfoRequestTupleScheme getScheme() {
      return new WineryInfoRequestTupleScheme();
    }
  }

  private static class WineryInfoRequestTupleScheme extends TupleScheme<WineryInfoRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WineryInfoRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWineryName()) {
        optionals.set(0);
      }
      if (struct.isSetCountryId()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetWineryName()) {
        oprot.writeString(struct.wineryName);
      }
      if (struct.isSetCountryId()) {
        oprot.writeI32(struct.countryId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WineryInfoRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.wineryName = iprot.readString();
        struct.setWineryNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.countryId = iprot.readI32();
        struct.setCountryIdIsSet(true);
      }
    }
  }

}

