/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package co.tagtalk.winemate.thriftfiles;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-24")
public class FriendInfo implements org.apache.thrift.TBase<FriendInfo, FriendInfo._Fields>, java.io.Serializable, Cloneable, Comparable<FriendInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FriendInfo");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField RATING_NUMBERS_FIELD_DESC = new org.apache.thrift.protocol.TField("ratingNumbers", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField IS_FOLLOWING_FIELD_DESC = new org.apache.thrift.protocol.TField("isFollowing", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField IS_FOLLOWED_FIELD_DESC = new org.apache.thrift.protocol.TField("isFollowed", org.apache.thrift.protocol.TType.BOOL, (short)6);
  private static final org.apache.thrift.protocol.TField LAST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lastName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("firstName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PHOTO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("photoUrl", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField THIRD_PARTY_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdParty", org.apache.thrift.protocol.TType.I32, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FriendInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FriendInfoTupleSchemeFactory());
  }

  public int userId; // required
  public String userName; // required
  public String sex; // required
  public int ratingNumbers; // required
  public boolean isFollowing; // required
  public boolean isFollowed; // required
  public String lastName; // required
  public String firstName; // required
  public String photoUrl; // required
  /**
   * 
   * @see ThirdParty
   */
  public ThirdParty thirdParty; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_ID((short)1, "userId"),
    USER_NAME((short)2, "userName"),
    SEX((short)3, "sex"),
    RATING_NUMBERS((short)4, "ratingNumbers"),
    IS_FOLLOWING((short)5, "isFollowing"),
    IS_FOLLOWED((short)6, "isFollowed"),
    LAST_NAME((short)7, "lastName"),
    FIRST_NAME((short)8, "firstName"),
    PHOTO_URL((short)9, "photoUrl"),
    /**
     * 
     * @see ThirdParty
     */
    THIRD_PARTY((short)10, "thirdParty");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // SEX
          return SEX;
        case 4: // RATING_NUMBERS
          return RATING_NUMBERS;
        case 5: // IS_FOLLOWING
          return IS_FOLLOWING;
        case 6: // IS_FOLLOWED
          return IS_FOLLOWED;
        case 7: // LAST_NAME
          return LAST_NAME;
        case 8: // FIRST_NAME
          return FIRST_NAME;
        case 9: // PHOTO_URL
          return PHOTO_URL;
        case 10: // THIRD_PARTY
          return THIRD_PARTY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USERID_ISSET_ID = 0;
  private static final int __RATINGNUMBERS_ISSET_ID = 1;
  private static final int __ISFOLLOWING_ISSET_ID = 2;
  private static final int __ISFOLLOWED_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RATING_NUMBERS, new org.apache.thrift.meta_data.FieldMetaData("ratingNumbers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_FOLLOWING, new org.apache.thrift.meta_data.FieldMetaData("isFollowing", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_FOLLOWED, new org.apache.thrift.meta_data.FieldMetaData("isFollowed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LAST_NAME, new org.apache.thrift.meta_data.FieldMetaData("lastName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("firstName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHOTO_URL, new org.apache.thrift.meta_data.FieldMetaData("photoUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD_PARTY, new org.apache.thrift.meta_data.FieldMetaData("thirdParty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThirdParty.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FriendInfo.class, metaDataMap);
  }

  public FriendInfo() {
  }

  public FriendInfo(
    int userId,
    String userName,
    String sex,
    int ratingNumbers,
    boolean isFollowing,
    boolean isFollowed,
    String lastName,
    String firstName,
    String photoUrl,
    ThirdParty thirdParty)
  {
    this();
    this.userId = userId;
    setUserIdIsSet(true);
    this.userName = userName;
    this.sex = sex;
    this.ratingNumbers = ratingNumbers;
    setRatingNumbersIsSet(true);
    this.isFollowing = isFollowing;
    setIsFollowingIsSet(true);
    this.isFollowed = isFollowed;
    setIsFollowedIsSet(true);
    this.lastName = lastName;
    this.firstName = firstName;
    this.photoUrl = photoUrl;
    this.thirdParty = thirdParty;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FriendInfo(FriendInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.userId = other.userId;
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetSex()) {
      this.sex = other.sex;
    }
    this.ratingNumbers = other.ratingNumbers;
    this.isFollowing = other.isFollowing;
    this.isFollowed = other.isFollowed;
    if (other.isSetLastName()) {
      this.lastName = other.lastName;
    }
    if (other.isSetFirstName()) {
      this.firstName = other.firstName;
    }
    if (other.isSetPhotoUrl()) {
      this.photoUrl = other.photoUrl;
    }
    if (other.isSetThirdParty()) {
      this.thirdParty = other.thirdParty;
    }
  }

  public FriendInfo deepCopy() {
    return new FriendInfo(this);
  }

  @Override
  public void clear() {
    setUserIdIsSet(false);
    this.userId = 0;
    this.userName = null;
    this.sex = null;
    setRatingNumbersIsSet(false);
    this.ratingNumbers = 0;
    setIsFollowingIsSet(false);
    this.isFollowing = false;
    setIsFollowedIsSet(false);
    this.isFollowed = false;
    this.lastName = null;
    this.firstName = null;
    this.photoUrl = null;
    this.thirdParty = null;
  }

  public int getUserId() {
    return this.userId;
  }

  public FriendInfo setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public String getUserName() {
    return this.userName;
  }

  public FriendInfo setUserName(String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  public String getSex() {
    return this.sex;
  }

  public FriendInfo setSex(String sex) {
    this.sex = sex;
    return this;
  }

  public void unsetSex() {
    this.sex = null;
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return this.sex != null;
  }

  public void setSexIsSet(boolean value) {
    if (!value) {
      this.sex = null;
    }
  }

  public int getRatingNumbers() {
    return this.ratingNumbers;
  }

  public FriendInfo setRatingNumbers(int ratingNumbers) {
    this.ratingNumbers = ratingNumbers;
    setRatingNumbersIsSet(true);
    return this;
  }

  public void unsetRatingNumbers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RATINGNUMBERS_ISSET_ID);
  }

  /** Returns true if field ratingNumbers is set (has been assigned a value) and false otherwise */
  public boolean isSetRatingNumbers() {
    return EncodingUtils.testBit(__isset_bitfield, __RATINGNUMBERS_ISSET_ID);
  }

  public void setRatingNumbersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RATINGNUMBERS_ISSET_ID, value);
  }

  public boolean isIsFollowing() {
    return this.isFollowing;
  }

  public FriendInfo setIsFollowing(boolean isFollowing) {
    this.isFollowing = isFollowing;
    setIsFollowingIsSet(true);
    return this;
  }

  public void unsetIsFollowing() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFOLLOWING_ISSET_ID);
  }

  /** Returns true if field isFollowing is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFollowing() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFOLLOWING_ISSET_ID);
  }

  public void setIsFollowingIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFOLLOWING_ISSET_ID, value);
  }

  public boolean isIsFollowed() {
    return this.isFollowed;
  }

  public FriendInfo setIsFollowed(boolean isFollowed) {
    this.isFollowed = isFollowed;
    setIsFollowedIsSet(true);
    return this;
  }

  public void unsetIsFollowed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFOLLOWED_ISSET_ID);
  }

  /** Returns true if field isFollowed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFollowed() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFOLLOWED_ISSET_ID);
  }

  public void setIsFollowedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFOLLOWED_ISSET_ID, value);
  }

  public String getLastName() {
    return this.lastName;
  }

  public FriendInfo setLastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  public void unsetLastName() {
    this.lastName = null;
  }

  /** Returns true if field lastName is set (has been assigned a value) and false otherwise */
  public boolean isSetLastName() {
    return this.lastName != null;
  }

  public void setLastNameIsSet(boolean value) {
    if (!value) {
      this.lastName = null;
    }
  }

  public String getFirstName() {
    return this.firstName;
  }

  public FriendInfo setFirstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  public void unsetFirstName() {
    this.firstName = null;
  }

  /** Returns true if field firstName is set (has been assigned a value) and false otherwise */
  public boolean isSetFirstName() {
    return this.firstName != null;
  }

  public void setFirstNameIsSet(boolean value) {
    if (!value) {
      this.firstName = null;
    }
  }

  public String getPhotoUrl() {
    return this.photoUrl;
  }

  public FriendInfo setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  public void unsetPhotoUrl() {
    this.photoUrl = null;
  }

  /** Returns true if field photoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPhotoUrl() {
    return this.photoUrl != null;
  }

  public void setPhotoUrlIsSet(boolean value) {
    if (!value) {
      this.photoUrl = null;
    }
  }

  /**
   * 
   * @see ThirdParty
   */
  public ThirdParty getThirdParty() {
    return this.thirdParty;
  }

  /**
   * 
   * @see ThirdParty
   */
  public FriendInfo setThirdParty(ThirdParty thirdParty) {
    this.thirdParty = thirdParty;
    return this;
  }

  public void unsetThirdParty() {
    this.thirdParty = null;
  }

  /** Returns true if field thirdParty is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdParty() {
    return this.thirdParty != null;
  }

  public void setThirdPartyIsSet(boolean value) {
    if (!value) {
      this.thirdParty = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((String)value);
      }
      break;

    case RATING_NUMBERS:
      if (value == null) {
        unsetRatingNumbers();
      } else {
        setRatingNumbers((Integer)value);
      }
      break;

    case IS_FOLLOWING:
      if (value == null) {
        unsetIsFollowing();
      } else {
        setIsFollowing((Boolean)value);
      }
      break;

    case IS_FOLLOWED:
      if (value == null) {
        unsetIsFollowed();
      } else {
        setIsFollowed((Boolean)value);
      }
      break;

    case LAST_NAME:
      if (value == null) {
        unsetLastName();
      } else {
        setLastName((String)value);
      }
      break;

    case FIRST_NAME:
      if (value == null) {
        unsetFirstName();
      } else {
        setFirstName((String)value);
      }
      break;

    case PHOTO_URL:
      if (value == null) {
        unsetPhotoUrl();
      } else {
        setPhotoUrl((String)value);
      }
      break;

    case THIRD_PARTY:
      if (value == null) {
        unsetThirdParty();
      } else {
        setThirdParty((ThirdParty)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case USER_NAME:
      return getUserName();

    case SEX:
      return getSex();

    case RATING_NUMBERS:
      return getRatingNumbers();

    case IS_FOLLOWING:
      return isIsFollowing();

    case IS_FOLLOWED:
      return isIsFollowed();

    case LAST_NAME:
      return getLastName();

    case FIRST_NAME:
      return getFirstName();

    case PHOTO_URL:
      return getPhotoUrl();

    case THIRD_PARTY:
      return getThirdParty();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case USER_NAME:
      return isSetUserName();
    case SEX:
      return isSetSex();
    case RATING_NUMBERS:
      return isSetRatingNumbers();
    case IS_FOLLOWING:
      return isSetIsFollowing();
    case IS_FOLLOWED:
      return isSetIsFollowed();
    case LAST_NAME:
      return isSetLastName();
    case FIRST_NAME:
      return isSetFirstName();
    case PHOTO_URL:
      return isSetPhotoUrl();
    case THIRD_PARTY:
      return isSetThirdParty();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FriendInfo)
      return this.equals((FriendInfo)that);
    return false;
  }

  public boolean equals(FriendInfo that) {
    if (that == null)
      return false;

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (!this.sex.equals(that.sex))
        return false;
    }

    boolean this_present_ratingNumbers = true;
    boolean that_present_ratingNumbers = true;
    if (this_present_ratingNumbers || that_present_ratingNumbers) {
      if (!(this_present_ratingNumbers && that_present_ratingNumbers))
        return false;
      if (this.ratingNumbers != that.ratingNumbers)
        return false;
    }

    boolean this_present_isFollowing = true;
    boolean that_present_isFollowing = true;
    if (this_present_isFollowing || that_present_isFollowing) {
      if (!(this_present_isFollowing && that_present_isFollowing))
        return false;
      if (this.isFollowing != that.isFollowing)
        return false;
    }

    boolean this_present_isFollowed = true;
    boolean that_present_isFollowed = true;
    if (this_present_isFollowed || that_present_isFollowed) {
      if (!(this_present_isFollowed && that_present_isFollowed))
        return false;
      if (this.isFollowed != that.isFollowed)
        return false;
    }

    boolean this_present_lastName = true && this.isSetLastName();
    boolean that_present_lastName = true && that.isSetLastName();
    if (this_present_lastName || that_present_lastName) {
      if (!(this_present_lastName && that_present_lastName))
        return false;
      if (!this.lastName.equals(that.lastName))
        return false;
    }

    boolean this_present_firstName = true && this.isSetFirstName();
    boolean that_present_firstName = true && that.isSetFirstName();
    if (this_present_firstName || that_present_firstName) {
      if (!(this_present_firstName && that_present_firstName))
        return false;
      if (!this.firstName.equals(that.firstName))
        return false;
    }

    boolean this_present_photoUrl = true && this.isSetPhotoUrl();
    boolean that_present_photoUrl = true && that.isSetPhotoUrl();
    if (this_present_photoUrl || that_present_photoUrl) {
      if (!(this_present_photoUrl && that_present_photoUrl))
        return false;
      if (!this.photoUrl.equals(that.photoUrl))
        return false;
    }

    boolean this_present_thirdParty = true && this.isSetThirdParty();
    boolean that_present_thirdParty = true && that.isSetThirdParty();
    if (this_present_thirdParty || that_present_thirdParty) {
      if (!(this_present_thirdParty && that_present_thirdParty))
        return false;
      if (!this.thirdParty.equals(that.thirdParty))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_userName = true && (isSetUserName());
    list.add(present_userName);
    if (present_userName)
      list.add(userName);

    boolean present_sex = true && (isSetSex());
    list.add(present_sex);
    if (present_sex)
      list.add(sex);

    boolean present_ratingNumbers = true;
    list.add(present_ratingNumbers);
    if (present_ratingNumbers)
      list.add(ratingNumbers);

    boolean present_isFollowing = true;
    list.add(present_isFollowing);
    if (present_isFollowing)
      list.add(isFollowing);

    boolean present_isFollowed = true;
    list.add(present_isFollowed);
    if (present_isFollowed)
      list.add(isFollowed);

    boolean present_lastName = true && (isSetLastName());
    list.add(present_lastName);
    if (present_lastName)
      list.add(lastName);

    boolean present_firstName = true && (isSetFirstName());
    list.add(present_firstName);
    if (present_firstName)
      list.add(firstName);

    boolean present_photoUrl = true && (isSetPhotoUrl());
    list.add(present_photoUrl);
    if (present_photoUrl)
      list.add(photoUrl);

    boolean present_thirdParty = true && (isSetThirdParty());
    list.add(present_thirdParty);
    if (present_thirdParty)
      list.add(thirdParty.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(FriendInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRatingNumbers()).compareTo(other.isSetRatingNumbers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRatingNumbers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ratingNumbers, other.ratingNumbers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFollowing()).compareTo(other.isSetIsFollowing());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFollowing()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFollowing, other.isFollowing);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFollowed()).compareTo(other.isSetIsFollowed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFollowed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFollowed, other.isFollowed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastName()).compareTo(other.isSetLastName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastName, other.lastName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFirstName()).compareTo(other.isSetFirstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFirstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstName, other.firstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhotoUrl()).compareTo(other.isSetPhotoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhotoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.photoUrl, other.photoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdParty()).compareTo(other.isSetThirdParty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdParty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdParty, other.thirdParty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FriendInfo(");
    boolean first = true;

    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    if (this.sex == null) {
      sb.append("null");
    } else {
      sb.append(this.sex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ratingNumbers:");
    sb.append(this.ratingNumbers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFollowing:");
    sb.append(this.isFollowing);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFollowed:");
    sb.append(this.isFollowed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastName:");
    if (this.lastName == null) {
      sb.append("null");
    } else {
      sb.append(this.lastName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("firstName:");
    if (this.firstName == null) {
      sb.append("null");
    } else {
      sb.append(this.firstName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("photoUrl:");
    if (this.photoUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.photoUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdParty:");
    if (this.thirdParty == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdParty);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FriendInfoStandardSchemeFactory implements SchemeFactory {
    public FriendInfoStandardScheme getScheme() {
      return new FriendInfoStandardScheme();
    }
  }

  private static class FriendInfoStandardScheme extends StandardScheme<FriendInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FriendInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sex = iprot.readString();
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RATING_NUMBERS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ratingNumbers = iprot.readI32();
              struct.setRatingNumbersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_FOLLOWING
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFollowing = iprot.readBool();
              struct.setIsFollowingIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IS_FOLLOWED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFollowed = iprot.readBool();
              struct.setIsFollowedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // LAST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastName = iprot.readString();
              struct.setLastNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.firstName = iprot.readString();
              struct.setFirstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PHOTO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.photoUrl = iprot.readString();
              struct.setPhotoUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // THIRD_PARTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.thirdParty = co.tagtalk.winemate.thriftfiles.ThirdParty.findByValue(iprot.readI32());
              struct.setThirdPartyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FriendInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.sex != null) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeString(struct.sex);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RATING_NUMBERS_FIELD_DESC);
      oprot.writeI32(struct.ratingNumbers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FOLLOWING_FIELD_DESC);
      oprot.writeBool(struct.isFollowing);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FOLLOWED_FIELD_DESC);
      oprot.writeBool(struct.isFollowed);
      oprot.writeFieldEnd();
      if (struct.lastName != null) {
        oprot.writeFieldBegin(LAST_NAME_FIELD_DESC);
        oprot.writeString(struct.lastName);
        oprot.writeFieldEnd();
      }
      if (struct.firstName != null) {
        oprot.writeFieldBegin(FIRST_NAME_FIELD_DESC);
        oprot.writeString(struct.firstName);
        oprot.writeFieldEnd();
      }
      if (struct.photoUrl != null) {
        oprot.writeFieldBegin(PHOTO_URL_FIELD_DESC);
        oprot.writeString(struct.photoUrl);
        oprot.writeFieldEnd();
      }
      if (struct.thirdParty != null) {
        oprot.writeFieldBegin(THIRD_PARTY_FIELD_DESC);
        oprot.writeI32(struct.thirdParty.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FriendInfoTupleSchemeFactory implements SchemeFactory {
    public FriendInfoTupleScheme getScheme() {
      return new FriendInfoTupleScheme();
    }
  }

  private static class FriendInfoTupleScheme extends TupleScheme<FriendInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FriendInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUserId()) {
        optionals.set(0);
      }
      if (struct.isSetUserName()) {
        optionals.set(1);
      }
      if (struct.isSetSex()) {
        optionals.set(2);
      }
      if (struct.isSetRatingNumbers()) {
        optionals.set(3);
      }
      if (struct.isSetIsFollowing()) {
        optionals.set(4);
      }
      if (struct.isSetIsFollowed()) {
        optionals.set(5);
      }
      if (struct.isSetLastName()) {
        optionals.set(6);
      }
      if (struct.isSetFirstName()) {
        optionals.set(7);
      }
      if (struct.isSetPhotoUrl()) {
        optionals.set(8);
      }
      if (struct.isSetThirdParty()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetSex()) {
        oprot.writeString(struct.sex);
      }
      if (struct.isSetRatingNumbers()) {
        oprot.writeI32(struct.ratingNumbers);
      }
      if (struct.isSetIsFollowing()) {
        oprot.writeBool(struct.isFollowing);
      }
      if (struct.isSetIsFollowed()) {
        oprot.writeBool(struct.isFollowed);
      }
      if (struct.isSetLastName()) {
        oprot.writeString(struct.lastName);
      }
      if (struct.isSetFirstName()) {
        oprot.writeString(struct.firstName);
      }
      if (struct.isSetPhotoUrl()) {
        oprot.writeString(struct.photoUrl);
      }
      if (struct.isSetThirdParty()) {
        oprot.writeI32(struct.thirdParty.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FriendInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sex = iprot.readString();
        struct.setSexIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ratingNumbers = iprot.readI32();
        struct.setRatingNumbersIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isFollowing = iprot.readBool();
        struct.setIsFollowingIsSet(true);
      }
      if (incoming.get(5)) {
        struct.isFollowed = iprot.readBool();
        struct.setIsFollowedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.lastName = iprot.readString();
        struct.setLastNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.firstName = iprot.readString();
        struct.setFirstNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.photoUrl = iprot.readString();
        struct.setPhotoUrlIsSet(true);
      }
      if (incoming.get(9)) {
        struct.thirdParty = co.tagtalk.winemate.thriftfiles.ThirdParty.findByValue(iprot.readI32());
        struct.setThirdPartyIsSet(true);
      }
    }
  }

}

