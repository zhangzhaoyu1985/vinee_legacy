/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package co.tagtalk.winemate.thriftfiles;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-24")
public class WechatLoginInfo implements org.apache.thrift.TBase<WechatLoginInfo, WechatLoginInfo._Fields>, java.io.Serializable, Cloneable, Comparable<WechatLoginInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WechatLoginInfo");

  private static final org.apache.thrift.protocol.TField OPEN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("openId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField UNION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("unionId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ORIGIN_JSON_FROM_WECHAT_FIELD_DESC = new org.apache.thrift.protocol.TField("originJsonFromWechat", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ACCESS_TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("accessToken", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WechatLoginInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WechatLoginInfoTupleSchemeFactory());
  }

  public String openId; // required
  public String unionId; // required
  public String originJsonFromWechat; // required
  public String accessToken; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OPEN_ID((short)1, "openId"),
    UNION_ID((short)2, "unionId"),
    ORIGIN_JSON_FROM_WECHAT((short)3, "originJsonFromWechat"),
    ACCESS_TOKEN((short)4, "accessToken");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OPEN_ID
          return OPEN_ID;
        case 2: // UNION_ID
          return UNION_ID;
        case 3: // ORIGIN_JSON_FROM_WECHAT
          return ORIGIN_JSON_FROM_WECHAT;
        case 4: // ACCESS_TOKEN
          return ACCESS_TOKEN;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OPEN_ID, new org.apache.thrift.meta_data.FieldMetaData("openId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.UNION_ID, new org.apache.thrift.meta_data.FieldMetaData("unionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGIN_JSON_FROM_WECHAT, new org.apache.thrift.meta_data.FieldMetaData("originJsonFromWechat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ACCESS_TOKEN, new org.apache.thrift.meta_data.FieldMetaData("accessToken", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WechatLoginInfo.class, metaDataMap);
  }

  public WechatLoginInfo() {
  }

  public WechatLoginInfo(
    String openId,
    String unionId,
    String originJsonFromWechat,
    String accessToken)
  {
    this();
    this.openId = openId;
    this.unionId = unionId;
    this.originJsonFromWechat = originJsonFromWechat;
    this.accessToken = accessToken;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WechatLoginInfo(WechatLoginInfo other) {
    if (other.isSetOpenId()) {
      this.openId = other.openId;
    }
    if (other.isSetUnionId()) {
      this.unionId = other.unionId;
    }
    if (other.isSetOriginJsonFromWechat()) {
      this.originJsonFromWechat = other.originJsonFromWechat;
    }
    if (other.isSetAccessToken()) {
      this.accessToken = other.accessToken;
    }
  }

  public WechatLoginInfo deepCopy() {
    return new WechatLoginInfo(this);
  }

  @Override
  public void clear() {
    this.openId = null;
    this.unionId = null;
    this.originJsonFromWechat = null;
    this.accessToken = null;
  }

  public String getOpenId() {
    return this.openId;
  }

  public WechatLoginInfo setOpenId(String openId) {
    this.openId = openId;
    return this;
  }

  public void unsetOpenId() {
    this.openId = null;
  }

  /** Returns true if field openId is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenId() {
    return this.openId != null;
  }

  public void setOpenIdIsSet(boolean value) {
    if (!value) {
      this.openId = null;
    }
  }

  public String getUnionId() {
    return this.unionId;
  }

  public WechatLoginInfo setUnionId(String unionId) {
    this.unionId = unionId;
    return this;
  }

  public void unsetUnionId() {
    this.unionId = null;
  }

  /** Returns true if field unionId is set (has been assigned a value) and false otherwise */
  public boolean isSetUnionId() {
    return this.unionId != null;
  }

  public void setUnionIdIsSet(boolean value) {
    if (!value) {
      this.unionId = null;
    }
  }

  public String getOriginJsonFromWechat() {
    return this.originJsonFromWechat;
  }

  public WechatLoginInfo setOriginJsonFromWechat(String originJsonFromWechat) {
    this.originJsonFromWechat = originJsonFromWechat;
    return this;
  }

  public void unsetOriginJsonFromWechat() {
    this.originJsonFromWechat = null;
  }

  /** Returns true if field originJsonFromWechat is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginJsonFromWechat() {
    return this.originJsonFromWechat != null;
  }

  public void setOriginJsonFromWechatIsSet(boolean value) {
    if (!value) {
      this.originJsonFromWechat = null;
    }
  }

  public String getAccessToken() {
    return this.accessToken;
  }

  public WechatLoginInfo setAccessToken(String accessToken) {
    this.accessToken = accessToken;
    return this;
  }

  public void unsetAccessToken() {
    this.accessToken = null;
  }

  /** Returns true if field accessToken is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessToken() {
    return this.accessToken != null;
  }

  public void setAccessTokenIsSet(boolean value) {
    if (!value) {
      this.accessToken = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OPEN_ID:
      if (value == null) {
        unsetOpenId();
      } else {
        setOpenId((String)value);
      }
      break;

    case UNION_ID:
      if (value == null) {
        unsetUnionId();
      } else {
        setUnionId((String)value);
      }
      break;

    case ORIGIN_JSON_FROM_WECHAT:
      if (value == null) {
        unsetOriginJsonFromWechat();
      } else {
        setOriginJsonFromWechat((String)value);
      }
      break;

    case ACCESS_TOKEN:
      if (value == null) {
        unsetAccessToken();
      } else {
        setAccessToken((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OPEN_ID:
      return getOpenId();

    case UNION_ID:
      return getUnionId();

    case ORIGIN_JSON_FROM_WECHAT:
      return getOriginJsonFromWechat();

    case ACCESS_TOKEN:
      return getAccessToken();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OPEN_ID:
      return isSetOpenId();
    case UNION_ID:
      return isSetUnionId();
    case ORIGIN_JSON_FROM_WECHAT:
      return isSetOriginJsonFromWechat();
    case ACCESS_TOKEN:
      return isSetAccessToken();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WechatLoginInfo)
      return this.equals((WechatLoginInfo)that);
    return false;
  }

  public boolean equals(WechatLoginInfo that) {
    if (that == null)
      return false;

    boolean this_present_openId = true && this.isSetOpenId();
    boolean that_present_openId = true && that.isSetOpenId();
    if (this_present_openId || that_present_openId) {
      if (!(this_present_openId && that_present_openId))
        return false;
      if (!this.openId.equals(that.openId))
        return false;
    }

    boolean this_present_unionId = true && this.isSetUnionId();
    boolean that_present_unionId = true && that.isSetUnionId();
    if (this_present_unionId || that_present_unionId) {
      if (!(this_present_unionId && that_present_unionId))
        return false;
      if (!this.unionId.equals(that.unionId))
        return false;
    }

    boolean this_present_originJsonFromWechat = true && this.isSetOriginJsonFromWechat();
    boolean that_present_originJsonFromWechat = true && that.isSetOriginJsonFromWechat();
    if (this_present_originJsonFromWechat || that_present_originJsonFromWechat) {
      if (!(this_present_originJsonFromWechat && that_present_originJsonFromWechat))
        return false;
      if (!this.originJsonFromWechat.equals(that.originJsonFromWechat))
        return false;
    }

    boolean this_present_accessToken = true && this.isSetAccessToken();
    boolean that_present_accessToken = true && that.isSetAccessToken();
    if (this_present_accessToken || that_present_accessToken) {
      if (!(this_present_accessToken && that_present_accessToken))
        return false;
      if (!this.accessToken.equals(that.accessToken))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_openId = true && (isSetOpenId());
    list.add(present_openId);
    if (present_openId)
      list.add(openId);

    boolean present_unionId = true && (isSetUnionId());
    list.add(present_unionId);
    if (present_unionId)
      list.add(unionId);

    boolean present_originJsonFromWechat = true && (isSetOriginJsonFromWechat());
    list.add(present_originJsonFromWechat);
    if (present_originJsonFromWechat)
      list.add(originJsonFromWechat);

    boolean present_accessToken = true && (isSetAccessToken());
    list.add(present_accessToken);
    if (present_accessToken)
      list.add(accessToken);

    return list.hashCode();
  }

  @Override
  public int compareTo(WechatLoginInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOpenId()).compareTo(other.isSetOpenId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openId, other.openId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUnionId()).compareTo(other.isSetUnionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUnionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unionId, other.unionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOriginJsonFromWechat()).compareTo(other.isSetOriginJsonFromWechat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginJsonFromWechat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originJsonFromWechat, other.originJsonFromWechat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAccessToken()).compareTo(other.isSetAccessToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessToken, other.accessToken);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WechatLoginInfo(");
    boolean first = true;

    sb.append("openId:");
    if (this.openId == null) {
      sb.append("null");
    } else {
      sb.append(this.openId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("unionId:");
    if (this.unionId == null) {
      sb.append("null");
    } else {
      sb.append(this.unionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("originJsonFromWechat:");
    if (this.originJsonFromWechat == null) {
      sb.append("null");
    } else {
      sb.append(this.originJsonFromWechat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("accessToken:");
    if (this.accessToken == null) {
      sb.append("null");
    } else {
      sb.append(this.accessToken);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WechatLoginInfoStandardSchemeFactory implements SchemeFactory {
    public WechatLoginInfoStandardScheme getScheme() {
      return new WechatLoginInfoStandardScheme();
    }
  }

  private static class WechatLoginInfoStandardScheme extends StandardScheme<WechatLoginInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WechatLoginInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OPEN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openId = iprot.readString();
              struct.setOpenIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // UNION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.unionId = iprot.readString();
              struct.setUnionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ORIGIN_JSON_FROM_WECHAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.originJsonFromWechat = iprot.readString();
              struct.setOriginJsonFromWechatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACCESS_TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessToken = iprot.readString();
              struct.setAccessTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WechatLoginInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.openId != null) {
        oprot.writeFieldBegin(OPEN_ID_FIELD_DESC);
        oprot.writeString(struct.openId);
        oprot.writeFieldEnd();
      }
      if (struct.unionId != null) {
        oprot.writeFieldBegin(UNION_ID_FIELD_DESC);
        oprot.writeString(struct.unionId);
        oprot.writeFieldEnd();
      }
      if (struct.originJsonFromWechat != null) {
        oprot.writeFieldBegin(ORIGIN_JSON_FROM_WECHAT_FIELD_DESC);
        oprot.writeString(struct.originJsonFromWechat);
        oprot.writeFieldEnd();
      }
      if (struct.accessToken != null) {
        oprot.writeFieldBegin(ACCESS_TOKEN_FIELD_DESC);
        oprot.writeString(struct.accessToken);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WechatLoginInfoTupleSchemeFactory implements SchemeFactory {
    public WechatLoginInfoTupleScheme getScheme() {
      return new WechatLoginInfoTupleScheme();
    }
  }

  private static class WechatLoginInfoTupleScheme extends TupleScheme<WechatLoginInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WechatLoginInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOpenId()) {
        optionals.set(0);
      }
      if (struct.isSetUnionId()) {
        optionals.set(1);
      }
      if (struct.isSetOriginJsonFromWechat()) {
        optionals.set(2);
      }
      if (struct.isSetAccessToken()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetOpenId()) {
        oprot.writeString(struct.openId);
      }
      if (struct.isSetUnionId()) {
        oprot.writeString(struct.unionId);
      }
      if (struct.isSetOriginJsonFromWechat()) {
        oprot.writeString(struct.originJsonFromWechat);
      }
      if (struct.isSetAccessToken()) {
        oprot.writeString(struct.accessToken);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WechatLoginInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.openId = iprot.readString();
        struct.setOpenIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.unionId = iprot.readString();
        struct.setUnionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.originJsonFromWechat = iprot.readString();
        struct.setOriginJsonFromWechatIsSet(true);
      }
      if (incoming.get(3)) {
        struct.accessToken = iprot.readString();
        struct.setAccessTokenIsSet(true);
      }
    }
  }

}

