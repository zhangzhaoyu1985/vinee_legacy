/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package co.tagtalk.winemate.thriftfiles;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-24")
public class TagInfo implements org.apache.thrift.TBase<TagInfo, TagInfo._Fields>, java.io.Serializable, Cloneable, Comparable<TagInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TagInfo");

  private static final org.apache.thrift.protocol.TField TAG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tagID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SECRET_NUMBER_FIELD_DESC = new org.apache.thrift.protocol.TField("secretNumber", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField COUNTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("countryId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("city", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DETAILED_LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField("detailedLocation", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TagInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TagInfoTupleSchemeFactory());
  }

  public String tagID; // required
  public String secretNumber; // required
  public CountryId countryId; // required
  public String date; // required
  public String time; // required
  public String city; // required
  public String detailedLocation; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TAG_ID((short)1, "tagID"),
    SECRET_NUMBER((short)2, "secretNumber"),
    COUNTRY_ID((short)3, "countryId"),
    DATE((short)4, "date"),
    TIME((short)5, "time"),
    CITY((short)6, "city"),
    DETAILED_LOCATION((short)7, "detailedLocation");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TAG_ID
          return TAG_ID;
        case 2: // SECRET_NUMBER
          return SECRET_NUMBER;
        case 3: // COUNTRY_ID
          return COUNTRY_ID;
        case 4: // DATE
          return DATE;
        case 5: // TIME
          return TIME;
        case 6: // CITY
          return CITY;
        case 7: // DETAILED_LOCATION
          return DETAILED_LOCATION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TAG_ID, new org.apache.thrift.meta_data.FieldMetaData("tagID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECRET_NUMBER, new org.apache.thrift.meta_data.FieldMetaData("secretNumber", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.COUNTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("countryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.ENUM        , "CountryId")));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DETAILED_LOCATION, new org.apache.thrift.meta_data.FieldMetaData("detailedLocation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TagInfo.class, metaDataMap);
  }

  public TagInfo() {
  }

  public TagInfo(
    String tagID,
    String secretNumber,
    CountryId countryId,
    String date,
    String time,
    String city,
    String detailedLocation)
  {
    this();
    this.tagID = tagID;
    this.secretNumber = secretNumber;
    this.countryId = countryId;
    this.date = date;
    this.time = time;
    this.city = city;
    this.detailedLocation = detailedLocation;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TagInfo(TagInfo other) {
    if (other.isSetTagID()) {
      this.tagID = other.tagID;
    }
    if (other.isSetSecretNumber()) {
      this.secretNumber = other.secretNumber;
    }
    if (other.isSetCountryId()) {
      this.countryId = other.countryId;
    }
    if (other.isSetDate()) {
      this.date = other.date;
    }
    if (other.isSetTime()) {
      this.time = other.time;
    }
    if (other.isSetCity()) {
      this.city = other.city;
    }
    if (other.isSetDetailedLocation()) {
      this.detailedLocation = other.detailedLocation;
    }
  }

  public TagInfo deepCopy() {
    return new TagInfo(this);
  }

  @Override
  public void clear() {
    this.tagID = null;
    this.secretNumber = null;
    this.countryId = null;
    this.date = null;
    this.time = null;
    this.city = null;
    this.detailedLocation = null;
  }

  public String getTagID() {
    return this.tagID;
  }

  public TagInfo setTagID(String tagID) {
    this.tagID = tagID;
    return this;
  }

  public void unsetTagID() {
    this.tagID = null;
  }

  /** Returns true if field tagID is set (has been assigned a value) and false otherwise */
  public boolean isSetTagID() {
    return this.tagID != null;
  }

  public void setTagIDIsSet(boolean value) {
    if (!value) {
      this.tagID = null;
    }
  }

  public String getSecretNumber() {
    return this.secretNumber;
  }

  public TagInfo setSecretNumber(String secretNumber) {
    this.secretNumber = secretNumber;
    return this;
  }

  public void unsetSecretNumber() {
    this.secretNumber = null;
  }

  /** Returns true if field secretNumber is set (has been assigned a value) and false otherwise */
  public boolean isSetSecretNumber() {
    return this.secretNumber != null;
  }

  public void setSecretNumberIsSet(boolean value) {
    if (!value) {
      this.secretNumber = null;
    }
  }

  public CountryId getCountryId() {
    return this.countryId;
  }

  public TagInfo setCountryId(CountryId countryId) {
    this.countryId = countryId;
    return this;
  }

  public void unsetCountryId() {
    this.countryId = null;
  }

  /** Returns true if field countryId is set (has been assigned a value) and false otherwise */
  public boolean isSetCountryId() {
    return this.countryId != null;
  }

  public void setCountryIdIsSet(boolean value) {
    if (!value) {
      this.countryId = null;
    }
  }

  public String getDate() {
    return this.date;
  }

  public TagInfo setDate(String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public String getTime() {
    return this.time;
  }

  public TagInfo setTime(String time) {
    this.time = time;
    return this;
  }

  public void unsetTime() {
    this.time = null;
  }

  /** Returns true if field time is set (has been assigned a value) and false otherwise */
  public boolean isSetTime() {
    return this.time != null;
  }

  public void setTimeIsSet(boolean value) {
    if (!value) {
      this.time = null;
    }
  }

  public String getCity() {
    return this.city;
  }

  public TagInfo setCity(String city) {
    this.city = city;
    return this;
  }

  public void unsetCity() {
    this.city = null;
  }

  /** Returns true if field city is set (has been assigned a value) and false otherwise */
  public boolean isSetCity() {
    return this.city != null;
  }

  public void setCityIsSet(boolean value) {
    if (!value) {
      this.city = null;
    }
  }

  public String getDetailedLocation() {
    return this.detailedLocation;
  }

  public TagInfo setDetailedLocation(String detailedLocation) {
    this.detailedLocation = detailedLocation;
    return this;
  }

  public void unsetDetailedLocation() {
    this.detailedLocation = null;
  }

  /** Returns true if field detailedLocation is set (has been assigned a value) and false otherwise */
  public boolean isSetDetailedLocation() {
    return this.detailedLocation != null;
  }

  public void setDetailedLocationIsSet(boolean value) {
    if (!value) {
      this.detailedLocation = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TAG_ID:
      if (value == null) {
        unsetTagID();
      } else {
        setTagID((String)value);
      }
      break;

    case SECRET_NUMBER:
      if (value == null) {
        unsetSecretNumber();
      } else {
        setSecretNumber((String)value);
      }
      break;

    case COUNTRY_ID:
      if (value == null) {
        unsetCountryId();
      } else {
        setCountryId((CountryId)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case TIME:
      if (value == null) {
        unsetTime();
      } else {
        setTime((String)value);
      }
      break;

    case CITY:
      if (value == null) {
        unsetCity();
      } else {
        setCity((String)value);
      }
      break;

    case DETAILED_LOCATION:
      if (value == null) {
        unsetDetailedLocation();
      } else {
        setDetailedLocation((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TAG_ID:
      return getTagID();

    case SECRET_NUMBER:
      return getSecretNumber();

    case COUNTRY_ID:
      return getCountryId();

    case DATE:
      return getDate();

    case TIME:
      return getTime();

    case CITY:
      return getCity();

    case DETAILED_LOCATION:
      return getDetailedLocation();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TAG_ID:
      return isSetTagID();
    case SECRET_NUMBER:
      return isSetSecretNumber();
    case COUNTRY_ID:
      return isSetCountryId();
    case DATE:
      return isSetDate();
    case TIME:
      return isSetTime();
    case CITY:
      return isSetCity();
    case DETAILED_LOCATION:
      return isSetDetailedLocation();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TagInfo)
      return this.equals((TagInfo)that);
    return false;
  }

  public boolean equals(TagInfo that) {
    if (that == null)
      return false;

    boolean this_present_tagID = true && this.isSetTagID();
    boolean that_present_tagID = true && that.isSetTagID();
    if (this_present_tagID || that_present_tagID) {
      if (!(this_present_tagID && that_present_tagID))
        return false;
      if (!this.tagID.equals(that.tagID))
        return false;
    }

    boolean this_present_secretNumber = true && this.isSetSecretNumber();
    boolean that_present_secretNumber = true && that.isSetSecretNumber();
    if (this_present_secretNumber || that_present_secretNumber) {
      if (!(this_present_secretNumber && that_present_secretNumber))
        return false;
      if (!this.secretNumber.equals(that.secretNumber))
        return false;
    }

    boolean this_present_countryId = true && this.isSetCountryId();
    boolean that_present_countryId = true && that.isSetCountryId();
    if (this_present_countryId || that_present_countryId) {
      if (!(this_present_countryId && that_present_countryId))
        return false;
      if (!this.countryId.equals(that.countryId))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_time = true && this.isSetTime();
    boolean that_present_time = true && that.isSetTime();
    if (this_present_time || that_present_time) {
      if (!(this_present_time && that_present_time))
        return false;
      if (!this.time.equals(that.time))
        return false;
    }

    boolean this_present_city = true && this.isSetCity();
    boolean that_present_city = true && that.isSetCity();
    if (this_present_city || that_present_city) {
      if (!(this_present_city && that_present_city))
        return false;
      if (!this.city.equals(that.city))
        return false;
    }

    boolean this_present_detailedLocation = true && this.isSetDetailedLocation();
    boolean that_present_detailedLocation = true && that.isSetDetailedLocation();
    if (this_present_detailedLocation || that_present_detailedLocation) {
      if (!(this_present_detailedLocation && that_present_detailedLocation))
        return false;
      if (!this.detailedLocation.equals(that.detailedLocation))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_tagID = true && (isSetTagID());
    list.add(present_tagID);
    if (present_tagID)
      list.add(tagID);

    boolean present_secretNumber = true && (isSetSecretNumber());
    list.add(present_secretNumber);
    if (present_secretNumber)
      list.add(secretNumber);

    boolean present_countryId = true && (isSetCountryId());
    list.add(present_countryId);
    if (present_countryId)
      list.add(countryId.getValue());

    boolean present_date = true && (isSetDate());
    list.add(present_date);
    if (present_date)
      list.add(date);

    boolean present_time = true && (isSetTime());
    list.add(present_time);
    if (present_time)
      list.add(time);

    boolean present_city = true && (isSetCity());
    list.add(present_city);
    if (present_city)
      list.add(city);

    boolean present_detailedLocation = true && (isSetDetailedLocation());
    list.add(present_detailedLocation);
    if (present_detailedLocation)
      list.add(detailedLocation);

    return list.hashCode();
  }

  @Override
  public int compareTo(TagInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTagID()).compareTo(other.isSetTagID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTagID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tagID, other.tagID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSecretNumber()).compareTo(other.isSetSecretNumber());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecretNumber()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secretNumber, other.secretNumber);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountryId()).compareTo(other.isSetCountryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countryId, other.countryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDetailedLocation()).compareTo(other.isSetDetailedLocation());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDetailedLocation()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.detailedLocation, other.detailedLocation);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TagInfo(");
    boolean first = true;

    sb.append("tagID:");
    if (this.tagID == null) {
      sb.append("null");
    } else {
      sb.append(this.tagID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secretNumber:");
    if (this.secretNumber == null) {
      sb.append("null");
    } else {
      sb.append(this.secretNumber);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("countryId:");
    if (this.countryId == null) {
      sb.append("null");
    } else {
      sb.append(this.countryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("time:");
    if (this.time == null) {
      sb.append("null");
    } else {
      sb.append(this.time);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("city:");
    if (this.city == null) {
      sb.append("null");
    } else {
      sb.append(this.city);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("detailedLocation:");
    if (this.detailedLocation == null) {
      sb.append("null");
    } else {
      sb.append(this.detailedLocation);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TagInfoStandardSchemeFactory implements SchemeFactory {
    public TagInfoStandardScheme getScheme() {
      return new TagInfoStandardScheme();
    }
  }

  private static class TagInfoStandardScheme extends StandardScheme<TagInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TagInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TAG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tagID = iprot.readString();
              struct.setTagIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SECRET_NUMBER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secretNumber = iprot.readString();
              struct.setSecretNumberIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // COUNTRY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.countryId = co.tagtalk.winemate.thriftfiles.CountryId.findByValue(iprot.readI32());
              struct.setCountryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.time = iprot.readString();
              struct.setTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.city = iprot.readString();
              struct.setCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DETAILED_LOCATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.detailedLocation = iprot.readString();
              struct.setDetailedLocationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TagInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.tagID != null) {
        oprot.writeFieldBegin(TAG_ID_FIELD_DESC);
        oprot.writeString(struct.tagID);
        oprot.writeFieldEnd();
      }
      if (struct.secretNumber != null) {
        oprot.writeFieldBegin(SECRET_NUMBER_FIELD_DESC);
        oprot.writeString(struct.secretNumber);
        oprot.writeFieldEnd();
      }
      if (struct.countryId != null) {
        oprot.writeFieldBegin(COUNTRY_ID_FIELD_DESC);
        oprot.writeI32(struct.countryId.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      if (struct.time != null) {
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeString(struct.time);
        oprot.writeFieldEnd();
      }
      if (struct.city != null) {
        oprot.writeFieldBegin(CITY_FIELD_DESC);
        oprot.writeString(struct.city);
        oprot.writeFieldEnd();
      }
      if (struct.detailedLocation != null) {
        oprot.writeFieldBegin(DETAILED_LOCATION_FIELD_DESC);
        oprot.writeString(struct.detailedLocation);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TagInfoTupleSchemeFactory implements SchemeFactory {
    public TagInfoTupleScheme getScheme() {
      return new TagInfoTupleScheme();
    }
  }

  private static class TagInfoTupleScheme extends TupleScheme<TagInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TagInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetTagID()) {
        optionals.set(0);
      }
      if (struct.isSetSecretNumber()) {
        optionals.set(1);
      }
      if (struct.isSetCountryId()) {
        optionals.set(2);
      }
      if (struct.isSetDate()) {
        optionals.set(3);
      }
      if (struct.isSetTime()) {
        optionals.set(4);
      }
      if (struct.isSetCity()) {
        optionals.set(5);
      }
      if (struct.isSetDetailedLocation()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetTagID()) {
        oprot.writeString(struct.tagID);
      }
      if (struct.isSetSecretNumber()) {
        oprot.writeString(struct.secretNumber);
      }
      if (struct.isSetCountryId()) {
        oprot.writeI32(struct.countryId.getValue());
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetTime()) {
        oprot.writeString(struct.time);
      }
      if (struct.isSetCity()) {
        oprot.writeString(struct.city);
      }
      if (struct.isSetDetailedLocation()) {
        oprot.writeString(struct.detailedLocation);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TagInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.tagID = iprot.readString();
        struct.setTagIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.secretNumber = iprot.readString();
        struct.setSecretNumberIsSet(true);
      }
      if (incoming.get(2)) {
        struct.countryId = co.tagtalk.winemate.thriftfiles.CountryId.findByValue(iprot.readI32());
        struct.setCountryIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.time = iprot.readString();
        struct.setTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.city = iprot.readString();
        struct.setCityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.detailedLocation = iprot.readString();
        struct.setDetailedLocationIsSet(true);
      }
    }
  }

}

