/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package co.tagtalk.winemate.thriftfiles;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-24")
public class BottleInfo implements org.apache.thrift.TBase<BottleInfo, BottleInfo._Fields>, java.io.Serializable, Cloneable, Comparable<BottleInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BottleInfo");

  private static final org.apache.thrift.protocol.TField WINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("wineId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField WINE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("wineName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REGION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("regionName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OPEN_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("openDate", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OPEN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("openTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OPEN_CITY_FIELD_DESC = new org.apache.thrift.protocol.TField("openCity", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField WINE_PIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("winePicUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField NATIONAL_FLAG_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("nationalFlagUrl", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MY_RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("myRate", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BottleInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BottleInfoTupleSchemeFactory());
  }

  public int wineId; // required
  public String wineName; // required
  public String regionName; // required
  public String openDate; // required
  public String openTime; // required
  public String openCity; // required
  public String winePicUrl; // required
  public String nationalFlagUrl; // required
  public double myRate; // required
  public String year; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    WINE_ID((short)1, "wineId"),
    WINE_NAME((short)2, "wineName"),
    REGION_NAME((short)3, "regionName"),
    OPEN_DATE((short)4, "openDate"),
    OPEN_TIME((short)5, "openTime"),
    OPEN_CITY((short)6, "openCity"),
    WINE_PIC_URL((short)7, "winePicUrl"),
    NATIONAL_FLAG_URL((short)8, "nationalFlagUrl"),
    MY_RATE((short)9, "myRate"),
    YEAR((short)10, "year");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // WINE_ID
          return WINE_ID;
        case 2: // WINE_NAME
          return WINE_NAME;
        case 3: // REGION_NAME
          return REGION_NAME;
        case 4: // OPEN_DATE
          return OPEN_DATE;
        case 5: // OPEN_TIME
          return OPEN_TIME;
        case 6: // OPEN_CITY
          return OPEN_CITY;
        case 7: // WINE_PIC_URL
          return WINE_PIC_URL;
        case 8: // NATIONAL_FLAG_URL
          return NATIONAL_FLAG_URL;
        case 9: // MY_RATE
          return MY_RATE;
        case 10: // YEAR
          return YEAR;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __WINEID_ISSET_ID = 0;
  private static final int __MYRATE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.WINE_ID, new org.apache.thrift.meta_data.FieldMetaData("wineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.WINE_NAME, new org.apache.thrift.meta_data.FieldMetaData("wineName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION_NAME, new org.apache.thrift.meta_data.FieldMetaData("regionName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN_DATE, new org.apache.thrift.meta_data.FieldMetaData("openDate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN_TIME, new org.apache.thrift.meta_data.FieldMetaData("openTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPEN_CITY, new org.apache.thrift.meta_data.FieldMetaData("openCity", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WINE_PIC_URL, new org.apache.thrift.meta_data.FieldMetaData("winePicUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NATIONAL_FLAG_URL, new org.apache.thrift.meta_data.FieldMetaData("nationalFlagUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MY_RATE, new org.apache.thrift.meta_data.FieldMetaData("myRate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BottleInfo.class, metaDataMap);
  }

  public BottleInfo() {
    this.myRate = (double)0;

  }

  public BottleInfo(
    int wineId,
    String wineName,
    String regionName,
    String openDate,
    String openTime,
    String openCity,
    String winePicUrl,
    String nationalFlagUrl,
    double myRate,
    String year)
  {
    this();
    this.wineId = wineId;
    setWineIdIsSet(true);
    this.wineName = wineName;
    this.regionName = regionName;
    this.openDate = openDate;
    this.openTime = openTime;
    this.openCity = openCity;
    this.winePicUrl = winePicUrl;
    this.nationalFlagUrl = nationalFlagUrl;
    this.myRate = myRate;
    setMyRateIsSet(true);
    this.year = year;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BottleInfo(BottleInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.wineId = other.wineId;
    if (other.isSetWineName()) {
      this.wineName = other.wineName;
    }
    if (other.isSetRegionName()) {
      this.regionName = other.regionName;
    }
    if (other.isSetOpenDate()) {
      this.openDate = other.openDate;
    }
    if (other.isSetOpenTime()) {
      this.openTime = other.openTime;
    }
    if (other.isSetOpenCity()) {
      this.openCity = other.openCity;
    }
    if (other.isSetWinePicUrl()) {
      this.winePicUrl = other.winePicUrl;
    }
    if (other.isSetNationalFlagUrl()) {
      this.nationalFlagUrl = other.nationalFlagUrl;
    }
    this.myRate = other.myRate;
    if (other.isSetYear()) {
      this.year = other.year;
    }
  }

  public BottleInfo deepCopy() {
    return new BottleInfo(this);
  }

  @Override
  public void clear() {
    setWineIdIsSet(false);
    this.wineId = 0;
    this.wineName = null;
    this.regionName = null;
    this.openDate = null;
    this.openTime = null;
    this.openCity = null;
    this.winePicUrl = null;
    this.nationalFlagUrl = null;
    this.myRate = (double)0;

    this.year = null;
  }

  public int getWineId() {
    return this.wineId;
  }

  public BottleInfo setWineId(int wineId) {
    this.wineId = wineId;
    setWineIdIsSet(true);
    return this;
  }

  public void unsetWineId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __WINEID_ISSET_ID);
  }

  /** Returns true if field wineId is set (has been assigned a value) and false otherwise */
  public boolean isSetWineId() {
    return EncodingUtils.testBit(__isset_bitfield, __WINEID_ISSET_ID);
  }

  public void setWineIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __WINEID_ISSET_ID, value);
  }

  public String getWineName() {
    return this.wineName;
  }

  public BottleInfo setWineName(String wineName) {
    this.wineName = wineName;
    return this;
  }

  public void unsetWineName() {
    this.wineName = null;
  }

  /** Returns true if field wineName is set (has been assigned a value) and false otherwise */
  public boolean isSetWineName() {
    return this.wineName != null;
  }

  public void setWineNameIsSet(boolean value) {
    if (!value) {
      this.wineName = null;
    }
  }

  public String getRegionName() {
    return this.regionName;
  }

  public BottleInfo setRegionName(String regionName) {
    this.regionName = regionName;
    return this;
  }

  public void unsetRegionName() {
    this.regionName = null;
  }

  /** Returns true if field regionName is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionName() {
    return this.regionName != null;
  }

  public void setRegionNameIsSet(boolean value) {
    if (!value) {
      this.regionName = null;
    }
  }

  public String getOpenDate() {
    return this.openDate;
  }

  public BottleInfo setOpenDate(String openDate) {
    this.openDate = openDate;
    return this;
  }

  public void unsetOpenDate() {
    this.openDate = null;
  }

  /** Returns true if field openDate is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenDate() {
    return this.openDate != null;
  }

  public void setOpenDateIsSet(boolean value) {
    if (!value) {
      this.openDate = null;
    }
  }

  public String getOpenTime() {
    return this.openTime;
  }

  public BottleInfo setOpenTime(String openTime) {
    this.openTime = openTime;
    return this;
  }

  public void unsetOpenTime() {
    this.openTime = null;
  }

  /** Returns true if field openTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenTime() {
    return this.openTime != null;
  }

  public void setOpenTimeIsSet(boolean value) {
    if (!value) {
      this.openTime = null;
    }
  }

  public String getOpenCity() {
    return this.openCity;
  }

  public BottleInfo setOpenCity(String openCity) {
    this.openCity = openCity;
    return this;
  }

  public void unsetOpenCity() {
    this.openCity = null;
  }

  /** Returns true if field openCity is set (has been assigned a value) and false otherwise */
  public boolean isSetOpenCity() {
    return this.openCity != null;
  }

  public void setOpenCityIsSet(boolean value) {
    if (!value) {
      this.openCity = null;
    }
  }

  public String getWinePicUrl() {
    return this.winePicUrl;
  }

  public BottleInfo setWinePicUrl(String winePicUrl) {
    this.winePicUrl = winePicUrl;
    return this;
  }

  public void unsetWinePicUrl() {
    this.winePicUrl = null;
  }

  /** Returns true if field winePicUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetWinePicUrl() {
    return this.winePicUrl != null;
  }

  public void setWinePicUrlIsSet(boolean value) {
    if (!value) {
      this.winePicUrl = null;
    }
  }

  public String getNationalFlagUrl() {
    return this.nationalFlagUrl;
  }

  public BottleInfo setNationalFlagUrl(String nationalFlagUrl) {
    this.nationalFlagUrl = nationalFlagUrl;
    return this;
  }

  public void unsetNationalFlagUrl() {
    this.nationalFlagUrl = null;
  }

  /** Returns true if field nationalFlagUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetNationalFlagUrl() {
    return this.nationalFlagUrl != null;
  }

  public void setNationalFlagUrlIsSet(boolean value) {
    if (!value) {
      this.nationalFlagUrl = null;
    }
  }

  public double getMyRate() {
    return this.myRate;
  }

  public BottleInfo setMyRate(double myRate) {
    this.myRate = myRate;
    setMyRateIsSet(true);
    return this;
  }

  public void unsetMyRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MYRATE_ISSET_ID);
  }

  /** Returns true if field myRate is set (has been assigned a value) and false otherwise */
  public boolean isSetMyRate() {
    return EncodingUtils.testBit(__isset_bitfield, __MYRATE_ISSET_ID);
  }

  public void setMyRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MYRATE_ISSET_ID, value);
  }

  public String getYear() {
    return this.year;
  }

  public BottleInfo setYear(String year) {
    this.year = year;
    return this;
  }

  public void unsetYear() {
    this.year = null;
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean isSetYear() {
    return this.year != null;
  }

  public void setYearIsSet(boolean value) {
    if (!value) {
      this.year = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case WINE_ID:
      if (value == null) {
        unsetWineId();
      } else {
        setWineId((Integer)value);
      }
      break;

    case WINE_NAME:
      if (value == null) {
        unsetWineName();
      } else {
        setWineName((String)value);
      }
      break;

    case REGION_NAME:
      if (value == null) {
        unsetRegionName();
      } else {
        setRegionName((String)value);
      }
      break;

    case OPEN_DATE:
      if (value == null) {
        unsetOpenDate();
      } else {
        setOpenDate((String)value);
      }
      break;

    case OPEN_TIME:
      if (value == null) {
        unsetOpenTime();
      } else {
        setOpenTime((String)value);
      }
      break;

    case OPEN_CITY:
      if (value == null) {
        unsetOpenCity();
      } else {
        setOpenCity((String)value);
      }
      break;

    case WINE_PIC_URL:
      if (value == null) {
        unsetWinePicUrl();
      } else {
        setWinePicUrl((String)value);
      }
      break;

    case NATIONAL_FLAG_URL:
      if (value == null) {
        unsetNationalFlagUrl();
      } else {
        setNationalFlagUrl((String)value);
      }
      break;

    case MY_RATE:
      if (value == null) {
        unsetMyRate();
      } else {
        setMyRate((Double)value);
      }
      break;

    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case WINE_ID:
      return getWineId();

    case WINE_NAME:
      return getWineName();

    case REGION_NAME:
      return getRegionName();

    case OPEN_DATE:
      return getOpenDate();

    case OPEN_TIME:
      return getOpenTime();

    case OPEN_CITY:
      return getOpenCity();

    case WINE_PIC_URL:
      return getWinePicUrl();

    case NATIONAL_FLAG_URL:
      return getNationalFlagUrl();

    case MY_RATE:
      return getMyRate();

    case YEAR:
      return getYear();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case WINE_ID:
      return isSetWineId();
    case WINE_NAME:
      return isSetWineName();
    case REGION_NAME:
      return isSetRegionName();
    case OPEN_DATE:
      return isSetOpenDate();
    case OPEN_TIME:
      return isSetOpenTime();
    case OPEN_CITY:
      return isSetOpenCity();
    case WINE_PIC_URL:
      return isSetWinePicUrl();
    case NATIONAL_FLAG_URL:
      return isSetNationalFlagUrl();
    case MY_RATE:
      return isSetMyRate();
    case YEAR:
      return isSetYear();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BottleInfo)
      return this.equals((BottleInfo)that);
    return false;
  }

  public boolean equals(BottleInfo that) {
    if (that == null)
      return false;

    boolean this_present_wineId = true;
    boolean that_present_wineId = true;
    if (this_present_wineId || that_present_wineId) {
      if (!(this_present_wineId && that_present_wineId))
        return false;
      if (this.wineId != that.wineId)
        return false;
    }

    boolean this_present_wineName = true && this.isSetWineName();
    boolean that_present_wineName = true && that.isSetWineName();
    if (this_present_wineName || that_present_wineName) {
      if (!(this_present_wineName && that_present_wineName))
        return false;
      if (!this.wineName.equals(that.wineName))
        return false;
    }

    boolean this_present_regionName = true && this.isSetRegionName();
    boolean that_present_regionName = true && that.isSetRegionName();
    if (this_present_regionName || that_present_regionName) {
      if (!(this_present_regionName && that_present_regionName))
        return false;
      if (!this.regionName.equals(that.regionName))
        return false;
    }

    boolean this_present_openDate = true && this.isSetOpenDate();
    boolean that_present_openDate = true && that.isSetOpenDate();
    if (this_present_openDate || that_present_openDate) {
      if (!(this_present_openDate && that_present_openDate))
        return false;
      if (!this.openDate.equals(that.openDate))
        return false;
    }

    boolean this_present_openTime = true && this.isSetOpenTime();
    boolean that_present_openTime = true && that.isSetOpenTime();
    if (this_present_openTime || that_present_openTime) {
      if (!(this_present_openTime && that_present_openTime))
        return false;
      if (!this.openTime.equals(that.openTime))
        return false;
    }

    boolean this_present_openCity = true && this.isSetOpenCity();
    boolean that_present_openCity = true && that.isSetOpenCity();
    if (this_present_openCity || that_present_openCity) {
      if (!(this_present_openCity && that_present_openCity))
        return false;
      if (!this.openCity.equals(that.openCity))
        return false;
    }

    boolean this_present_winePicUrl = true && this.isSetWinePicUrl();
    boolean that_present_winePicUrl = true && that.isSetWinePicUrl();
    if (this_present_winePicUrl || that_present_winePicUrl) {
      if (!(this_present_winePicUrl && that_present_winePicUrl))
        return false;
      if (!this.winePicUrl.equals(that.winePicUrl))
        return false;
    }

    boolean this_present_nationalFlagUrl = true && this.isSetNationalFlagUrl();
    boolean that_present_nationalFlagUrl = true && that.isSetNationalFlagUrl();
    if (this_present_nationalFlagUrl || that_present_nationalFlagUrl) {
      if (!(this_present_nationalFlagUrl && that_present_nationalFlagUrl))
        return false;
      if (!this.nationalFlagUrl.equals(that.nationalFlagUrl))
        return false;
    }

    boolean this_present_myRate = true;
    boolean that_present_myRate = true;
    if (this_present_myRate || that_present_myRate) {
      if (!(this_present_myRate && that_present_myRate))
        return false;
      if (this.myRate != that.myRate)
        return false;
    }

    boolean this_present_year = true && this.isSetYear();
    boolean that_present_year = true && that.isSetYear();
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (!this.year.equals(that.year))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_wineId = true;
    list.add(present_wineId);
    if (present_wineId)
      list.add(wineId);

    boolean present_wineName = true && (isSetWineName());
    list.add(present_wineName);
    if (present_wineName)
      list.add(wineName);

    boolean present_regionName = true && (isSetRegionName());
    list.add(present_regionName);
    if (present_regionName)
      list.add(regionName);

    boolean present_openDate = true && (isSetOpenDate());
    list.add(present_openDate);
    if (present_openDate)
      list.add(openDate);

    boolean present_openTime = true && (isSetOpenTime());
    list.add(present_openTime);
    if (present_openTime)
      list.add(openTime);

    boolean present_openCity = true && (isSetOpenCity());
    list.add(present_openCity);
    if (present_openCity)
      list.add(openCity);

    boolean present_winePicUrl = true && (isSetWinePicUrl());
    list.add(present_winePicUrl);
    if (present_winePicUrl)
      list.add(winePicUrl);

    boolean present_nationalFlagUrl = true && (isSetNationalFlagUrl());
    list.add(present_nationalFlagUrl);
    if (present_nationalFlagUrl)
      list.add(nationalFlagUrl);

    boolean present_myRate = true;
    list.add(present_myRate);
    if (present_myRate)
      list.add(myRate);

    boolean present_year = true && (isSetYear());
    list.add(present_year);
    if (present_year)
      list.add(year);

    return list.hashCode();
  }

  @Override
  public int compareTo(BottleInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetWineId()).compareTo(other.isSetWineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineId, other.wineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWineName()).compareTo(other.isSetWineName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWineName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wineName, other.wineName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRegionName()).compareTo(other.isSetRegionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionName, other.regionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenDate()).compareTo(other.isSetOpenDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openDate, other.openDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenTime()).compareTo(other.isSetOpenTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openTime, other.openTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOpenCity()).compareTo(other.isSetOpenCity());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpenCity()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.openCity, other.openCity);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetWinePicUrl()).compareTo(other.isSetWinePicUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWinePicUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.winePicUrl, other.winePicUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNationalFlagUrl()).compareTo(other.isSetNationalFlagUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNationalFlagUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nationalFlagUrl, other.nationalFlagUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMyRate()).compareTo(other.isSetMyRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMyRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.myRate, other.myRate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BottleInfo(");
    boolean first = true;

    sb.append("wineId:");
    sb.append(this.wineId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("wineName:");
    if (this.wineName == null) {
      sb.append("null");
    } else {
      sb.append(this.wineName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("regionName:");
    if (this.regionName == null) {
      sb.append("null");
    } else {
      sb.append(this.regionName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openDate:");
    if (this.openDate == null) {
      sb.append("null");
    } else {
      sb.append(this.openDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openTime:");
    if (this.openTime == null) {
      sb.append("null");
    } else {
      sb.append(this.openTime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("openCity:");
    if (this.openCity == null) {
      sb.append("null");
    } else {
      sb.append(this.openCity);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("winePicUrl:");
    if (this.winePicUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.winePicUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nationalFlagUrl:");
    if (this.nationalFlagUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.nationalFlagUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("myRate:");
    sb.append(this.myRate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("year:");
    if (this.year == null) {
      sb.append("null");
    } else {
      sb.append(this.year);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BottleInfoStandardSchemeFactory implements SchemeFactory {
    public BottleInfoStandardScheme getScheme() {
      return new BottleInfoStandardScheme();
    }
  }

  private static class BottleInfoStandardScheme extends StandardScheme<BottleInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BottleInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // WINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.wineId = iprot.readI32();
              struct.setWineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // WINE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.wineName = iprot.readString();
              struct.setWineNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REGION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regionName = iprot.readString();
              struct.setRegionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPEN_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openDate = iprot.readString();
              struct.setOpenDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPEN_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openTime = iprot.readString();
              struct.setOpenTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OPEN_CITY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.openCity = iprot.readString();
              struct.setOpenCityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // WINE_PIC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.winePicUrl = iprot.readString();
              struct.setWinePicUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NATIONAL_FLAG_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nationalFlagUrl = iprot.readString();
              struct.setNationalFlagUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MY_RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.myRate = iprot.readDouble();
              struct.setMyRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.year = iprot.readString();
              struct.setYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BottleInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(WINE_ID_FIELD_DESC);
      oprot.writeI32(struct.wineId);
      oprot.writeFieldEnd();
      if (struct.wineName != null) {
        oprot.writeFieldBegin(WINE_NAME_FIELD_DESC);
        oprot.writeString(struct.wineName);
        oprot.writeFieldEnd();
      }
      if (struct.regionName != null) {
        oprot.writeFieldBegin(REGION_NAME_FIELD_DESC);
        oprot.writeString(struct.regionName);
        oprot.writeFieldEnd();
      }
      if (struct.openDate != null) {
        oprot.writeFieldBegin(OPEN_DATE_FIELD_DESC);
        oprot.writeString(struct.openDate);
        oprot.writeFieldEnd();
      }
      if (struct.openTime != null) {
        oprot.writeFieldBegin(OPEN_TIME_FIELD_DESC);
        oprot.writeString(struct.openTime);
        oprot.writeFieldEnd();
      }
      if (struct.openCity != null) {
        oprot.writeFieldBegin(OPEN_CITY_FIELD_DESC);
        oprot.writeString(struct.openCity);
        oprot.writeFieldEnd();
      }
      if (struct.winePicUrl != null) {
        oprot.writeFieldBegin(WINE_PIC_URL_FIELD_DESC);
        oprot.writeString(struct.winePicUrl);
        oprot.writeFieldEnd();
      }
      if (struct.nationalFlagUrl != null) {
        oprot.writeFieldBegin(NATIONAL_FLAG_URL_FIELD_DESC);
        oprot.writeString(struct.nationalFlagUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MY_RATE_FIELD_DESC);
      oprot.writeDouble(struct.myRate);
      oprot.writeFieldEnd();
      if (struct.year != null) {
        oprot.writeFieldBegin(YEAR_FIELD_DESC);
        oprot.writeString(struct.year);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BottleInfoTupleSchemeFactory implements SchemeFactory {
    public BottleInfoTupleScheme getScheme() {
      return new BottleInfoTupleScheme();
    }
  }

  private static class BottleInfoTupleScheme extends TupleScheme<BottleInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BottleInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetWineId()) {
        optionals.set(0);
      }
      if (struct.isSetWineName()) {
        optionals.set(1);
      }
      if (struct.isSetRegionName()) {
        optionals.set(2);
      }
      if (struct.isSetOpenDate()) {
        optionals.set(3);
      }
      if (struct.isSetOpenTime()) {
        optionals.set(4);
      }
      if (struct.isSetOpenCity()) {
        optionals.set(5);
      }
      if (struct.isSetWinePicUrl()) {
        optionals.set(6);
      }
      if (struct.isSetNationalFlagUrl()) {
        optionals.set(7);
      }
      if (struct.isSetMyRate()) {
        optionals.set(8);
      }
      if (struct.isSetYear()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetWineId()) {
        oprot.writeI32(struct.wineId);
      }
      if (struct.isSetWineName()) {
        oprot.writeString(struct.wineName);
      }
      if (struct.isSetRegionName()) {
        oprot.writeString(struct.regionName);
      }
      if (struct.isSetOpenDate()) {
        oprot.writeString(struct.openDate);
      }
      if (struct.isSetOpenTime()) {
        oprot.writeString(struct.openTime);
      }
      if (struct.isSetOpenCity()) {
        oprot.writeString(struct.openCity);
      }
      if (struct.isSetWinePicUrl()) {
        oprot.writeString(struct.winePicUrl);
      }
      if (struct.isSetNationalFlagUrl()) {
        oprot.writeString(struct.nationalFlagUrl);
      }
      if (struct.isSetMyRate()) {
        oprot.writeDouble(struct.myRate);
      }
      if (struct.isSetYear()) {
        oprot.writeString(struct.year);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BottleInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.wineId = iprot.readI32();
        struct.setWineIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.wineName = iprot.readString();
        struct.setWineNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.regionName = iprot.readString();
        struct.setRegionNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.openDate = iprot.readString();
        struct.setOpenDateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.openTime = iprot.readString();
        struct.setOpenTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.openCity = iprot.readString();
        struct.setOpenCityIsSet(true);
      }
      if (incoming.get(6)) {
        struct.winePicUrl = iprot.readString();
        struct.setWinePicUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.nationalFlagUrl = iprot.readString();
        struct.setNationalFlagUrlIsSet(true);
      }
      if (incoming.get(8)) {
        struct.myRate = iprot.readDouble();
        struct.setMyRateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.year = iprot.readString();
        struct.setYearIsSet(true);
      }
    }
  }

}

