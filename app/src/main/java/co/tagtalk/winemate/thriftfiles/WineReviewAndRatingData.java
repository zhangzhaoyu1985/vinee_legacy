/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package co.tagtalk.winemate.thriftfiles;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-24")
public class WineReviewAndRatingData implements org.apache.thrift.TBase<WineReviewAndRatingData, WineReviewAndRatingData._Fields>, java.io.Serializable, Cloneable, Comparable<WineReviewAndRatingData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WineReviewAndRatingData");

  private static final org.apache.thrift.protocol.TField REVIEWER_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewerUserName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rate", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField TIME_ELAPSED_FIELD_DESC = new org.apache.thrift.protocol.TField("timeElapsed", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REVIEW_CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewContent", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SEX_FIELD_DESC = new org.apache.thrift.protocol.TField("sex", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IS_FOLLOWED_FIELD_DESC = new org.apache.thrift.protocol.TField("isFollowed", org.apache.thrift.protocol.TType.BOOL, (short)7);
  private static final org.apache.thrift.protocol.TField IS_MY_FRIEND_FIELD_DESC = new org.apache.thrift.protocol.TField("isMyFriend", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField PHOTO_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("photoUrl", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField THIRD_PARTY_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdParty", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField REVIEWER_FIRST_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("reviewerFirstName", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WineReviewAndRatingDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WineReviewAndRatingDataTupleSchemeFactory());
  }

  public String reviewerUserName; // required
  public double rate; // required
  public String timeElapsed; // required
  public String reviewContent; // required
  /**
   * 
   * @see ReviewerSex
   */
  public ReviewerSex sex; // required
  public int userId; // required
  public boolean isFollowed; // required
  public boolean isMyFriend; // required
  public String photoUrl; // required
  /**
   * 
   * @see ThirdParty
   */
  public ThirdParty thirdParty; // required
  public String reviewerFirstName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REVIEWER_USER_NAME((short)1, "reviewerUserName"),
    RATE((short)2, "rate"),
    TIME_ELAPSED((short)3, "timeElapsed"),
    REVIEW_CONTENT((short)4, "reviewContent"),
    /**
     * 
     * @see ReviewerSex
     */
    SEX((short)5, "sex"),
    USER_ID((short)6, "userId"),
    IS_FOLLOWED((short)7, "isFollowed"),
    IS_MY_FRIEND((short)8, "isMyFriend"),
    PHOTO_URL((short)9, "photoUrl"),
    /**
     * 
     * @see ThirdParty
     */
    THIRD_PARTY((short)10, "thirdParty"),
    REVIEWER_FIRST_NAME((short)11, "reviewerFirstName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REVIEWER_USER_NAME
          return REVIEWER_USER_NAME;
        case 2: // RATE
          return RATE;
        case 3: // TIME_ELAPSED
          return TIME_ELAPSED;
        case 4: // REVIEW_CONTENT
          return REVIEW_CONTENT;
        case 5: // SEX
          return SEX;
        case 6: // USER_ID
          return USER_ID;
        case 7: // IS_FOLLOWED
          return IS_FOLLOWED;
        case 8: // IS_MY_FRIEND
          return IS_MY_FRIEND;
        case 9: // PHOTO_URL
          return PHOTO_URL;
        case 10: // THIRD_PARTY
          return THIRD_PARTY;
        case 11: // REVIEWER_FIRST_NAME
          return REVIEWER_FIRST_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RATE_ISSET_ID = 0;
  private static final int __USERID_ISSET_ID = 1;
  private static final int __ISFOLLOWED_ISSET_ID = 2;
  private static final int __ISMYFRIEND_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REVIEWER_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("reviewerUserName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RATE, new org.apache.thrift.meta_data.FieldMetaData("rate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TIME_ELAPSED, new org.apache.thrift.meta_data.FieldMetaData("timeElapsed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REVIEW_CONTENT, new org.apache.thrift.meta_data.FieldMetaData("reviewContent", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SEX, new org.apache.thrift.meta_data.FieldMetaData("sex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ReviewerSex.class)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IS_FOLLOWED, new org.apache.thrift.meta_data.FieldMetaData("isFollowed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_MY_FRIEND, new org.apache.thrift.meta_data.FieldMetaData("isMyFriend", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.PHOTO_URL, new org.apache.thrift.meta_data.FieldMetaData("photoUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD_PARTY, new org.apache.thrift.meta_data.FieldMetaData("thirdParty", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ThirdParty.class)));
    tmpMap.put(_Fields.REVIEWER_FIRST_NAME, new org.apache.thrift.meta_data.FieldMetaData("reviewerFirstName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WineReviewAndRatingData.class, metaDataMap);
  }

  public WineReviewAndRatingData() {
  }

  public WineReviewAndRatingData(
    String reviewerUserName,
    double rate,
    String timeElapsed,
    String reviewContent,
    ReviewerSex sex,
    int userId,
    boolean isFollowed,
    boolean isMyFriend,
    String photoUrl,
    ThirdParty thirdParty,
    String reviewerFirstName)
  {
    this();
    this.reviewerUserName = reviewerUserName;
    this.rate = rate;
    setRateIsSet(true);
    this.timeElapsed = timeElapsed;
    this.reviewContent = reviewContent;
    this.sex = sex;
    this.userId = userId;
    setUserIdIsSet(true);
    this.isFollowed = isFollowed;
    setIsFollowedIsSet(true);
    this.isMyFriend = isMyFriend;
    setIsMyFriendIsSet(true);
    this.photoUrl = photoUrl;
    this.thirdParty = thirdParty;
    this.reviewerFirstName = reviewerFirstName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WineReviewAndRatingData(WineReviewAndRatingData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetReviewerUserName()) {
      this.reviewerUserName = other.reviewerUserName;
    }
    this.rate = other.rate;
    if (other.isSetTimeElapsed()) {
      this.timeElapsed = other.timeElapsed;
    }
    if (other.isSetReviewContent()) {
      this.reviewContent = other.reviewContent;
    }
    if (other.isSetSex()) {
      this.sex = other.sex;
    }
    this.userId = other.userId;
    this.isFollowed = other.isFollowed;
    this.isMyFriend = other.isMyFriend;
    if (other.isSetPhotoUrl()) {
      this.photoUrl = other.photoUrl;
    }
    if (other.isSetThirdParty()) {
      this.thirdParty = other.thirdParty;
    }
    if (other.isSetReviewerFirstName()) {
      this.reviewerFirstName = other.reviewerFirstName;
    }
  }

  public WineReviewAndRatingData deepCopy() {
    return new WineReviewAndRatingData(this);
  }

  @Override
  public void clear() {
    this.reviewerUserName = null;
    setRateIsSet(false);
    this.rate = 0.0;
    this.timeElapsed = null;
    this.reviewContent = null;
    this.sex = null;
    setUserIdIsSet(false);
    this.userId = 0;
    setIsFollowedIsSet(false);
    this.isFollowed = false;
    setIsMyFriendIsSet(false);
    this.isMyFriend = false;
    this.photoUrl = null;
    this.thirdParty = null;
    this.reviewerFirstName = null;
  }

  public String getReviewerUserName() {
    return this.reviewerUserName;
  }

  public WineReviewAndRatingData setReviewerUserName(String reviewerUserName) {
    this.reviewerUserName = reviewerUserName;
    return this;
  }

  public void unsetReviewerUserName() {
    this.reviewerUserName = null;
  }

  /** Returns true if field reviewerUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewerUserName() {
    return this.reviewerUserName != null;
  }

  public void setReviewerUserNameIsSet(boolean value) {
    if (!value) {
      this.reviewerUserName = null;
    }
  }

  public double getRate() {
    return this.rate;
  }

  public WineReviewAndRatingData setRate(double rate) {
    this.rate = rate;
    setRateIsSet(true);
    return this;
  }

  public void unsetRate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  /** Returns true if field rate is set (has been assigned a value) and false otherwise */
  public boolean isSetRate() {
    return EncodingUtils.testBit(__isset_bitfield, __RATE_ISSET_ID);
  }

  public void setRateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __RATE_ISSET_ID, value);
  }

  public String getTimeElapsed() {
    return this.timeElapsed;
  }

  public WineReviewAndRatingData setTimeElapsed(String timeElapsed) {
    this.timeElapsed = timeElapsed;
    return this;
  }

  public void unsetTimeElapsed() {
    this.timeElapsed = null;
  }

  /** Returns true if field timeElapsed is set (has been assigned a value) and false otherwise */
  public boolean isSetTimeElapsed() {
    return this.timeElapsed != null;
  }

  public void setTimeElapsedIsSet(boolean value) {
    if (!value) {
      this.timeElapsed = null;
    }
  }

  public String getReviewContent() {
    return this.reviewContent;
  }

  public WineReviewAndRatingData setReviewContent(String reviewContent) {
    this.reviewContent = reviewContent;
    return this;
  }

  public void unsetReviewContent() {
    this.reviewContent = null;
  }

  /** Returns true if field reviewContent is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewContent() {
    return this.reviewContent != null;
  }

  public void setReviewContentIsSet(boolean value) {
    if (!value) {
      this.reviewContent = null;
    }
  }

  /**
   * 
   * @see ReviewerSex
   */
  public ReviewerSex getSex() {
    return this.sex;
  }

  /**
   * 
   * @see ReviewerSex
   */
  public WineReviewAndRatingData setSex(ReviewerSex sex) {
    this.sex = sex;
    return this;
  }

  public void unsetSex() {
    this.sex = null;
  }

  /** Returns true if field sex is set (has been assigned a value) and false otherwise */
  public boolean isSetSex() {
    return this.sex != null;
  }

  public void setSexIsSet(boolean value) {
    if (!value) {
      this.sex = null;
    }
  }

  public int getUserId() {
    return this.userId;
  }

  public WineReviewAndRatingData setUserId(int userId) {
    this.userId = userId;
    setUserIdIsSet(true);
    return this;
  }

  public void unsetUserId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return EncodingUtils.testBit(__isset_bitfield, __USERID_ISSET_ID);
  }

  public void setUserIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __USERID_ISSET_ID, value);
  }

  public boolean isIsFollowed() {
    return this.isFollowed;
  }

  public WineReviewAndRatingData setIsFollowed(boolean isFollowed) {
    this.isFollowed = isFollowed;
    setIsFollowedIsSet(true);
    return this;
  }

  public void unsetIsFollowed() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISFOLLOWED_ISSET_ID);
  }

  /** Returns true if field isFollowed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsFollowed() {
    return EncodingUtils.testBit(__isset_bitfield, __ISFOLLOWED_ISSET_ID);
  }

  public void setIsFollowedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISFOLLOWED_ISSET_ID, value);
  }

  public boolean isIsMyFriend() {
    return this.isMyFriend;
  }

  public WineReviewAndRatingData setIsMyFriend(boolean isMyFriend) {
    this.isMyFriend = isMyFriend;
    setIsMyFriendIsSet(true);
    return this;
  }

  public void unsetIsMyFriend() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISMYFRIEND_ISSET_ID);
  }

  /** Returns true if field isMyFriend is set (has been assigned a value) and false otherwise */
  public boolean isSetIsMyFriend() {
    return EncodingUtils.testBit(__isset_bitfield, __ISMYFRIEND_ISSET_ID);
  }

  public void setIsMyFriendIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISMYFRIEND_ISSET_ID, value);
  }

  public String getPhotoUrl() {
    return this.photoUrl;
  }

  public WineReviewAndRatingData setPhotoUrl(String photoUrl) {
    this.photoUrl = photoUrl;
    return this;
  }

  public void unsetPhotoUrl() {
    this.photoUrl = null;
  }

  /** Returns true if field photoUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPhotoUrl() {
    return this.photoUrl != null;
  }

  public void setPhotoUrlIsSet(boolean value) {
    if (!value) {
      this.photoUrl = null;
    }
  }

  /**
   * 
   * @see ThirdParty
   */
  public ThirdParty getThirdParty() {
    return this.thirdParty;
  }

  /**
   * 
   * @see ThirdParty
   */
  public WineReviewAndRatingData setThirdParty(ThirdParty thirdParty) {
    this.thirdParty = thirdParty;
    return this;
  }

  public void unsetThirdParty() {
    this.thirdParty = null;
  }

  /** Returns true if field thirdParty is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdParty() {
    return this.thirdParty != null;
  }

  public void setThirdPartyIsSet(boolean value) {
    if (!value) {
      this.thirdParty = null;
    }
  }

  public String getReviewerFirstName() {
    return this.reviewerFirstName;
  }

  public WineReviewAndRatingData setReviewerFirstName(String reviewerFirstName) {
    this.reviewerFirstName = reviewerFirstName;
    return this;
  }

  public void unsetReviewerFirstName() {
    this.reviewerFirstName = null;
  }

  /** Returns true if field reviewerFirstName is set (has been assigned a value) and false otherwise */
  public boolean isSetReviewerFirstName() {
    return this.reviewerFirstName != null;
  }

  public void setReviewerFirstNameIsSet(boolean value) {
    if (!value) {
      this.reviewerFirstName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REVIEWER_USER_NAME:
      if (value == null) {
        unsetReviewerUserName();
      } else {
        setReviewerUserName((String)value);
      }
      break;

    case RATE:
      if (value == null) {
        unsetRate();
      } else {
        setRate((Double)value);
      }
      break;

    case TIME_ELAPSED:
      if (value == null) {
        unsetTimeElapsed();
      } else {
        setTimeElapsed((String)value);
      }
      break;

    case REVIEW_CONTENT:
      if (value == null) {
        unsetReviewContent();
      } else {
        setReviewContent((String)value);
      }
      break;

    case SEX:
      if (value == null) {
        unsetSex();
      } else {
        setSex((ReviewerSex)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((Integer)value);
      }
      break;

    case IS_FOLLOWED:
      if (value == null) {
        unsetIsFollowed();
      } else {
        setIsFollowed((Boolean)value);
      }
      break;

    case IS_MY_FRIEND:
      if (value == null) {
        unsetIsMyFriend();
      } else {
        setIsMyFriend((Boolean)value);
      }
      break;

    case PHOTO_URL:
      if (value == null) {
        unsetPhotoUrl();
      } else {
        setPhotoUrl((String)value);
      }
      break;

    case THIRD_PARTY:
      if (value == null) {
        unsetThirdParty();
      } else {
        setThirdParty((ThirdParty)value);
      }
      break;

    case REVIEWER_FIRST_NAME:
      if (value == null) {
        unsetReviewerFirstName();
      } else {
        setReviewerFirstName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REVIEWER_USER_NAME:
      return getReviewerUserName();

    case RATE:
      return getRate();

    case TIME_ELAPSED:
      return getTimeElapsed();

    case REVIEW_CONTENT:
      return getReviewContent();

    case SEX:
      return getSex();

    case USER_ID:
      return getUserId();

    case IS_FOLLOWED:
      return isIsFollowed();

    case IS_MY_FRIEND:
      return isIsMyFriend();

    case PHOTO_URL:
      return getPhotoUrl();

    case THIRD_PARTY:
      return getThirdParty();

    case REVIEWER_FIRST_NAME:
      return getReviewerFirstName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REVIEWER_USER_NAME:
      return isSetReviewerUserName();
    case RATE:
      return isSetRate();
    case TIME_ELAPSED:
      return isSetTimeElapsed();
    case REVIEW_CONTENT:
      return isSetReviewContent();
    case SEX:
      return isSetSex();
    case USER_ID:
      return isSetUserId();
    case IS_FOLLOWED:
      return isSetIsFollowed();
    case IS_MY_FRIEND:
      return isSetIsMyFriend();
    case PHOTO_URL:
      return isSetPhotoUrl();
    case THIRD_PARTY:
      return isSetThirdParty();
    case REVIEWER_FIRST_NAME:
      return isSetReviewerFirstName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WineReviewAndRatingData)
      return this.equals((WineReviewAndRatingData)that);
    return false;
  }

  public boolean equals(WineReviewAndRatingData that) {
    if (that == null)
      return false;

    boolean this_present_reviewerUserName = true && this.isSetReviewerUserName();
    boolean that_present_reviewerUserName = true && that.isSetReviewerUserName();
    if (this_present_reviewerUserName || that_present_reviewerUserName) {
      if (!(this_present_reviewerUserName && that_present_reviewerUserName))
        return false;
      if (!this.reviewerUserName.equals(that.reviewerUserName))
        return false;
    }

    boolean this_present_rate = true;
    boolean that_present_rate = true;
    if (this_present_rate || that_present_rate) {
      if (!(this_present_rate && that_present_rate))
        return false;
      if (this.rate != that.rate)
        return false;
    }

    boolean this_present_timeElapsed = true && this.isSetTimeElapsed();
    boolean that_present_timeElapsed = true && that.isSetTimeElapsed();
    if (this_present_timeElapsed || that_present_timeElapsed) {
      if (!(this_present_timeElapsed && that_present_timeElapsed))
        return false;
      if (!this.timeElapsed.equals(that.timeElapsed))
        return false;
    }

    boolean this_present_reviewContent = true && this.isSetReviewContent();
    boolean that_present_reviewContent = true && that.isSetReviewContent();
    if (this_present_reviewContent || that_present_reviewContent) {
      if (!(this_present_reviewContent && that_present_reviewContent))
        return false;
      if (!this.reviewContent.equals(that.reviewContent))
        return false;
    }

    boolean this_present_sex = true && this.isSetSex();
    boolean that_present_sex = true && that.isSetSex();
    if (this_present_sex || that_present_sex) {
      if (!(this_present_sex && that_present_sex))
        return false;
      if (!this.sex.equals(that.sex))
        return false;
    }

    boolean this_present_userId = true;
    boolean that_present_userId = true;
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (this.userId != that.userId)
        return false;
    }

    boolean this_present_isFollowed = true;
    boolean that_present_isFollowed = true;
    if (this_present_isFollowed || that_present_isFollowed) {
      if (!(this_present_isFollowed && that_present_isFollowed))
        return false;
      if (this.isFollowed != that.isFollowed)
        return false;
    }

    boolean this_present_isMyFriend = true;
    boolean that_present_isMyFriend = true;
    if (this_present_isMyFriend || that_present_isMyFriend) {
      if (!(this_present_isMyFriend && that_present_isMyFriend))
        return false;
      if (this.isMyFriend != that.isMyFriend)
        return false;
    }

    boolean this_present_photoUrl = true && this.isSetPhotoUrl();
    boolean that_present_photoUrl = true && that.isSetPhotoUrl();
    if (this_present_photoUrl || that_present_photoUrl) {
      if (!(this_present_photoUrl && that_present_photoUrl))
        return false;
      if (!this.photoUrl.equals(that.photoUrl))
        return false;
    }

    boolean this_present_thirdParty = true && this.isSetThirdParty();
    boolean that_present_thirdParty = true && that.isSetThirdParty();
    if (this_present_thirdParty || that_present_thirdParty) {
      if (!(this_present_thirdParty && that_present_thirdParty))
        return false;
      if (!this.thirdParty.equals(that.thirdParty))
        return false;
    }

    boolean this_present_reviewerFirstName = true && this.isSetReviewerFirstName();
    boolean that_present_reviewerFirstName = true && that.isSetReviewerFirstName();
    if (this_present_reviewerFirstName || that_present_reviewerFirstName) {
      if (!(this_present_reviewerFirstName && that_present_reviewerFirstName))
        return false;
      if (!this.reviewerFirstName.equals(that.reviewerFirstName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_reviewerUserName = true && (isSetReviewerUserName());
    list.add(present_reviewerUserName);
    if (present_reviewerUserName)
      list.add(reviewerUserName);

    boolean present_rate = true;
    list.add(present_rate);
    if (present_rate)
      list.add(rate);

    boolean present_timeElapsed = true && (isSetTimeElapsed());
    list.add(present_timeElapsed);
    if (present_timeElapsed)
      list.add(timeElapsed);

    boolean present_reviewContent = true && (isSetReviewContent());
    list.add(present_reviewContent);
    if (present_reviewContent)
      list.add(reviewContent);

    boolean present_sex = true && (isSetSex());
    list.add(present_sex);
    if (present_sex)
      list.add(sex.getValue());

    boolean present_userId = true;
    list.add(present_userId);
    if (present_userId)
      list.add(userId);

    boolean present_isFollowed = true;
    list.add(present_isFollowed);
    if (present_isFollowed)
      list.add(isFollowed);

    boolean present_isMyFriend = true;
    list.add(present_isMyFriend);
    if (present_isMyFriend)
      list.add(isMyFriend);

    boolean present_photoUrl = true && (isSetPhotoUrl());
    list.add(present_photoUrl);
    if (present_photoUrl)
      list.add(photoUrl);

    boolean present_thirdParty = true && (isSetThirdParty());
    list.add(present_thirdParty);
    if (present_thirdParty)
      list.add(thirdParty.getValue());

    boolean present_reviewerFirstName = true && (isSetReviewerFirstName());
    list.add(present_reviewerFirstName);
    if (present_reviewerFirstName)
      list.add(reviewerFirstName);

    return list.hashCode();
  }

  @Override
  public int compareTo(WineReviewAndRatingData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReviewerUserName()).compareTo(other.isSetReviewerUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewerUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewerUserName, other.reviewerUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRate()).compareTo(other.isSetRate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rate, other.rate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTimeElapsed()).compareTo(other.isSetTimeElapsed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimeElapsed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timeElapsed, other.timeElapsed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReviewContent()).compareTo(other.isSetReviewContent());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewContent()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewContent, other.reviewContent);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSex()).compareTo(other.isSetSex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sex, other.sex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsFollowed()).compareTo(other.isSetIsFollowed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsFollowed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isFollowed, other.isFollowed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsMyFriend()).compareTo(other.isSetIsMyFriend());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsMyFriend()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isMyFriend, other.isMyFriend);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhotoUrl()).compareTo(other.isSetPhotoUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhotoUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.photoUrl, other.photoUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetThirdParty()).compareTo(other.isSetThirdParty());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdParty()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdParty, other.thirdParty);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReviewerFirstName()).compareTo(other.isSetReviewerFirstName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReviewerFirstName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reviewerFirstName, other.reviewerFirstName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WineReviewAndRatingData(");
    boolean first = true;

    sb.append("reviewerUserName:");
    if (this.reviewerUserName == null) {
      sb.append("null");
    } else {
      sb.append(this.reviewerUserName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("rate:");
    sb.append(this.rate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("timeElapsed:");
    if (this.timeElapsed == null) {
      sb.append("null");
    } else {
      sb.append(this.timeElapsed);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reviewContent:");
    if (this.reviewContent == null) {
      sb.append("null");
    } else {
      sb.append(this.reviewContent);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sex:");
    if (this.sex == null) {
      sb.append("null");
    } else {
      sb.append(this.sex);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userId:");
    sb.append(this.userId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isFollowed:");
    sb.append(this.isFollowed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isMyFriend:");
    sb.append(this.isMyFriend);
    first = false;
    if (!first) sb.append(", ");
    sb.append("photoUrl:");
    if (this.photoUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.photoUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdParty:");
    if (this.thirdParty == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdParty);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reviewerFirstName:");
    if (this.reviewerFirstName == null) {
      sb.append("null");
    } else {
      sb.append(this.reviewerFirstName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WineReviewAndRatingDataStandardSchemeFactory implements SchemeFactory {
    public WineReviewAndRatingDataStandardScheme getScheme() {
      return new WineReviewAndRatingDataStandardScheme();
    }
  }

  private static class WineReviewAndRatingDataStandardScheme extends StandardScheme<WineReviewAndRatingData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WineReviewAndRatingData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // REVIEWER_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reviewerUserName = iprot.readString();
              struct.setReviewerUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RATE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.rate = iprot.readDouble();
              struct.setRateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TIME_ELAPSED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.timeElapsed = iprot.readString();
              struct.setTimeElapsedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REVIEW_CONTENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reviewContent = iprot.readString();
              struct.setReviewContentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sex = co.tagtalk.winemate.thriftfiles.ReviewerSex.findByValue(iprot.readI32());
              struct.setSexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.userId = iprot.readI32();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // IS_FOLLOWED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isFollowed = iprot.readBool();
              struct.setIsFollowedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IS_MY_FRIEND
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isMyFriend = iprot.readBool();
              struct.setIsMyFriendIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PHOTO_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.photoUrl = iprot.readString();
              struct.setPhotoUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // THIRD_PARTY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.thirdParty = co.tagtalk.winemate.thriftfiles.ThirdParty.findByValue(iprot.readI32());
              struct.setThirdPartyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REVIEWER_FIRST_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reviewerFirstName = iprot.readString();
              struct.setReviewerFirstNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WineReviewAndRatingData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.reviewerUserName != null) {
        oprot.writeFieldBegin(REVIEWER_USER_NAME_FIELD_DESC);
        oprot.writeString(struct.reviewerUserName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RATE_FIELD_DESC);
      oprot.writeDouble(struct.rate);
      oprot.writeFieldEnd();
      if (struct.timeElapsed != null) {
        oprot.writeFieldBegin(TIME_ELAPSED_FIELD_DESC);
        oprot.writeString(struct.timeElapsed);
        oprot.writeFieldEnd();
      }
      if (struct.reviewContent != null) {
        oprot.writeFieldBegin(REVIEW_CONTENT_FIELD_DESC);
        oprot.writeString(struct.reviewContent);
        oprot.writeFieldEnd();
      }
      if (struct.sex != null) {
        oprot.writeFieldBegin(SEX_FIELD_DESC);
        oprot.writeI32(struct.sex.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(USER_ID_FIELD_DESC);
      oprot.writeI32(struct.userId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_FOLLOWED_FIELD_DESC);
      oprot.writeBool(struct.isFollowed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_MY_FRIEND_FIELD_DESC);
      oprot.writeBool(struct.isMyFriend);
      oprot.writeFieldEnd();
      if (struct.photoUrl != null) {
        oprot.writeFieldBegin(PHOTO_URL_FIELD_DESC);
        oprot.writeString(struct.photoUrl);
        oprot.writeFieldEnd();
      }
      if (struct.thirdParty != null) {
        oprot.writeFieldBegin(THIRD_PARTY_FIELD_DESC);
        oprot.writeI32(struct.thirdParty.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.reviewerFirstName != null) {
        oprot.writeFieldBegin(REVIEWER_FIRST_NAME_FIELD_DESC);
        oprot.writeString(struct.reviewerFirstName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WineReviewAndRatingDataTupleSchemeFactory implements SchemeFactory {
    public WineReviewAndRatingDataTupleScheme getScheme() {
      return new WineReviewAndRatingDataTupleScheme();
    }
  }

  private static class WineReviewAndRatingDataTupleScheme extends TupleScheme<WineReviewAndRatingData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WineReviewAndRatingData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReviewerUserName()) {
        optionals.set(0);
      }
      if (struct.isSetRate()) {
        optionals.set(1);
      }
      if (struct.isSetTimeElapsed()) {
        optionals.set(2);
      }
      if (struct.isSetReviewContent()) {
        optionals.set(3);
      }
      if (struct.isSetSex()) {
        optionals.set(4);
      }
      if (struct.isSetUserId()) {
        optionals.set(5);
      }
      if (struct.isSetIsFollowed()) {
        optionals.set(6);
      }
      if (struct.isSetIsMyFriend()) {
        optionals.set(7);
      }
      if (struct.isSetPhotoUrl()) {
        optionals.set(8);
      }
      if (struct.isSetThirdParty()) {
        optionals.set(9);
      }
      if (struct.isSetReviewerFirstName()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetReviewerUserName()) {
        oprot.writeString(struct.reviewerUserName);
      }
      if (struct.isSetRate()) {
        oprot.writeDouble(struct.rate);
      }
      if (struct.isSetTimeElapsed()) {
        oprot.writeString(struct.timeElapsed);
      }
      if (struct.isSetReviewContent()) {
        oprot.writeString(struct.reviewContent);
      }
      if (struct.isSetSex()) {
        oprot.writeI32(struct.sex.getValue());
      }
      if (struct.isSetUserId()) {
        oprot.writeI32(struct.userId);
      }
      if (struct.isSetIsFollowed()) {
        oprot.writeBool(struct.isFollowed);
      }
      if (struct.isSetIsMyFriend()) {
        oprot.writeBool(struct.isMyFriend);
      }
      if (struct.isSetPhotoUrl()) {
        oprot.writeString(struct.photoUrl);
      }
      if (struct.isSetThirdParty()) {
        oprot.writeI32(struct.thirdParty.getValue());
      }
      if (struct.isSetReviewerFirstName()) {
        oprot.writeString(struct.reviewerFirstName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WineReviewAndRatingData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.reviewerUserName = iprot.readString();
        struct.setReviewerUserNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.rate = iprot.readDouble();
        struct.setRateIsSet(true);
      }
      if (incoming.get(2)) {
        struct.timeElapsed = iprot.readString();
        struct.setTimeElapsedIsSet(true);
      }
      if (incoming.get(3)) {
        struct.reviewContent = iprot.readString();
        struct.setReviewContentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sex = co.tagtalk.winemate.thriftfiles.ReviewerSex.findByValue(iprot.readI32());
        struct.setSexIsSet(true);
      }
      if (incoming.get(5)) {
        struct.userId = iprot.readI32();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.isFollowed = iprot.readBool();
        struct.setIsFollowedIsSet(true);
      }
      if (incoming.get(7)) {
        struct.isMyFriend = iprot.readBool();
        struct.setIsMyFriendIsSet(true);
      }
      if (incoming.get(8)) {
        struct.photoUrl = iprot.readString();
        struct.setPhotoUrlIsSet(true);
      }
      if (incoming.get(9)) {
        struct.thirdParty = co.tagtalk.winemate.thriftfiles.ThirdParty.findByValue(iprot.readI32());
        struct.setThirdPartyIsSet(true);
      }
      if (incoming.get(10)) {
        struct.reviewerFirstName = iprot.readString();
        struct.setReviewerFirstNameIsSet(true);
      }
    }
  }

}

