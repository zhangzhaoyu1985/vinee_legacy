/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package co.tagtalk.winemate.thriftfiles;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-24")
public class NewsFeedData implements org.apache.thrift.TBase<NewsFeedData, NewsFeedData._Fields>, java.io.Serializable, Cloneable, Comparable<NewsFeedData> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NewsFeedData");

  private static final org.apache.thrift.protocol.TField FEED_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("feedType", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField AUTHOR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("authorName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FEED_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("feedTitle", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CONTENT_TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("contentTitle", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CONTENT_ABSTRACT_FIELD_DESC = new org.apache.thrift.protocol.TField("contentAbstract", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PIC_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("picUrl", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CONTENT_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("contentUrl", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField AUTHOR_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("authorUrl", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NewsFeedDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NewsFeedDataTupleSchemeFactory());
  }

  /**
   * 
   * @see FeedType
   */
  public FeedType feedType; // required
  public String authorName; // required
  public String feedTitle; // required
  public String contentTitle; // required
  public String contentAbstract; // required
  public String date; // required
  public String picUrl; // required
  public String contentUrl; // required
  public String authorUrl; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see FeedType
     */
    FEED_TYPE((short)1, "feedType"),
    AUTHOR_NAME((short)2, "authorName"),
    FEED_TITLE((short)3, "feedTitle"),
    CONTENT_TITLE((short)4, "contentTitle"),
    CONTENT_ABSTRACT((short)5, "contentAbstract"),
    DATE((short)6, "date"),
    PIC_URL((short)7, "picUrl"),
    CONTENT_URL((short)8, "contentUrl"),
    AUTHOR_URL((short)9, "authorUrl");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FEED_TYPE
          return FEED_TYPE;
        case 2: // AUTHOR_NAME
          return AUTHOR_NAME;
        case 3: // FEED_TITLE
          return FEED_TITLE;
        case 4: // CONTENT_TITLE
          return CONTENT_TITLE;
        case 5: // CONTENT_ABSTRACT
          return CONTENT_ABSTRACT;
        case 6: // DATE
          return DATE;
        case 7: // PIC_URL
          return PIC_URL;
        case 8: // CONTENT_URL
          return CONTENT_URL;
        case 9: // AUTHOR_URL
          return AUTHOR_URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FEED_TYPE, new org.apache.thrift.meta_data.FieldMetaData("feedType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, FeedType.class)));
    tmpMap.put(_Fields.AUTHOR_NAME, new org.apache.thrift.meta_data.FieldMetaData("authorName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEED_TITLE, new org.apache.thrift.meta_data.FieldMetaData("feedTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_TITLE, new org.apache.thrift.meta_data.FieldMetaData("contentTitle", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_ABSTRACT, new org.apache.thrift.meta_data.FieldMetaData("contentAbstract", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PIC_URL, new org.apache.thrift.meta_data.FieldMetaData("picUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_URL, new org.apache.thrift.meta_data.FieldMetaData("contentUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTHOR_URL, new org.apache.thrift.meta_data.FieldMetaData("authorUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NewsFeedData.class, metaDataMap);
  }

  public NewsFeedData() {
  }

  public NewsFeedData(
    FeedType feedType,
    String authorName,
    String feedTitle,
    String contentTitle,
    String contentAbstract,
    String date,
    String picUrl,
    String contentUrl,
    String authorUrl)
  {
    this();
    this.feedType = feedType;
    this.authorName = authorName;
    this.feedTitle = feedTitle;
    this.contentTitle = contentTitle;
    this.contentAbstract = contentAbstract;
    this.date = date;
    this.picUrl = picUrl;
    this.contentUrl = contentUrl;
    this.authorUrl = authorUrl;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NewsFeedData(NewsFeedData other) {
    if (other.isSetFeedType()) {
      this.feedType = other.feedType;
    }
    if (other.isSetAuthorName()) {
      this.authorName = other.authorName;
    }
    if (other.isSetFeedTitle()) {
      this.feedTitle = other.feedTitle;
    }
    if (other.isSetContentTitle()) {
      this.contentTitle = other.contentTitle;
    }
    if (other.isSetContentAbstract()) {
      this.contentAbstract = other.contentAbstract;
    }
    if (other.isSetDate()) {
      this.date = other.date;
    }
    if (other.isSetPicUrl()) {
      this.picUrl = other.picUrl;
    }
    if (other.isSetContentUrl()) {
      this.contentUrl = other.contentUrl;
    }
    if (other.isSetAuthorUrl()) {
      this.authorUrl = other.authorUrl;
    }
  }

  public NewsFeedData deepCopy() {
    return new NewsFeedData(this);
  }

  @Override
  public void clear() {
    this.feedType = null;
    this.authorName = null;
    this.feedTitle = null;
    this.contentTitle = null;
    this.contentAbstract = null;
    this.date = null;
    this.picUrl = null;
    this.contentUrl = null;
    this.authorUrl = null;
  }

  /**
   * 
   * @see FeedType
   */
  public FeedType getFeedType() {
    return this.feedType;
  }

  /**
   * 
   * @see FeedType
   */
  public NewsFeedData setFeedType(FeedType feedType) {
    this.feedType = feedType;
    return this;
  }

  public void unsetFeedType() {
    this.feedType = null;
  }

  /** Returns true if field feedType is set (has been assigned a value) and false otherwise */
  public boolean isSetFeedType() {
    return this.feedType != null;
  }

  public void setFeedTypeIsSet(boolean value) {
    if (!value) {
      this.feedType = null;
    }
  }

  public String getAuthorName() {
    return this.authorName;
  }

  public NewsFeedData setAuthorName(String authorName) {
    this.authorName = authorName;
    return this;
  }

  public void unsetAuthorName() {
    this.authorName = null;
  }

  /** Returns true if field authorName is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorName() {
    return this.authorName != null;
  }

  public void setAuthorNameIsSet(boolean value) {
    if (!value) {
      this.authorName = null;
    }
  }

  public String getFeedTitle() {
    return this.feedTitle;
  }

  public NewsFeedData setFeedTitle(String feedTitle) {
    this.feedTitle = feedTitle;
    return this;
  }

  public void unsetFeedTitle() {
    this.feedTitle = null;
  }

  /** Returns true if field feedTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetFeedTitle() {
    return this.feedTitle != null;
  }

  public void setFeedTitleIsSet(boolean value) {
    if (!value) {
      this.feedTitle = null;
    }
  }

  public String getContentTitle() {
    return this.contentTitle;
  }

  public NewsFeedData setContentTitle(String contentTitle) {
    this.contentTitle = contentTitle;
    return this;
  }

  public void unsetContentTitle() {
    this.contentTitle = null;
  }

  /** Returns true if field contentTitle is set (has been assigned a value) and false otherwise */
  public boolean isSetContentTitle() {
    return this.contentTitle != null;
  }

  public void setContentTitleIsSet(boolean value) {
    if (!value) {
      this.contentTitle = null;
    }
  }

  public String getContentAbstract() {
    return this.contentAbstract;
  }

  public NewsFeedData setContentAbstract(String contentAbstract) {
    this.contentAbstract = contentAbstract;
    return this;
  }

  public void unsetContentAbstract() {
    this.contentAbstract = null;
  }

  /** Returns true if field contentAbstract is set (has been assigned a value) and false otherwise */
  public boolean isSetContentAbstract() {
    return this.contentAbstract != null;
  }

  public void setContentAbstractIsSet(boolean value) {
    if (!value) {
      this.contentAbstract = null;
    }
  }

  public String getDate() {
    return this.date;
  }

  public NewsFeedData setDate(String date) {
    this.date = date;
    return this;
  }

  public void unsetDate() {
    this.date = null;
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return this.date != null;
  }

  public void setDateIsSet(boolean value) {
    if (!value) {
      this.date = null;
    }
  }

  public String getPicUrl() {
    return this.picUrl;
  }

  public NewsFeedData setPicUrl(String picUrl) {
    this.picUrl = picUrl;
    return this;
  }

  public void unsetPicUrl() {
    this.picUrl = null;
  }

  /** Returns true if field picUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetPicUrl() {
    return this.picUrl != null;
  }

  public void setPicUrlIsSet(boolean value) {
    if (!value) {
      this.picUrl = null;
    }
  }

  public String getContentUrl() {
    return this.contentUrl;
  }

  public NewsFeedData setContentUrl(String contentUrl) {
    this.contentUrl = contentUrl;
    return this;
  }

  public void unsetContentUrl() {
    this.contentUrl = null;
  }

  /** Returns true if field contentUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetContentUrl() {
    return this.contentUrl != null;
  }

  public void setContentUrlIsSet(boolean value) {
    if (!value) {
      this.contentUrl = null;
    }
  }

  public String getAuthorUrl() {
    return this.authorUrl;
  }

  public NewsFeedData setAuthorUrl(String authorUrl) {
    this.authorUrl = authorUrl;
    return this;
  }

  public void unsetAuthorUrl() {
    this.authorUrl = null;
  }

  /** Returns true if field authorUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetAuthorUrl() {
    return this.authorUrl != null;
  }

  public void setAuthorUrlIsSet(boolean value) {
    if (!value) {
      this.authorUrl = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FEED_TYPE:
      if (value == null) {
        unsetFeedType();
      } else {
        setFeedType((FeedType)value);
      }
      break;

    case AUTHOR_NAME:
      if (value == null) {
        unsetAuthorName();
      } else {
        setAuthorName((String)value);
      }
      break;

    case FEED_TITLE:
      if (value == null) {
        unsetFeedTitle();
      } else {
        setFeedTitle((String)value);
      }
      break;

    case CONTENT_TITLE:
      if (value == null) {
        unsetContentTitle();
      } else {
        setContentTitle((String)value);
      }
      break;

    case CONTENT_ABSTRACT:
      if (value == null) {
        unsetContentAbstract();
      } else {
        setContentAbstract((String)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((String)value);
      }
      break;

    case PIC_URL:
      if (value == null) {
        unsetPicUrl();
      } else {
        setPicUrl((String)value);
      }
      break;

    case CONTENT_URL:
      if (value == null) {
        unsetContentUrl();
      } else {
        setContentUrl((String)value);
      }
      break;

    case AUTHOR_URL:
      if (value == null) {
        unsetAuthorUrl();
      } else {
        setAuthorUrl((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FEED_TYPE:
      return getFeedType();

    case AUTHOR_NAME:
      return getAuthorName();

    case FEED_TITLE:
      return getFeedTitle();

    case CONTENT_TITLE:
      return getContentTitle();

    case CONTENT_ABSTRACT:
      return getContentAbstract();

    case DATE:
      return getDate();

    case PIC_URL:
      return getPicUrl();

    case CONTENT_URL:
      return getContentUrl();

    case AUTHOR_URL:
      return getAuthorUrl();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FEED_TYPE:
      return isSetFeedType();
    case AUTHOR_NAME:
      return isSetAuthorName();
    case FEED_TITLE:
      return isSetFeedTitle();
    case CONTENT_TITLE:
      return isSetContentTitle();
    case CONTENT_ABSTRACT:
      return isSetContentAbstract();
    case DATE:
      return isSetDate();
    case PIC_URL:
      return isSetPicUrl();
    case CONTENT_URL:
      return isSetContentUrl();
    case AUTHOR_URL:
      return isSetAuthorUrl();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NewsFeedData)
      return this.equals((NewsFeedData)that);
    return false;
  }

  public boolean equals(NewsFeedData that) {
    if (that == null)
      return false;

    boolean this_present_feedType = true && this.isSetFeedType();
    boolean that_present_feedType = true && that.isSetFeedType();
    if (this_present_feedType || that_present_feedType) {
      if (!(this_present_feedType && that_present_feedType))
        return false;
      if (!this.feedType.equals(that.feedType))
        return false;
    }

    boolean this_present_authorName = true && this.isSetAuthorName();
    boolean that_present_authorName = true && that.isSetAuthorName();
    if (this_present_authorName || that_present_authorName) {
      if (!(this_present_authorName && that_present_authorName))
        return false;
      if (!this.authorName.equals(that.authorName))
        return false;
    }

    boolean this_present_feedTitle = true && this.isSetFeedTitle();
    boolean that_present_feedTitle = true && that.isSetFeedTitle();
    if (this_present_feedTitle || that_present_feedTitle) {
      if (!(this_present_feedTitle && that_present_feedTitle))
        return false;
      if (!this.feedTitle.equals(that.feedTitle))
        return false;
    }

    boolean this_present_contentTitle = true && this.isSetContentTitle();
    boolean that_present_contentTitle = true && that.isSetContentTitle();
    if (this_present_contentTitle || that_present_contentTitle) {
      if (!(this_present_contentTitle && that_present_contentTitle))
        return false;
      if (!this.contentTitle.equals(that.contentTitle))
        return false;
    }

    boolean this_present_contentAbstract = true && this.isSetContentAbstract();
    boolean that_present_contentAbstract = true && that.isSetContentAbstract();
    if (this_present_contentAbstract || that_present_contentAbstract) {
      if (!(this_present_contentAbstract && that_present_contentAbstract))
        return false;
      if (!this.contentAbstract.equals(that.contentAbstract))
        return false;
    }

    boolean this_present_date = true && this.isSetDate();
    boolean that_present_date = true && that.isSetDate();
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (!this.date.equals(that.date))
        return false;
    }

    boolean this_present_picUrl = true && this.isSetPicUrl();
    boolean that_present_picUrl = true && that.isSetPicUrl();
    if (this_present_picUrl || that_present_picUrl) {
      if (!(this_present_picUrl && that_present_picUrl))
        return false;
      if (!this.picUrl.equals(that.picUrl))
        return false;
    }

    boolean this_present_contentUrl = true && this.isSetContentUrl();
    boolean that_present_contentUrl = true && that.isSetContentUrl();
    if (this_present_contentUrl || that_present_contentUrl) {
      if (!(this_present_contentUrl && that_present_contentUrl))
        return false;
      if (!this.contentUrl.equals(that.contentUrl))
        return false;
    }

    boolean this_present_authorUrl = true && this.isSetAuthorUrl();
    boolean that_present_authorUrl = true && that.isSetAuthorUrl();
    if (this_present_authorUrl || that_present_authorUrl) {
      if (!(this_present_authorUrl && that_present_authorUrl))
        return false;
      if (!this.authorUrl.equals(that.authorUrl))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_feedType = true && (isSetFeedType());
    list.add(present_feedType);
    if (present_feedType)
      list.add(feedType.getValue());

    boolean present_authorName = true && (isSetAuthorName());
    list.add(present_authorName);
    if (present_authorName)
      list.add(authorName);

    boolean present_feedTitle = true && (isSetFeedTitle());
    list.add(present_feedTitle);
    if (present_feedTitle)
      list.add(feedTitle);

    boolean present_contentTitle = true && (isSetContentTitle());
    list.add(present_contentTitle);
    if (present_contentTitle)
      list.add(contentTitle);

    boolean present_contentAbstract = true && (isSetContentAbstract());
    list.add(present_contentAbstract);
    if (present_contentAbstract)
      list.add(contentAbstract);

    boolean present_date = true && (isSetDate());
    list.add(present_date);
    if (present_date)
      list.add(date);

    boolean present_picUrl = true && (isSetPicUrl());
    list.add(present_picUrl);
    if (present_picUrl)
      list.add(picUrl);

    boolean present_contentUrl = true && (isSetContentUrl());
    list.add(present_contentUrl);
    if (present_contentUrl)
      list.add(contentUrl);

    boolean present_authorUrl = true && (isSetAuthorUrl());
    list.add(present_authorUrl);
    if (present_authorUrl)
      list.add(authorUrl);

    return list.hashCode();
  }

  @Override
  public int compareTo(NewsFeedData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFeedType()).compareTo(other.isSetFeedType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeedType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedType, other.feedType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorName()).compareTo(other.isSetAuthorName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorName, other.authorName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeedTitle()).compareTo(other.isSetFeedTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeedTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedTitle, other.feedTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentTitle()).compareTo(other.isSetContentTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentTitle, other.contentTitle);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentAbstract()).compareTo(other.isSetContentAbstract());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentAbstract()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentAbstract, other.contentAbstract);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPicUrl()).compareTo(other.isSetPicUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPicUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.picUrl, other.picUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentUrl()).compareTo(other.isSetContentUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentUrl, other.contentUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAuthorUrl()).compareTo(other.isSetAuthorUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuthorUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.authorUrl, other.authorUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NewsFeedData(");
    boolean first = true;

    sb.append("feedType:");
    if (this.feedType == null) {
      sb.append("null");
    } else {
      sb.append(this.feedType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorName:");
    if (this.authorName == null) {
      sb.append("null");
    } else {
      sb.append(this.authorName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feedTitle:");
    if (this.feedTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.feedTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentTitle:");
    if (this.contentTitle == null) {
      sb.append("null");
    } else {
      sb.append(this.contentTitle);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentAbstract:");
    if (this.contentAbstract == null) {
      sb.append("null");
    } else {
      sb.append(this.contentAbstract);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    if (this.date == null) {
      sb.append("null");
    } else {
      sb.append(this.date);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("picUrl:");
    if (this.picUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.picUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentUrl:");
    if (this.contentUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.contentUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("authorUrl:");
    if (this.authorUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.authorUrl);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NewsFeedDataStandardSchemeFactory implements SchemeFactory {
    public NewsFeedDataStandardScheme getScheme() {
      return new NewsFeedDataStandardScheme();
    }
  }

  private static class NewsFeedDataStandardScheme extends StandardScheme<NewsFeedData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NewsFeedData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FEED_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.feedType = co.tagtalk.winemate.thriftfiles.FeedType.findByValue(iprot.readI32());
              struct.setFeedTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // AUTHOR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorName = iprot.readString();
              struct.setAuthorNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FEED_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feedTitle = iprot.readString();
              struct.setFeedTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CONTENT_TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentTitle = iprot.readString();
              struct.setContentTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CONTENT_ABSTRACT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentAbstract = iprot.readString();
              struct.setContentAbstractIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.date = iprot.readString();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PIC_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.picUrl = iprot.readString();
              struct.setPicUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONTENT_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentUrl = iprot.readString();
              struct.setContentUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // AUTHOR_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.authorUrl = iprot.readString();
              struct.setAuthorUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NewsFeedData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.feedType != null) {
        oprot.writeFieldBegin(FEED_TYPE_FIELD_DESC);
        oprot.writeI32(struct.feedType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.authorName != null) {
        oprot.writeFieldBegin(AUTHOR_NAME_FIELD_DESC);
        oprot.writeString(struct.authorName);
        oprot.writeFieldEnd();
      }
      if (struct.feedTitle != null) {
        oprot.writeFieldBegin(FEED_TITLE_FIELD_DESC);
        oprot.writeString(struct.feedTitle);
        oprot.writeFieldEnd();
      }
      if (struct.contentTitle != null) {
        oprot.writeFieldBegin(CONTENT_TITLE_FIELD_DESC);
        oprot.writeString(struct.contentTitle);
        oprot.writeFieldEnd();
      }
      if (struct.contentAbstract != null) {
        oprot.writeFieldBegin(CONTENT_ABSTRACT_FIELD_DESC);
        oprot.writeString(struct.contentAbstract);
        oprot.writeFieldEnd();
      }
      if (struct.date != null) {
        oprot.writeFieldBegin(DATE_FIELD_DESC);
        oprot.writeString(struct.date);
        oprot.writeFieldEnd();
      }
      if (struct.picUrl != null) {
        oprot.writeFieldBegin(PIC_URL_FIELD_DESC);
        oprot.writeString(struct.picUrl);
        oprot.writeFieldEnd();
      }
      if (struct.contentUrl != null) {
        oprot.writeFieldBegin(CONTENT_URL_FIELD_DESC);
        oprot.writeString(struct.contentUrl);
        oprot.writeFieldEnd();
      }
      if (struct.authorUrl != null) {
        oprot.writeFieldBegin(AUTHOR_URL_FIELD_DESC);
        oprot.writeString(struct.authorUrl);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NewsFeedDataTupleSchemeFactory implements SchemeFactory {
    public NewsFeedDataTupleScheme getScheme() {
      return new NewsFeedDataTupleScheme();
    }
  }

  private static class NewsFeedDataTupleScheme extends TupleScheme<NewsFeedData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NewsFeedData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFeedType()) {
        optionals.set(0);
      }
      if (struct.isSetAuthorName()) {
        optionals.set(1);
      }
      if (struct.isSetFeedTitle()) {
        optionals.set(2);
      }
      if (struct.isSetContentTitle()) {
        optionals.set(3);
      }
      if (struct.isSetContentAbstract()) {
        optionals.set(4);
      }
      if (struct.isSetDate()) {
        optionals.set(5);
      }
      if (struct.isSetPicUrl()) {
        optionals.set(6);
      }
      if (struct.isSetContentUrl()) {
        optionals.set(7);
      }
      if (struct.isSetAuthorUrl()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetFeedType()) {
        oprot.writeI32(struct.feedType.getValue());
      }
      if (struct.isSetAuthorName()) {
        oprot.writeString(struct.authorName);
      }
      if (struct.isSetFeedTitle()) {
        oprot.writeString(struct.feedTitle);
      }
      if (struct.isSetContentTitle()) {
        oprot.writeString(struct.contentTitle);
      }
      if (struct.isSetContentAbstract()) {
        oprot.writeString(struct.contentAbstract);
      }
      if (struct.isSetDate()) {
        oprot.writeString(struct.date);
      }
      if (struct.isSetPicUrl()) {
        oprot.writeString(struct.picUrl);
      }
      if (struct.isSetContentUrl()) {
        oprot.writeString(struct.contentUrl);
      }
      if (struct.isSetAuthorUrl()) {
        oprot.writeString(struct.authorUrl);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NewsFeedData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.feedType = co.tagtalk.winemate.thriftfiles.FeedType.findByValue(iprot.readI32());
        struct.setFeedTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.authorName = iprot.readString();
        struct.setAuthorNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.feedTitle = iprot.readString();
        struct.setFeedTitleIsSet(true);
      }
      if (incoming.get(3)) {
        struct.contentTitle = iprot.readString();
        struct.setContentTitleIsSet(true);
      }
      if (incoming.get(4)) {
        struct.contentAbstract = iprot.readString();
        struct.setContentAbstractIsSet(true);
      }
      if (incoming.get(5)) {
        struct.date = iprot.readString();
        struct.setDateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.picUrl = iprot.readString();
        struct.setPicUrlIsSet(true);
      }
      if (incoming.get(7)) {
        struct.contentUrl = iprot.readString();
        struct.setContentUrlIsSet(true);
      }
      if (incoming.get(8)) {
        struct.authorUrl = iprot.readString();
        struct.setAuthorUrlIsSet(true);
      }
    }
  }

}

